com.samsung.android.knox.analytics.service.KnoxAnalyticsServiceImpl.log(Lcom/samsung/android/knox/analytics/KnoxAnalyticsData;)V
com.android.server.statusbar.StatusBarManagerService.collapsePanelsToType(I)V
com.android.server.statusbar.StatusBarManagerService.disable2ForUserToType(ILandroid/os/IBinder;Ljava/lang/String;II)V
com.android.server.statusbar.StatusBarManagerService.disable2ToType(ILandroid/os/IBinder;Ljava/lang/String;I)V
com.android.server.statusbar.StatusBarManagerService.disableForUserToType(ILandroid/os/IBinder;Ljava/lang/String;II)V
com.android.server.statusbar.StatusBarManagerService.disableToType(ILandroid/os/IBinder;Ljava/lang/String;I)V
com.android.server.statusbar.StatusBarManagerService.expandNotificationsPanelToType(I)V
com.android.server.statusbar.StatusBarManagerService.expandSettingsPanelToType(Ljava/lang/String;I)V
com.android.server.statusbar.StatusBarManagerService.getDisableFlagsToType(Landroid/os/IBinder;II)[I
com.android.server.statusbar.StatusBarManagerService.getPanelExpandState()Z
com.android.server.statusbar.StatusBarManagerService.getPanelExpandStateToType(I)Z
com.android.server.statusbar.StatusBarManagerService.getQuickSettingPanelExpandState()Z
com.android.server.statusbar.StatusBarManagerService.getQuickSettingPanelExpandStateToType(I)Z
com.android.server.statusbar.StatusBarManagerService.isFOTAAvailableForGlobalActions()Z
com.android.server.statusbar.StatusBarManagerService.isSysUiSafeModeEnabled()Z
com.android.server.statusbar.StatusBarManagerService.rebootByBixby(Z)V
com.android.server.statusbar.StatusBarManagerService.registerStatusBarAsType(Lcom/android/internal/statusbar/IStatusBar;I)Lcom/android/internal/statusbar/RegisterStatusBarResult;
com.android.server.statusbar.StatusBarManagerService.registerStatusBarForCarLife(Lcom/android/internal/carlife/IStatusBarCarLife;)V
com.android.server.statusbar.StatusBarManagerService.resetScheduleAutoHide()V
com.android.server.statusbar.StatusBarManagerService.sendKeyEventToDesktopTaskbar(Landroid/view/KeyEvent;)V
com.android.server.statusbar.StatusBarManagerService.setBlueLightFilter(ZI)V
com.android.server.statusbar.StatusBarManagerService.setIndicatorBgColor(I)V
com.android.server.statusbar.StatusBarManagerService.setNavigationBarShortcut(Ljava/lang/String;Landroid/widget/RemoteViews;II)V
com.android.server.statusbar.StatusBarManagerService.setPanelExpandState(Z)V
com.android.server.statusbar.StatusBarManagerService.setPanelExpandStateToType(ZI)V
com.android.server.statusbar.StatusBarManagerService.shutdownByBixby()V
com.android.server.biometrics.sensors.face.FaceService$FaceServiceWrapper.semAuthenticate(Landroid/os/IBinder;JILandroid/hardware/face/IFaceServiceReceiver;Ljava/lang/String;Landroid/os/Bundle;[B)J
com.android.server.biometrics.sensors.face.FaceService$FaceServiceWrapper.semEnroll(ILandroid/os/IBinder;[BLandroid/hardware/face/IFaceServiceReceiver;Ljava/lang/String;[ILandroid/view/Surface;ZLandroid/os/Bundle;)J
com.android.server.biometrics.sensors.face.FaceService$FaceServiceWrapper.semGetRemainingLockoutTime(I)I
com.android.server.biometrics.sensors.face.FaceService$FaceServiceWrapper.semGetSecurityLevel(Z)I
com.android.server.biometrics.sensors.face.FaceService$FaceServiceWrapper.semGetTrustAppVersion()Ljava/lang/String;
com.android.server.biometrics.sensors.face.FaceService$FaceServiceWrapper.semIsEnrollSession()Z
com.android.server.biometrics.sensors.face.FaceService$FaceServiceWrapper.semIsFrameworkHandleLockout()Z
com.android.server.biometrics.sensors.face.FaceService$FaceServiceWrapper.semIsSessionClose()Z
com.android.server.biometrics.sensors.face.FaceService$FaceServiceWrapper.semPauseAuth()V
com.android.server.biometrics.sensors.face.FaceService$FaceServiceWrapper.semPauseEnroll()V
com.android.server.biometrics.sensors.face.FaceService$FaceServiceWrapper.semPrepareForAuthentication(IZLandroid/os/IBinder;JILandroid/hardware/biometrics/IBiometricSensorReceiver;Ljava/lang/String;IZLandroid/os/Bundle;)V
com.android.server.biometrics.sensors.face.FaceService$FaceServiceWrapper.semResetAuthenticationTimeout()Z
com.android.server.biometrics.sensors.face.FaceService$FaceServiceWrapper.semResumeAuth()V
com.android.server.biometrics.sensors.face.FaceService$FaceServiceWrapper.semResumeEnroll()V
com.android.server.biometrics.sensors.face.FaceService$FaceServiceWrapper.semSessionClose()V
com.android.server.biometrics.sensors.face.FaceService$FaceServiceWrapper.semSessionOpen()V
com.android.server.biometrics.sensors.face.FaceService$FaceServiceWrapper.semShouldRemoveTemplate()Z
com.android.server.biometrics.sensors.face.FaceService$FaceServiceWrapper.semUpdateTrustApp(Landroid/os/IBinder;Ljava/lang/String;ILandroid/hardware/face/IFaceServiceReceiver;Ljava/lang/String;)V
com.android.server.input.InputManagerService.addDeviceWirelessKeyboardShare(I)Z
com.android.server.input.InputManagerService.addKeyboardLayoutForInputDevice(Landroid/hardware/input/InputDeviceIdentifier;Ljava/lang/String;)V
com.android.server.input.InputManagerService.addPortAssociation(Ljava/lang/String;I)V
com.android.server.input.InputManagerService.addUniqueIdAssociation(Ljava/lang/String;Ljava/lang/String;)V
com.android.server.input.InputManagerService.cancelCurrentTouch()V
com.android.server.input.InputManagerService.cancelVibrate(ILandroid/os/IBinder;)V
com.android.server.input.InputManagerService.changeDeviceWirelessKeyboardShare(Ljava/lang/String;I)V
com.android.server.input.InputManagerService.checkInputFeature()I
com.android.server.input.InputManagerService.closeLightSession(ILandroid/os/IBinder;)V
com.android.server.input.InputManagerService.connectByBtDevice(Landroid/bluetooth/BluetoothDevice;)V
com.android.server.input.InputManagerService.disableInputDevice(I)V
com.android.server.input.InputManagerService.disableSensor(II)V
com.android.server.input.InputManagerService.enableInputDevice(I)V
com.android.server.input.InputManagerService.enableSensor(IIII)Z
com.android.server.input.InputManagerService.flushSensor(II)Z
com.android.server.input.InputManagerService.forceFadeIcon(I)V
com.android.server.input.InputManagerService.getBatteryCapacity(I)I
com.android.server.input.InputManagerService.getBatteryStatus(I)I
com.android.server.input.InputManagerService.getCurrentKeyboardLayoutForInputDevice(Landroid/hardware/input/InputDeviceIdentifier;)Ljava/lang/String;
com.android.server.input.InputManagerService.getDefaultPointerIcon()Landroid/view/PointerIcon;
com.android.server.input.InputManagerService.getDisplayIdForPointerIcon()I
com.android.server.input.InputManagerService.getEnabledKeyboardLayoutsForInputDevice(Landroid/hardware/input/InputDeviceIdentifier;)[Ljava/lang/String;
com.android.server.input.InputManagerService.getGlobalMetaState(I)I
com.android.server.input.InputManagerService.getInboundQueueLength()I
com.android.server.input.InputManagerService.getInputDevice(I)Landroid/view/InputDevice;
com.android.server.input.InputManagerService.getInputDeviceIds()[I
com.android.server.input.InputManagerService.getKeyCodeForKeyLocation(II)I
com.android.server.input.InputManagerService.getKeyboardLayout(Ljava/lang/String;)Landroid/hardware/input/KeyboardLayout;
com.android.server.input.InputManagerService.getKeyboardLayoutForInputDevice(Landroid/hardware/input/InputDeviceIdentifier;Landroid/view/inputmethod/InputMethodInfo;Landroid/view/inputmethod/InputMethodSubtype;)Landroid/hardware/input/KeyboardLayout;
com.android.server.input.InputManagerService.getKeyboardLayouts()[Landroid/hardware/input/KeyboardLayout;
com.android.server.input.InputManagerService.getKeyboardLayoutsForInputDevice(Landroid/hardware/input/InputDeviceIdentifier;)[Landroid/hardware/input/KeyboardLayout;
com.android.server.input.InputManagerService.getLastLidEventTimeNanos()J
com.android.server.input.InputManagerService.getLidState()I
com.android.server.input.InputManagerService.getLightState(II)Landroid/hardware/lights/LightState;
com.android.server.input.InputManagerService.getLights(I)Ljava/util/List;
com.android.server.input.InputManagerService.getScanCodeState(III)I
com.android.server.input.InputManagerService.getSensorList(I)[Landroid/hardware/input/InputSensorInfo;
com.android.server.input.InputManagerService.getToolTypeForDefaultPointerIcon()I
com.android.server.input.InputManagerService.getTouchCalibrationForInputDevice(Ljava/lang/String;I)Landroid/hardware/input/TouchCalibration;
com.android.server.input.InputManagerService.getVibratorIds(I)[I
com.android.server.input.InputManagerService.hasKeys(II[I[Z)Z
com.android.server.input.InputManagerService.injectInputEvent(Landroid/view/InputEvent;I)Z
com.android.server.input.InputManagerService.injectInputEventToTarget(Landroid/view/InputEvent;II)Z
com.android.server.input.InputManagerService.isDefaultPointerIconChanged()Z
com.android.server.input.InputManagerService.isInTabletMode()I
com.android.server.input.InputManagerService.isInputDeviceEnabled(I)Z
com.android.server.input.InputManagerService.isMicMuted()I
com.android.server.input.InputManagerService.isUidTouched(I)Z
com.android.server.input.InputManagerService.isVibrating(I)Z
com.android.server.input.InputManagerService.monitorGestureInput(Landroid/os/IBinder;Ljava/lang/String;II)Landroid/view/InputMonitor;
com.android.server.input.InputManagerService.monitorInputForBinder(Ljava/lang/String;II)Landroid/view/InputChannel;
com.android.server.input.InputManagerService.openLightSession(ILjava/lang/String;Landroid/os/IBinder;)V
com.android.server.input.InputManagerService.registerInputDevicesChangedListener(Landroid/hardware/input/IInputDevicesChangedListener;)V
com.android.server.input.InputManagerService.registerLidStateChangedListener(Landroid/hardware/input/ISemLidStateChangedListener;)V
com.android.server.input.InputManagerService.registerMultiFingerGestureListener(Landroid/hardware/input/IMultiFingerGestureListener;)V
com.android.server.input.InputManagerService.registerPointerIconChangedListener(Landroid/hardware/input/IPointerIconChangedListener;)V
com.android.server.input.InputManagerService.registerSensorListener(Landroid/hardware/input/IInputSensorEventListener;)Z
com.android.server.input.InputManagerService.registerTabletModeChangedListener(Landroid/hardware/input/ITabletModeChangedListener;)V
com.android.server.input.InputManagerService.registerVibratorStateListener(ILandroid/os/IVibratorStateListener;)Z
com.android.server.input.InputManagerService.registerWirelessKeyboardShareChangedListener(Landroid/hardware/input/IWirelessKeyboardShareChangedListener;)V
com.android.server.input.InputManagerService.removeDeviceWirelessKeyboardShare(Ljava/lang/String;I)V
com.android.server.input.InputManagerService.removeKeyboardLayoutForInputDevice(Landroid/hardware/input/InputDeviceIdentifier;Ljava/lang/String;)V
com.android.server.input.InputManagerService.removePortAssociation(Ljava/lang/String;)V
com.android.server.input.InputManagerService.removeUniqueIdAssociation(Ljava/lang/String;)V
com.android.server.input.InputManagerService.requestPointerCapture(Landroid/os/IBinder;Z)V
com.android.server.input.InputManagerService.semGetMotionIdleTimeMillis(Z)J
com.android.server.input.InputManagerService.setCoverVerify(I)V
com.android.server.input.InputManagerService.setCurrentKeyboardLayoutForInputDevice(Landroid/hardware/input/InputDeviceIdentifier;Ljava/lang/String;)V
com.android.server.input.InputManagerService.setCustomHoverIcon(Landroid/view/PointerIcon;)V
com.android.server.input.InputManagerService.setCustomPointerIcon(Landroid/view/PointerIcon;)V
com.android.server.input.InputManagerService.setDefaultPointerIcon(ILandroid/view/PointerIcon;Z)V
com.android.server.input.InputManagerService.setDisplayIdForPointerIcon(I)V
com.android.server.input.InputManagerService.setEnableTSP(IZ)Z
com.android.server.input.InputManagerService.setHostRoleWirelessKeyboardShare()V
com.android.server.input.InputManagerService.setKeyboardLayoutForInputDevice(Landroid/hardware/input/InputDeviceIdentifier;Landroid/view/inputmethod/InputMethodInfo;Landroid/view/inputmethod/InputMethodSubtype;Ljava/lang/String;)V
com.android.server.input.InputManagerService.setLightStates(I[I[Landroid/hardware/lights/LightState;Landroid/os/IBinder;)V
com.android.server.input.InputManagerService.setPointerIconType(I)V
com.android.server.input.InputManagerService.setShowAllTouches(Z)V
com.android.server.input.InputManagerService.setStartedShutdown(Z)V
com.android.server.input.InputManagerService.setTouchCalibrationForInputDevice(Ljava/lang/String;ILandroid/hardware/input/TouchCalibration;)V
com.android.server.input.InputManagerService.setWakeKeyDynamically(Ljava/lang/String;ZLjava/lang/String;)V
com.android.server.input.InputManagerService.switchDeviceWirelessKeyboardShare(Ljava/lang/String;I)Z
com.android.server.input.InputManagerService.tryPointerSpeed(I)V
com.android.server.input.InputManagerService.unregisterSensorListener(Landroid/hardware/input/IInputSensorEventListener;)V
com.android.server.input.InputManagerService.unregisterVibratorStateListener(ILandroid/os/IVibratorStateListener;)Z
com.android.server.input.InputManagerService.updateWirelessKeyboardShareStatus()V
com.android.server.input.InputManagerService.verifyInputEvent(Landroid/view/InputEvent;)Landroid/view/VerifiedInputEvent;
com.android.server.input.InputManagerService.vibrate(ILandroid/os/VibrationEffect;Landroid/os/IBinder;)V
com.android.server.input.InputManagerService.vibrateCombined(ILandroid/os/CombinedVibration;Landroid/os/IBinder;)V
com.att.iqi.libs.IQIServiceBroker$BinderService.disableService()V
com.att.iqi.libs.IQIServiceBroker$BinderService.forceStopService()V
com.att.iqi.libs.IQIServiceBroker$BinderService.getTimestamp()J
com.att.iqi.libs.IQIServiceBroker$BinderService.registerMetricQueryCallback(Lcom/att/iqi/lib/Metric$ID;Lcom/att/iqi/IMetricQueryCallback;)V
com.att.iqi.libs.IQIServiceBroker$BinderService.registerMetricSourcingCallback(Lcom/att/iqi/lib/Metric$ID;Lcom/att/iqi/IMetricSourcingCallback;)V
com.att.iqi.libs.IQIServiceBroker$BinderService.registerProfileChangedCallback(Lcom/att/iqi/IProfileChangedCallback;)V
com.att.iqi.libs.IQIServiceBroker$BinderService.registerServiceChangedCallback(Lcom/att/iqi/IServiceStateChangeCallback;)V
com.att.iqi.libs.IQIServiceBroker$BinderService.shouldSubmitMetric(Lcom/att/iqi/lib/Metric$ID;)Z
com.att.iqi.libs.IQIServiceBroker$BinderService.submitMetric(Lcom/att/iqi/lib/Metric;)V
com.att.iqi.libs.IQIServiceBroker$BinderService.unregisterMetricQueryCallback(Lcom/att/iqi/lib/Metric$ID;Lcom/att/iqi/IMetricQueryCallback;)V
com.att.iqi.libs.IQIServiceBroker$BinderService.unregisterMetricSourcingCallback(Lcom/att/iqi/lib/Metric$ID;Lcom/att/iqi/IMetricSourcingCallback;)V
com.att.iqi.libs.IQIServiceBroker$BinderService.unregisterProfileChangedCallback(Lcom/att/iqi/IProfileChangedCallback;)V
com.att.iqi.libs.IQIServiceBroker$BinderService.unregisterServiceChangedCallback(Lcom/att/iqi/IServiceStateChangeCallback;)V
com.att.iqi.IIQIBroker$Stub.disableService()V
com.att.iqi.IIQIBroker$Stub.forceStopService()V
com.att.iqi.IIQIBroker$Stub.getTimestamp()J
com.att.iqi.IIQIBroker$Stub.registerMetricQueryCallback(Lcom/att/iqi/lib/Metric$ID;Lcom/att/iqi/IMetricQueryCallback;)V
com.att.iqi.IIQIBroker$Stub.registerMetricSourcingCallback(Lcom/att/iqi/lib/Metric$ID;Lcom/att/iqi/IMetricSourcingCallback;)V
com.att.iqi.IIQIBroker$Stub.registerProfileChangedCallback(Lcom/att/iqi/IProfileChangedCallback;)V
com.att.iqi.IIQIBroker$Stub.registerServiceChangedCallback(Lcom/att/iqi/IServiceStateChangeCallback;)V
com.att.iqi.IIQIBroker$Stub.shouldSubmitMetric(Lcom/att/iqi/lib/Metric$ID;)Z
com.att.iqi.IIQIBroker$Stub.submitMetric(Lcom/att/iqi/lib/Metric;)V
com.att.iqi.IIQIBroker$Stub.unregisterMetricQueryCallback(Lcom/att/iqi/lib/Metric$ID;Lcom/att/iqi/IMetricQueryCallback;)V
com.att.iqi.IIQIBroker$Stub.unregisterMetricSourcingCallback(Lcom/att/iqi/lib/Metric$ID;Lcom/att/iqi/IMetricSourcingCallback;)V
com.att.iqi.IIQIBroker$Stub.unregisterProfileChangedCallback(Lcom/att/iqi/IProfileChangedCallback;)V
com.att.iqi.IIQIBroker$Stub.unregisterServiceChangedCallback(Lcom/att/iqi/IServiceStateChangeCallback;)V
com.android.server.enterprise.container.KnoxMUMRCPPolicyService.allowMoveAppsToContainer(Lcom/samsung/android/knox/ContextInfo;Z)Z
com.android.server.enterprise.container.KnoxMUMRCPPolicyService.allowMoveFilesToContainer(Lcom/samsung/android/knox/ContextInfo;Z)Z
com.android.server.enterprise.container.KnoxMUMRCPPolicyService.allowMoveFilesToOwner(Lcom/samsung/android/knox/ContextInfo;Z)Z
com.android.server.enterprise.container.KnoxMUMRCPPolicyService.allowShareClipboardDataToContainer(Lcom/samsung/android/knox/ContextInfo;Z)Z
com.android.server.enterprise.container.KnoxMUMRCPPolicyService.allowShareClipboardDataToOwner(Lcom/samsung/android/knox/ContextInfo;Z)Z
com.android.server.enterprise.container.KnoxMUMRCPPolicyService.getAllowChangeDataSyncPolicy(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;Ljava/lang/String;)Z
com.android.server.enterprise.container.KnoxMUMRCPPolicyService.getListFromAllowChangeDataSyncPolicy(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;Z)Ljava/util/List;
com.android.server.enterprise.container.KnoxMUMRCPPolicyService.getNotificationSyncPolicy(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
com.android.server.enterprise.container.KnoxMUMRCPPolicyService.getPackagesFromNotificationSyncPolicy(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;Ljava/lang/String;)Ljava/util/List;
com.android.server.enterprise.container.KnoxMUMRCPPolicyService.isMoveAppsToContainerAllowed(Lcom/samsung/android/knox/ContextInfo;)Z
com.android.server.enterprise.container.KnoxMUMRCPPolicyService.isMoveFilesToContainerAllowed(Lcom/samsung/android/knox/ContextInfo;)Z
com.android.server.enterprise.container.KnoxMUMRCPPolicyService.isMoveFilesToOwnerAllowed(Lcom/samsung/android/knox/ContextInfo;)Z
com.android.server.enterprise.container.KnoxMUMRCPPolicyService.isShareClipboardDataToContainerAllowed(Lcom/samsung/android/knox/ContextInfo;)Z
com.android.server.enterprise.container.KnoxMUMRCPPolicyService.isShareClipboardDataToOwnerAllowed(Lcom/samsung/android/knox/ContextInfo;)Z
com.android.server.enterprise.container.KnoxMUMRCPPolicyService.sendRCPPolicyChangeBroadcast(Ljava/lang/String;Ljava/lang/String;I)V
com.android.server.enterprise.container.KnoxMUMRCPPolicyService.sendRCPPolicyChangedBroadcast(I)V
com.android.server.enterprise.container.KnoxMUMRCPPolicyService.sendRCPPolicyChangedBroadcastToGearManager(Ljava/lang/String;I)V
com.android.server.enterprise.container.KnoxMUMRCPPolicyService.setAllowChangeDataSyncPolicy(Lcom/samsung/android/knox/ContextInfo;Ljava/util/List;Ljava/lang/String;Z)Z
com.android.server.enterprise.container.KnoxMUMRCPPolicyService.setNotificationSyncPolicy(Lcom/samsung/android/knox/ContextInfo;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;)Z
com.android.server.isrb.IsrbManagerServiceImpl.isBootCompleteState()Z
com.android.server.isrb.IsrbManagerServiceImpl.setFakeTime()V
com.android.server.isrb.IsrbManagerServiceImpl.setIsrbEnable(Z)V
com.android.server.sepunion.SemUnionMainServiceImpl.getSemSystemService(Ljava/lang/String;Landroid/os/Bundle;)Landroid/os/IBinder;
com.android.server.sepunion.SemUnionMainServiceImpl.setDumpEnabled(Ljava/lang/String;Ljava/lang/String;)V
com.android.server.spay.PaymentManagerService.getMeasurementFile()[B
com.android.server.spay.PaymentManagerService.registerSPayFW(Landroid/spay/PaymentTZServiceConfig;)Landroid/spay/PaymentTZServiceCommnInfo;
com.android.server.audio.AudioService.abandonAudioFocus(Landroid/media/IAudioFocusDispatcher;Ljava/lang/String;Landroid/media/AudioAttributes;Ljava/lang/String;)I
com.android.server.audio.AudioService.abandonAudioFocusForTest(Landroid/media/IAudioFocusDispatcher;Ljava/lang/String;Landroid/media/AudioAttributes;Ljava/lang/String;)I
com.android.server.audio.AudioService.addAssistantServicesUids([I)V
com.android.server.audio.AudioService.addMixForPolicy(Landroid/media/audiopolicy/AudioPolicyConfig;Landroid/media/audiopolicy/IAudioPolicyCallback;)I
com.android.server.audio.AudioService.addPackage(ILjava/lang/String;)V
com.android.server.audio.AudioService.addSpatializerCompatibleAudioDevice(Landroid/media/AudioDeviceAttributes;)V
com.android.server.audio.AudioService.adjustStreamVolume(IIILjava/lang/String;)V
com.android.server.audio.AudioService.adjustStreamVolumeForUid(IIILjava/lang/String;IILandroid/os/UserHandle;I)V
com.android.server.audio.AudioService.adjustStreamVolumeWithAttribution(IIILjava/lang/String;Ljava/lang/String;)V
com.android.server.audio.AudioService.adjustSuggestedStreamVolumeForUid(IIILjava/lang/String;IILandroid/os/UserHandle;I)V
com.android.server.audio.AudioService.areNavigationRepeatSoundEffectsEnabled()Z
com.android.server.audio.AudioService.canBeSpatialized(Landroid/media/AudioAttributes;Landroid/media/AudioFormat;)Z
com.android.server.audio.AudioService.cancelMuteAwaitConnection(Landroid/media/AudioDeviceAttributes;)V
com.android.server.audio.AudioService.clearPreferredDevicesForCapturePreset(I)I
com.android.server.audio.AudioService.disableSafeMediaVolume(Ljava/lang/String;)V
com.android.server.audio.AudioService.dismissVolumePanel()V
com.android.server.audio.AudioService.dispatchFocusChange(Landroid/media/AudioFocusInfo;ILandroid/media/audiopolicy/IAudioPolicyCallback;)I
com.android.server.audio.AudioService.forceRemoteSubmixFullVolume(ZLandroid/os/IBinder;)V
com.android.server.audio.AudioService.forceVolumeControlStream(ILandroid/os/IBinder;)V
com.android.server.audio.AudioService.getA2dpDeviceVolume(Landroid/bluetooth/BluetoothDevice;I)I
com.android.server.audio.AudioService.getActiveAssistantServiceUids()[I
com.android.server.audio.AudioService.getActivePlaybackConfigurations()Ljava/util/List;
com.android.server.audio.AudioService.getActiveRecordingConfigurations()Ljava/util/List;
com.android.server.audio.AudioService.getActualHeadTrackingMode()I
com.android.server.audio.AudioService.getAdditionalOutputDeviceDelay(Landroid/media/AudioDeviceAttributes;)J
com.android.server.audio.AudioService.getAllowedCapturePolicy()I
com.android.server.audio.AudioService.getAppDevice(I)I
com.android.server.audio.AudioService.getAppVolume(I)I
com.android.server.audio.AudioService.getAssistantServicesUids()[I
com.android.server.audio.AudioService.getAudioProductStrategies()Ljava/util/List;
com.android.server.audio.AudioService.getAudioServiceConfig(Ljava/lang/String;)Ljava/lang/String;
com.android.server.audio.AudioService.getAudioVolumeGroups()Ljava/util/List;
com.android.server.audio.AudioService.getAvailableCommunicationDeviceIds()[I
com.android.server.audio.AudioService.getCommunicationDevice()I
com.android.server.audio.AudioService.getCurrentAudioFocus()I
com.android.server.audio.AudioService.getCurrentAudioFocusPackageName()Ljava/lang/String;
com.android.server.audio.AudioService.getDefaultVolumeInfo()Landroid/media/VolumeInfo;
com.android.server.audio.AudioService.getDesiredHeadTrackingMode()I
com.android.server.audio.AudioService.getDeviceMaskForStream(I)I
com.android.server.audio.AudioService.getDeviceVolumeBehavior(Landroid/media/AudioDeviceAttributes;)I
com.android.server.audio.AudioService.getDevicesForAttributes(Landroid/media/AudioAttributes;)Ljava/util/List;
com.android.server.audio.AudioService.getDevicesForAttributesUnprotected(Landroid/media/AudioAttributes;)Ljava/util/List;
com.android.server.audio.AudioService.getEncodedSurroundMode(I)I
com.android.server.audio.AudioService.getExcludedRingtoneTitles(I)Ljava/util/List;
com.android.server.audio.AudioService.getFadeOutDurationOnFocusLossMillis(Landroid/media/AudioAttributes;)J
com.android.server.audio.AudioService.getFineVolume(II)I
com.android.server.audio.AudioService.getFloatVolumeTable()[F
com.android.server.audio.AudioService.getFocusRampTimeMs(ILandroid/media/AudioAttributes;)I
com.android.server.audio.AudioService.getFocusStack()Ljava/util/List;
com.android.server.audio.AudioService.getHalVersion()Ljava/lang/String;
com.android.server.audio.AudioService.getLastAudibleStreamVolume(I)I
com.android.server.audio.AudioService.getMaxAdditionalOutputDeviceDelay(Landroid/media/AudioDeviceAttributes;)J
com.android.server.audio.AudioService.getMaxVolumeIndexForAttributes(Landroid/media/AudioAttributes;)I
com.android.server.audio.AudioService.getMediaVolumeSteps()[I
com.android.server.audio.AudioService.getMinVolumeIndexForAttributes(Landroid/media/AudioAttributes;)I
com.android.server.audio.AudioService.getMode()I
com.android.server.audio.AudioService.getModeInternal()I
com.android.server.audio.AudioService.getMuteInterval()I
com.android.server.audio.AudioService.getMutingExpectedDevice()Landroid/media/AudioDeviceAttributes;
com.android.server.audio.AudioService.getPinAppInfo(I)Ljava/lang/String;
com.android.server.audio.AudioService.getPinDevice()I
com.android.server.audio.AudioService.getPreferredDevicesForCapturePreset(I)Ljava/util/List;
com.android.server.audio.AudioService.getPreferredDevicesForStrategy(I)Ljava/util/List;
com.android.server.audio.AudioService.getPrevRingerMode()I
com.android.server.audio.AudioService.getRadioOutputPath()I
com.android.server.audio.AudioService.getRemainingMuteIntervalMs()I
com.android.server.audio.AudioService.getReportedSurroundFormats()Ljava/util/List;
com.android.server.audio.AudioService.getRingerModeExternal()I
com.android.server.audio.AudioService.getRingerModeInternal()I
com.android.server.audio.AudioService.getRingtonePlayer()Landroid/media/IRingtonePlayer;
com.android.server.audio.AudioService.getSelectedAppList()[Ljava/lang/String;
com.android.server.audio.AudioService.getSpatializerCompatibleAudioDevices()Ljava/util/List;
com.android.server.audio.AudioService.getSpatializerImmersiveAudioLevel()I
com.android.server.audio.AudioService.getSpatializerOutput()I
com.android.server.audio.AudioService.getSpatializerParameter(I[B)V
com.android.server.audio.AudioService.getStreamMaxVolume(I)I
com.android.server.audio.AudioService.getStreamMinVolume(I)I
com.android.server.audio.AudioService.getStreamVolume(I)I
com.android.server.audio.AudioService.getStreamVolumeForDevice(II)I
com.android.server.audio.AudioService.getSupportedHeadTrackingModes()[I
com.android.server.audio.AudioService.getSupportedSystemUsages()[I
com.android.server.audio.AudioService.getSurroundFormats()Ljava/util/Map;
com.android.server.audio.AudioService.getUiSoundsStreamType()I
com.android.server.audio.AudioService.getUidForDevice(I)I
com.android.server.audio.AudioService.getVibrateSetting(I)I
com.android.server.audio.AudioService.getVolumeIndexForAttributes(Landroid/media/AudioAttributes;)I
com.android.server.audio.AudioService.handleBluetoothActiveDeviceChanged(Landroid/bluetooth/BluetoothDevice;Landroid/bluetooth/BluetoothDevice;Landroid/media/BluetoothProfileConnectionInfo;)V
com.android.server.audio.AudioService.handleVolumeKey(Landroid/view/KeyEvent;ZLjava/lang/String;Ljava/lang/String;)V
com.android.server.audio.AudioService.hasHapticChannels(Landroid/net/Uri;)Z
com.android.server.audio.AudioService.hasHeadTracker(Landroid/media/AudioDeviceAttributes;)Z
com.android.server.audio.AudioService.hasRegisteredDynamicPolicy()Z
com.android.server.audio.AudioService.isAlreadyInDB(Ljava/lang/String;)Z
com.android.server.audio.AudioService.isAppMute(I)Z
com.android.server.audio.AudioService.isAudioServerRunning()Z
com.android.server.audio.AudioService.isBluetoothA2dpOn()Z
com.android.server.audio.AudioService.isBluetoothScoOn()Z
com.android.server.audio.AudioService.isCallScreeningModeSupported()Z
com.android.server.audio.AudioService.isCameraSoundForced()Z
com.android.server.audio.AudioService.isForceSpeakerOn()Z
com.android.server.audio.AudioService.isHdmiSystemAudioSupported()Z
com.android.server.audio.AudioService.isHeadTrackerAvailable()Z
com.android.server.audio.AudioService.isHeadTrackerEnabled(Landroid/media/AudioDeviceAttributes;)Z
com.android.server.audio.AudioService.isHomeSoundEffectEnabled()Z
com.android.server.audio.AudioService.isInAllowedList(Ljava/lang/String;)Z
com.android.server.audio.AudioService.isMasterMute()Z
com.android.server.audio.AudioService.isMicrophoneMuted()Z
com.android.server.audio.AudioService.isMultiSoundOn()Z
com.android.server.audio.AudioService.isMusicActive(Z)Z
com.android.server.audio.AudioService.isPstnCallAudioInterceptable()Z
com.android.server.audio.AudioService.isSafeMediaVolumeStateActive()Z
com.android.server.audio.AudioService.isSpatializerAvailable()Z
com.android.server.audio.AudioService.isSpatializerAvailableForDevice(Landroid/media/AudioDeviceAttributes;)Z
com.android.server.audio.AudioService.isSpatializerEnabled()Z
com.android.server.audio.AudioService.isSpeakerphoneOn()Z
com.android.server.audio.AudioService.isStreamAffectedByMute(I)Z
com.android.server.audio.AudioService.isStreamAffectedByRingerMode(I)Z
com.android.server.audio.AudioService.isStreamMute(I)Z
com.android.server.audio.AudioService.isSurroundFormatEnabled(I)Z
com.android.server.audio.AudioService.isUltrasoundSupported()Z
com.android.server.audio.AudioService.isUsingAudio(I)Z
com.android.server.audio.AudioService.isValidRingerMode(I)Z
com.android.server.audio.AudioService.isVolumeFixed()Z
com.android.server.audio.AudioService.loadSoundEffects()Z
com.android.server.audio.AudioService.muteAwaitConnection([ILandroid/media/AudioDeviceAttributes;J)V
com.android.server.audio.AudioService.nativeEvent(Ljava/lang/String;Ljava/lang/String;I)V
com.android.server.audio.AudioService.notifySafetyVolumeDialogVisible(Landroid/media/IVolumeController;Z)V
com.android.server.audio.AudioService.notifyVolumeControllerVisible(Landroid/media/IVolumeController;Z)V
com.android.server.audio.AudioService.playSoundEffect(II)V
com.android.server.audio.AudioService.playSoundEffectVolume(IF)V
com.android.server.audio.AudioService.playerAttributes(ILandroid/media/AudioAttributes;)V
com.android.server.audio.AudioService.playerEvent(III)V
com.android.server.audio.AudioService.playerHasOpPlayAudio(IZ)V
com.android.server.audio.AudioService.playerSessionId(II)V
com.android.server.audio.AudioService.recenterHeadTracker()V
com.android.server.audio.AudioService.recordRingtoneChanger(Ljava/lang/String;)V
com.android.server.audio.AudioService.recorderEvent(II)V
com.android.server.audio.AudioService.registerAudioPolicy(Landroid/media/audiopolicy/AudioPolicyConfig;Landroid/media/audiopolicy/IAudioPolicyCallback;ZZZZLandroid/media/projection/IMediaProjection;)Ljava/lang/String;
com.android.server.audio.AudioService.registerAudioServerStateDispatcher(Landroid/media/IAudioServerStateDispatcher;)V
com.android.server.audio.AudioService.registerCapturePresetDevicesRoleDispatcher(Landroid/media/ICapturePresetDevicesRoleDispatcher;)V
com.android.server.audio.AudioService.registerCommunicationDeviceDispatcher(Landroid/media/ICommunicationDeviceDispatcher;)V
com.android.server.audio.AudioService.registerDeviceVolumeBehaviorDispatcher(ZLandroid/media/IDeviceVolumeBehaviorDispatcher;)V
com.android.server.audio.AudioService.registerDeviceVolumeDispatcherForAbsoluteVolume(ZLandroid/media/IAudioDeviceVolumeDispatcher;Ljava/lang/String;Landroid/media/AudioDeviceAttributes;Ljava/util/List;Z)V
com.android.server.audio.AudioService.registerHeadToSoundstagePoseCallback(Landroid/media/ISpatializerHeadToSoundStagePoseCallback;)V
com.android.server.audio.AudioService.registerModeDispatcher(Landroid/media/IAudioModeDispatcher;)V
com.android.server.audio.AudioService.registerMuteAwaitConnectionDispatcher(Landroid/media/IMuteAwaitConnectionCallback;Z)V
com.android.server.audio.AudioService.registerPlaybackCallback(Landroid/media/IPlaybackConfigDispatcher;)V
com.android.server.audio.AudioService.registerPlaybackCallbackWithPackage(Landroid/media/IPlaybackConfigDispatcher;Ljava/lang/String;)V
com.android.server.audio.AudioService.registerRecordingCallback(Landroid/media/IRecordingConfigDispatcher;)V
com.android.server.audio.AudioService.registerSpatializerCallback(Landroid/media/ISpatializerCallback;)V
com.android.server.audio.AudioService.registerSpatializerHeadTrackerAvailableCallback(Landroid/media/ISpatializerHeadTrackerAvailableCallback;Z)V
com.android.server.audio.AudioService.registerSpatializerHeadTrackingCallback(Landroid/media/ISpatializerHeadTrackingModeCallback;)V
com.android.server.audio.AudioService.registerSpatializerOutputCallback(Landroid/media/ISpatializerOutputCallback;)V
com.android.server.audio.AudioService.registerStrategyPreferredDevicesDispatcher(Landroid/media/IStrategyPreferredDevicesDispatcher;)V
com.android.server.audio.AudioService.releasePlayer(I)V
com.android.server.audio.AudioService.releaseRecorder(I)V
com.android.server.audio.AudioService.reloadAudioSettings()V
com.android.server.audio.AudioService.removeAssistantServicesUids([I)V
com.android.server.audio.AudioService.removeMixForPolicy(Landroid/media/audiopolicy/AudioPolicyConfig;Landroid/media/audiopolicy/IAudioPolicyCallback;)I
com.android.server.audio.AudioService.removePackageForName(Ljava/lang/String;)V
com.android.server.audio.AudioService.removePreferredDevicesForStrategy(I)I
com.android.server.audio.AudioService.removeSpatializerCompatibleAudioDevice(Landroid/media/AudioDeviceAttributes;)V
com.android.server.audio.AudioService.removeUidDeviceAffinity(Landroid/media/audiopolicy/IAudioPolicyCallback;I)I
com.android.server.audio.AudioService.removeUserIdDeviceAffinity(Landroid/media/audiopolicy/IAudioPolicyCallback;I)I
com.android.server.audio.AudioService.requestAudioFocus(Landroid/media/AudioAttributes;ILandroid/os/IBinder;Landroid/media/IAudioFocusDispatcher;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILandroid/media/audiopolicy/IAudioPolicyCallback;I)I
com.android.server.audio.AudioService.requestAudioFocusForTest(Landroid/media/AudioAttributes;ILandroid/os/IBinder;Landroid/media/IAudioFocusDispatcher;Ljava/lang/String;Ljava/lang/String;III)I
com.android.server.audio.AudioService.secGetActiveStreamType(I)I
com.android.server.audio.AudioService.sendFocusLoss(Landroid/media/AudioFocusInfo;Landroid/media/audiopolicy/IAudioPolicyCallback;)Z
com.android.server.audio.AudioService.setA2dpDeviceVolume(Landroid/bluetooth/BluetoothDevice;IIILjava/lang/String;)V
com.android.server.audio.AudioService.setActiveAssistantServiceUids([I)V
com.android.server.audio.AudioService.setAdditionalOutputDeviceDelay(Landroid/media/AudioDeviceAttributes;J)Z
com.android.server.audio.AudioService.setAllowedCapturePolicy(I)I
com.android.server.audio.AudioService.setAppDevice(IIZ)V
com.android.server.audio.AudioService.setAppMute(IZLjava/lang/String;)V
com.android.server.audio.AudioService.setAppVolume(IILjava/lang/String;)V
com.android.server.audio.AudioService.setAudioServiceConfig(Ljava/lang/String;)V
com.android.server.audio.AudioService.setBluetoothA2dpOn(Z)V
com.android.server.audio.AudioService.setBluetoothScoOn(Z)V
com.android.server.audio.AudioService.setBtOffloadEnable(I)V
com.android.server.audio.AudioService.setCommunicationDevice(Landroid/os/IBinder;I)Z
com.android.server.audio.AudioService.setDesiredHeadTrackingMode(I)V
com.android.server.audio.AudioService.setDeviceToForceByUser(ILjava/lang/String;Z)I
com.android.server.audio.AudioService.setDeviceVolumeBehavior(Landroid/media/AudioDeviceAttributes;ILjava/lang/String;)V
com.android.server.audio.AudioService.setEncodedSurroundMode(I)Z
com.android.server.audio.AudioService.setFineVolume(IIIILjava/lang/String;)V
com.android.server.audio.AudioService.setFocusPropertiesForPolicy(ILandroid/media/audiopolicy/IAudioPolicyCallback;)I
com.android.server.audio.AudioService.setFocusRequestResultFromExtPolicy(Landroid/media/AudioFocusInfo;ILandroid/media/audiopolicy/IAudioPolicyCallback;)V
com.android.server.audio.AudioService.setForceSpeakerOn(Z)V
com.android.server.audio.AudioService.setHdmiSystemAudioSupported(Z)I
com.android.server.audio.AudioService.setHeadTrackerEnabled(ZLandroid/media/AudioDeviceAttributes;)V
com.android.server.audio.AudioService.setHomeSoundEffectEnabled(Z)V
com.android.server.audio.AudioService.setMasterMute(ZILjava/lang/String;ILjava/lang/String;)V
com.android.server.audio.AudioService.setMediaVolumeSteps([I)Z
com.android.server.audio.AudioService.setMicrophoneMute(ZLjava/lang/String;ILjava/lang/String;)V
com.android.server.audio.AudioService.setMicrophoneMuteFromSwitch(Z)V
com.android.server.audio.AudioService.setMode(ILandroid/os/IBinder;Ljava/lang/String;)V
com.android.server.audio.AudioService.setMultiAudioFocusEnabled(Z)V
com.android.server.audio.AudioService.setMultiSoundOn(ZZ)V
com.android.server.audio.AudioService.setMuteInterval(ILjava/lang/String;)V
com.android.server.audio.AudioService.setNavigationRepeatSoundEffectsEnabled(Z)V
com.android.server.audio.AudioService.setPreferredDevicesForCapturePreset(ILjava/util/List;)I
com.android.server.audio.AudioService.setPreferredDevicesForStrategy(ILjava/util/List;)I
com.android.server.audio.AudioService.setRadioOutputPath(I)V
com.android.server.audio.AudioService.setRemoteMic(Z)V
com.android.server.audio.AudioService.setRingerModeExternal(ILjava/lang/String;)V
com.android.server.audio.AudioService.setRingerModeInternal(ILjava/lang/String;)V
com.android.server.audio.AudioService.setRingtonePlayer(Landroid/media/IRingtonePlayer;)V
com.android.server.audio.AudioService.setRttEnabled(Z)V
com.android.server.audio.AudioService.setSoundSettingEventBroadcastIntent(ILandroid/app/PendingIntent;)V
com.android.server.audio.AudioService.setSpatializerEnabled(Z)V
com.android.server.audio.AudioService.setSpatializerGlobalTransform([F)V
com.android.server.audio.AudioService.setSpatializerParameter(I[B)V
com.android.server.audio.AudioService.setSpeakerphoneOn(Landroid/os/IBinder;Z)V
com.android.server.audio.AudioService.setStreamVolume(IIILjava/lang/String;)V
com.android.server.audio.AudioService.setStreamVolumeForDeviceWithAttribution(IIILjava/lang/String;Ljava/lang/String;I)V
com.android.server.audio.AudioService.setStreamVolumeForUid(IIILjava/lang/String;IILandroid/os/UserHandle;I)V
com.android.server.audio.AudioService.setStreamVolumeWithAttribution(IIILjava/lang/String;Ljava/lang/String;)V
com.android.server.audio.AudioService.setSupportedSystemUsages([I)V
com.android.server.audio.AudioService.setSurroundFormatEnabled(IZ)Z
com.android.server.audio.AudioService.setTestDeviceConnectionState(Landroid/media/AudioDeviceAttributes;Z)V
com.android.server.audio.AudioService.setUidDeviceAffinity(Landroid/media/audiopolicy/IAudioPolicyCallback;I[I[Ljava/lang/String;)I
com.android.server.audio.AudioService.setUserIdDeviceAffinity(Landroid/media/audiopolicy/IAudioPolicyCallback;I[I[Ljava/lang/String;)I
com.android.server.audio.AudioService.setVibrateSetting(II)V
com.android.server.audio.AudioService.setVolumeController(Landroid/media/IVolumeController;)V
com.android.server.audio.AudioService.setVolumeIndexForAttributes(Landroid/media/AudioAttributes;IILjava/lang/String;Ljava/lang/String;)V
com.android.server.audio.AudioService.setVolumePolicy(Landroid/media/VolumePolicy;)V
com.android.server.audio.AudioService.setWiredDeviceConnectionState(Landroid/media/AudioDeviceAttributes;ILjava/lang/String;)V
com.android.server.audio.AudioService.shouldShowRingtoneVolume()Z
com.android.server.audio.AudioService.shouldVibrate(I)Z
com.android.server.audio.AudioService.startBluetoothSco(Landroid/os/IBinder;I)V
com.android.server.audio.AudioService.startBluetoothScoVirtualCall(Landroid/os/IBinder;)V
com.android.server.audio.AudioService.startWatchingRoutes(Landroid/media/IAudioRoutesObserver;)Landroid/media/AudioRoutesInfo;
com.android.server.audio.AudioService.stopBluetoothSco(Landroid/os/IBinder;)V
com.android.server.audio.AudioService.trackPlayer(Landroid/media/PlayerBase$PlayerIdCard;)I
com.android.server.audio.AudioService.trackRecorder(Landroid/os/IBinder;)I
com.android.server.audio.AudioService.unloadSoundEffects()V
com.android.server.audio.AudioService.unregisterAudioFocusClient(Ljava/lang/String;)V
com.android.server.audio.AudioService.unregisterAudioPolicy(Landroid/media/audiopolicy/IAudioPolicyCallback;)V
com.android.server.audio.AudioService.unregisterAudioPolicyAsync(Landroid/media/audiopolicy/IAudioPolicyCallback;)V
com.android.server.audio.AudioService.unregisterAudioServerStateDispatcher(Landroid/media/IAudioServerStateDispatcher;)V
com.android.server.audio.AudioService.unregisterCapturePresetDevicesRoleDispatcher(Landroid/media/ICapturePresetDevicesRoleDispatcher;)V
com.android.server.audio.AudioService.unregisterCommunicationDeviceDispatcher(Landroid/media/ICommunicationDeviceDispatcher;)V
com.android.server.audio.AudioService.unregisterHeadToSoundstagePoseCallback(Landroid/media/ISpatializerHeadToSoundStagePoseCallback;)V
com.android.server.audio.AudioService.unregisterModeDispatcher(Landroid/media/IAudioModeDispatcher;)V
com.android.server.audio.AudioService.unregisterPlaybackCallback(Landroid/media/IPlaybackConfigDispatcher;)V
com.android.server.audio.AudioService.unregisterRecordingCallback(Landroid/media/IRecordingConfigDispatcher;)V
com.android.server.audio.AudioService.unregisterSpatializerCallback(Landroid/media/ISpatializerCallback;)V
com.android.server.audio.AudioService.unregisterSpatializerHeadTrackingCallback(Landroid/media/ISpatializerHeadTrackingModeCallback;)V
com.android.server.audio.AudioService.unregisterSpatializerOutputCallback(Landroid/media/ISpatializerOutputCallback;)V
com.android.server.audio.AudioService.unregisterStrategyPreferredDevicesDispatcher(Landroid/media/IStrategyPreferredDevicesDispatcher;)V
com.android.server.pm.UserManagerService.getBModeDefaultIcon(I)Landroid/graphics/Bitmap;
com.android.server.pm.UserManagerService.isLowOnStorageForMaintenanceMode()Z
com.android.server.pm.UserManagerService.semGetSemUserInfo(I)Landroid/content/pm/SemUserInfo;
com.android.server.pm.UserManagerService.updateUserInfo(ILandroid/os/Bundle;)Z
com.android.server.inputmethod.InputMethodManagerService.dismissAndShowAgainInputMethodPicker()V
com.android.server.inputmethod.InputMethodManagerService.getCurTokenDisplayId()I
com.android.server.inputmethod.InputMethodManagerService.getCurrentFocusDisplayID()I
com.android.server.inputmethod.InputMethodManagerService.getDexSettingsValue(Ljava/lang/String;Ljava/lang/String;)Z
com.android.server.inputmethod.InputMethodManagerService.getWACOMPen()Z
com.android.server.inputmethod.InputMethodManagerService.handleVoiceHWKey()V
com.android.server.inputmethod.InputMethodManagerService.isAccessoryKeyboard()I
com.android.server.inputmethod.InputMethodManagerService.isCurrentInputMethodAsSamsungKeyboard()Z
com.android.server.inputmethod.InputMethodManagerService.isInputMethodShown()Z
com.android.server.inputmethod.InputMethodManagerService.minimizeSoftInput(Lcom/android/internal/view/IInputMethodClient;I)Z
com.android.server.inputmethod.InputMethodManagerService.overrideDirectWritingFlag()V
com.android.server.inputmethod.InputMethodManagerService.setDirectWritingFlag(Z)V
com.android.server.inputmethod.InputMethodManagerService.setInputMethodSwitchDisable(Lcom/android/internal/view/IInputMethodClient;Z)V
com.android.server.inputmethod.InputMethodManagerService.undoMinimizeSoftInput()V
com.samsung.android.server.wifi.SemWifiServiceImpl.addOrUpdateNetwork(Lcom/samsung/android/wifi/SemWifiConfiguration;)Z
com.samsung.android.server.wifi.SemWifiServiceImpl.addOrUpdateWifiControlHistory(Ljava/lang/String;Z)V
com.samsung.android.server.wifi.SemWifiServiceImpl.blockFccChannelBackoff(Z)V
com.samsung.android.server.wifi.SemWifiServiceImpl.canAutoHotspotBeEnabled()Z
com.samsung.android.server.wifi.SemWifiServiceImpl.checkAppForWiFiOffloading(Ljava/lang/String;)V
com.samsung.android.server.wifi.SemWifiServiceImpl.clearAutoHotspotLists()V
com.samsung.android.server.wifi.SemWifiServiceImpl.connectToMcfMHS(Ljava/lang/String;IIILjava/lang/String;Ljava/lang/String;I)I
com.samsung.android.server.wifi.SemWifiServiceImpl.connectToSmartD2DClient(Ljava/lang/String;Ljava/lang/String;Lcom/samsung/android/wifi/ISemWifiApSmartCallback;)Z
com.samsung.android.server.wifi.SemWifiServiceImpl.connectToSmartMHS(Ljava/lang/String;IIILjava/lang/String;Ljava/lang/String;IZ)Z
com.samsung.android.server.wifi.SemWifiServiceImpl.disableRandomMac()V
com.samsung.android.server.wifi.SemWifiServiceImpl.disconnectApBlockAutojoin(Z)Z
com.samsung.android.server.wifi.SemWifiServiceImpl.enableHotspotTsfInfo(Z)V
com.samsung.android.server.wifi.SemWifiServiceImpl.externalTwtInterface(ILjava/lang/String;)V
com.samsung.android.server.wifi.SemWifiServiceImpl.factoryReset()V
com.samsung.android.server.wifi.SemWifiServiceImpl.getAdvancedAutohotspotConnectSettings()I
com.samsung.android.server.wifi.SemWifiServiceImpl.getAdvancedAutohotspotLCDSettings()I
com.samsung.android.server.wifi.SemWifiServiceImpl.getAntInfo()Ljava/lang/String;
com.samsung.android.server.wifi.SemWifiServiceImpl.getAutoShareDump()Ljava/lang/String;
com.samsung.android.server.wifi.SemWifiServiceImpl.getAutoWifiDump()Ljava/lang/String;
com.samsung.android.server.wifi.SemWifiServiceImpl.getChannelUtilization()I
com.samsung.android.server.wifi.SemWifiServiceImpl.getConfiguredNetworkLocations()Ljava/util/Map;
com.samsung.android.server.wifi.SemWifiServiceImpl.getConfiguredNetworks()Landroid/content/pm/ParceledListSlice;
com.samsung.android.server.wifi.SemWifiServiceImpl.getConnectivityLog(Ljava/lang/String;)Ljava/lang/String;
com.samsung.android.server.wifi.SemWifiServiceImpl.getCountryCode()Ljava/lang/String;
com.samsung.android.server.wifi.SemWifiServiceImpl.getCountryRev()Ljava/lang/String;
com.samsung.android.server.wifi.SemWifiServiceImpl.getCurrentStatusMode()I
com.samsung.android.server.wifi.SemWifiServiceImpl.getCurrentWifiRouterInfo()Landroid/os/Bundle;
com.samsung.android.server.wifi.SemWifiServiceImpl.getDCXOcalibrationData()Ljava/lang/String;
com.samsung.android.server.wifi.SemWifiServiceImpl.getDiagnosisResults()Ljava/util/List;
com.samsung.android.server.wifi.SemWifiServiceImpl.getEasySetupScanSettings()Ljava/util/Map;
com.samsung.android.server.wifi.SemWifiServiceImpl.getFactoryMacAddress()Ljava/lang/String;
com.samsung.android.server.wifi.SemWifiServiceImpl.getFrameburstInfo()Ljava/lang/String;
com.samsung.android.server.wifi.SemWifiServiceImpl.getHotspotAntMode()I
com.samsung.android.server.wifi.SemWifiServiceImpl.getIWCQTables()Ljava/lang/String;
com.samsung.android.server.wifi.SemWifiServiceImpl.getIndoorStatus()I
com.samsung.android.server.wifi.SemWifiServiceImpl.getIssueDetectorDump(I)Ljava/lang/String;
com.samsung.android.server.wifi.SemWifiServiceImpl.getMHSConfig(Ljava/lang/String;)Ljava/lang/String;
com.samsung.android.server.wifi.SemWifiServiceImpl.getMaxTdlsSession()I
com.samsung.android.server.wifi.SemWifiServiceImpl.getMcfConnectedStatus(Ljava/lang/String;)I
com.samsung.android.server.wifi.SemWifiServiceImpl.getMcfConnectedStatusFromScanResult(Ljava/lang/String;)I
com.samsung.android.server.wifi.SemWifiServiceImpl.getMcfScanDetail()Ljava/util/List;
com.samsung.android.server.wifi.SemWifiServiceImpl.getMonthlyDataUsage()Ljava/util/List;
com.samsung.android.server.wifi.SemWifiServiceImpl.getNumOfTdlsSession()I
com.samsung.android.server.wifi.SemWifiServiceImpl.getNumOfWifiAnt()I
com.samsung.android.server.wifi.SemWifiServiceImpl.getOptimizerMode()I
com.samsung.android.server.wifi.SemWifiServiceImpl.getProfileShareDump()Ljava/lang/String;
com.samsung.android.server.wifi.SemWifiServiceImpl.getProvisionSuccess()I
com.samsung.android.server.wifi.SemWifiServiceImpl.getPsmInfo()Ljava/lang/String;
com.samsung.android.server.wifi.SemWifiServiceImpl.getQoSScores(Ljava/util/List;)Ljava/util/Map;
com.samsung.android.server.wifi.SemWifiServiceImpl.getRoamBand()I
com.samsung.android.server.wifi.SemWifiServiceImpl.getRoamDelta()I
com.samsung.android.server.wifi.SemWifiServiceImpl.getRoamScanPeriod()I
com.samsung.android.server.wifi.SemWifiServiceImpl.getRoamTrigger()I
com.samsung.android.server.wifi.SemWifiServiceImpl.getRssi(Ljava/lang/String;)I
com.samsung.android.server.wifi.SemWifiServiceImpl.getSilentRoamingDump(I)Ljava/lang/String;
com.samsung.android.server.wifi.SemWifiServiceImpl.getSmartApConnectedStatus(Ljava/lang/String;)I
com.samsung.android.server.wifi.SemWifiServiceImpl.getSmartApConnectedStatusFromScanResult(Ljava/lang/String;)I
com.samsung.android.server.wifi.SemWifiServiceImpl.getSmartD2DClientConnectedStatus(Ljava/lang/String;)I
com.samsung.android.server.wifi.SemWifiServiceImpl.getSoftApBands()[I
com.samsung.android.server.wifi.SemWifiServiceImpl.getSoftApConfiguration()Landroid/net/wifi/SoftApConfiguration;
com.samsung.android.server.wifi.SemWifiServiceImpl.getStationInfo(Ljava/lang/String;)Ljava/lang/String;
com.samsung.android.server.wifi.SemWifiServiceImpl.getTWTParams()[I
com.samsung.android.server.wifi.SemWifiServiceImpl.getTcpMonitorAllSocketHistory(I)Ljava/lang/String;
com.samsung.android.server.wifi.SemWifiServiceImpl.getTcpMonitorDnsHistory(I)Ljava/lang/String;
com.samsung.android.server.wifi.SemWifiServiceImpl.getTcpMonitorSocketForegroundHistory(I)Ljava/lang/String;
com.samsung.android.server.wifi.SemWifiServiceImpl.getTopHotspotClientsToday(II)Ljava/util/List;
com.samsung.android.server.wifi.SemWifiServiceImpl.getTopHotspotClientsTodayAsString(II)Ljava/lang/String;
com.samsung.android.server.wifi.SemWifiServiceImpl.getTotalAndTop3ClientsDataUsageBetweenGivenDates(JJ)Ljava/util/List;
com.samsung.android.server.wifi.SemWifiServiceImpl.getValidState()I
com.samsung.android.server.wifi.SemWifiServiceImpl.getVendorWlanDriverProp(Ljava/lang/String;)Ljava/lang/String;
com.samsung.android.server.wifi.SemWifiServiceImpl.getWcmEverQualityTested()I
com.samsung.android.server.wifi.SemWifiServiceImpl.getWifiApBleD2DScanDetail()Ljava/util/List;
com.samsung.android.server.wifi.SemWifiServiceImpl.getWifiApBleScanDetail()Ljava/util/List;
com.samsung.android.server.wifi.SemWifiServiceImpl.getWifiApChannel()I
com.samsung.android.server.wifi.SemWifiServiceImpl.getWifiApClientDetails(Ljava/lang/String;)Lcom/samsung/android/wifi/SemWifiApClientDetails;
com.samsung.android.server.wifi.SemWifiServiceImpl.getWifiApConnectedStationCount()I
com.samsung.android.server.wifi.SemWifiServiceImpl.getWifiApDailyDataLimit()J
com.samsung.android.server.wifi.SemWifiServiceImpl.getWifiApFreq()I
com.samsung.android.server.wifi.SemWifiServiceImpl.getWifiApGuestPassword()Ljava/lang/String;
com.samsung.android.server.wifi.SemWifiServiceImpl.getWifiApInterfaceName()Ljava/lang/String;
com.samsung.android.server.wifi.SemWifiServiceImpl.getWifiApIsolate()Z
com.samsung.android.server.wifi.SemWifiServiceImpl.getWifiApLOHSState()I
com.samsung.android.server.wifi.SemWifiServiceImpl.getWifiApMacAclMode()I
com.samsung.android.server.wifi.SemWifiServiceImpl.getWifiApMaxClient()I
com.samsung.android.server.wifi.SemWifiServiceImpl.getWifiApMaxClientFromFramework()I
com.samsung.android.server.wifi.SemWifiServiceImpl.getWifiApStaList()Ljava/lang/String;
com.samsung.android.server.wifi.SemWifiServiceImpl.getWifiApStaListDetail()Ljava/util/List;
com.samsung.android.server.wifi.SemWifiServiceImpl.getWifiApState()I
com.samsung.android.server.wifi.SemWifiServiceImpl.getWifiApTodaysTotalDataUsage()J
com.samsung.android.server.wifi.SemWifiServiceImpl.getWifiApWarningActivityRunningState()I
com.samsung.android.server.wifi.SemWifiServiceImpl.getWifiApWpsPbc()Z
com.samsung.android.server.wifi.SemWifiServiceImpl.getWifiCid()Ljava/lang/String;
com.samsung.android.server.wifi.SemWifiServiceImpl.getWifiEnableHistory()Ljava/lang/String;
com.samsung.android.server.wifi.SemWifiServiceImpl.getWifiFirmwareVersion()Ljava/lang/String;
com.samsung.android.server.wifi.SemWifiServiceImpl.getWifiIconVisibility()I
com.samsung.android.server.wifi.SemWifiServiceImpl.getWifiRouterInfo(Ljava/lang/String;)Landroid/os/Bundle;
com.samsung.android.server.wifi.SemWifiServiceImpl.getWifiRouterInfoBestEffort(Ljava/lang/String;)Ljava/lang/String;
com.samsung.android.server.wifi.SemWifiServiceImpl.getWifiRouterInfoPresentable(Ljava/lang/String;)Ljava/lang/String;
com.samsung.android.server.wifi.SemWifiServiceImpl.getWifiStaInfo()Ljava/lang/String;
com.samsung.android.server.wifi.SemWifiServiceImpl.getWifiSupportedFeatureSet()Ljava/lang/String;
com.samsung.android.server.wifi.SemWifiServiceImpl.getWifiUsabilityStatsEntry(I)Ljava/lang/String;
com.samsung.android.server.wifi.SemWifiServiceImpl.getWifiVersions()Ljava/lang/String;
com.samsung.android.server.wifi.SemWifiServiceImpl.hasConfiguredNetworkLocations(Ljava/lang/String;)Z
com.samsung.android.server.wifi.SemWifiServiceImpl.isAvailableAutoWifiScan()Z
com.samsung.android.server.wifi.SemWifiServiceImpl.isAvailableTdls()Z
com.samsung.android.server.wifi.SemWifiServiceImpl.isClientAcceptedWifiProfileSharing(Z)V
com.samsung.android.server.wifi.SemWifiServiceImpl.isGripSensorMonitorEnabled()Z
com.samsung.android.server.wifi.SemWifiServiceImpl.isIndividualAppSupported()Z
com.samsung.android.server.wifi.SemWifiServiceImpl.isMCFClientAutohotspotSupported()Z
com.samsung.android.server.wifi.SemWifiServiceImpl.isNCHOModeEnabled()Z
com.samsung.android.server.wifi.SemWifiServiceImpl.isOverAllMhsDataLimitReached()Z
com.samsung.android.server.wifi.SemWifiServiceImpl.isOverAllMhsDataLimitSet()Z
com.samsung.android.server.wifi.SemWifiServiceImpl.isP2pConnected()Z
com.samsung.android.server.wifi.SemWifiServiceImpl.isScanningEnabled()Z
com.samsung.android.server.wifi.SemWifiServiceImpl.isSupportedAutoWifi()Z
com.samsung.android.server.wifi.SemWifiServiceImpl.isSupportedProfileRequest()Z
com.samsung.android.server.wifi.SemWifiServiceImpl.isSupportedQoSProvider()Z
com.samsung.android.server.wifi.SemWifiServiceImpl.isUploadModeEnabled()Z
com.samsung.android.server.wifi.SemWifiServiceImpl.isWesModeEnabled()Z
com.samsung.android.server.wifi.SemWifiServiceImpl.isWiderBandwidthTdlsSupported()Z
com.samsung.android.server.wifi.SemWifiServiceImpl.isWifiApEnabled()Z
com.samsung.android.server.wifi.SemWifiServiceImpl.isWifiApEnabledWithDualBand()Z
com.samsung.android.server.wifi.SemWifiServiceImpl.isWifiApGuestClient(Ljava/lang/String;)Z
com.samsung.android.server.wifi.SemWifiServiceImpl.isWifiApGuestModeEnabled()Z
com.samsung.android.server.wifi.SemWifiServiceImpl.isWifiApGuestModeIsolationEnabled()Z
com.samsung.android.server.wifi.SemWifiServiceImpl.isWifiApMacAclEnabled()Z
com.samsung.android.server.wifi.SemWifiServiceImpl.isWifiApWpa3Supported()Z
com.samsung.android.server.wifi.SemWifiServiceImpl.isWifiDeveloperModeEnabled()Z
com.samsung.android.server.wifi.SemWifiServiceImpl.isWifiSharingEnabled()Z
com.samsung.android.server.wifi.SemWifiServiceImpl.isWifiSharingLiteSupported()Z
com.samsung.android.server.wifi.SemWifiServiceImpl.isWifiSharingSupported()Z
com.samsung.android.server.wifi.SemWifiServiceImpl.linkQosQuery(JJJ)Z
com.samsung.android.server.wifi.SemWifiServiceImpl.manageWifiApMacAclList(Ljava/lang/String;Ljava/lang/String;II)I
com.samsung.android.server.wifi.SemWifiServiceImpl.notifyConnect(ILjava/lang/String;)V
com.samsung.android.server.wifi.SemWifiServiceImpl.notifyReachabilityLost()V
com.samsung.android.server.wifi.SemWifiServiceImpl.readWifiApMacAclList(I)Ljava/util/List;
com.samsung.android.server.wifi.SemWifiServiceImpl.registerClientDataUsageCallback(Landroid/os/IBinder;Lcom/samsung/android/wifi/ISemWifiApClientUpdateCallback;ILjava/lang/String;)V
com.samsung.android.server.wifi.SemWifiServiceImpl.registerClientListDataUsageCallback(Landroid/os/IBinder;Lcom/samsung/android/wifi/ISemWifiApClientListUpdateCallback;III)V
com.samsung.android.server.wifi.SemWifiServiceImpl.registerPasswordCallback(Ljava/lang/String;Lcom/samsung/android/wifi/ISemSharedPasswordCallback;)V
com.samsung.android.server.wifi.SemWifiServiceImpl.registerWifiApDataUsageCallback(Landroid/os/IBinder;Lcom/samsung/android/wifi/ISemWifiApDataUsageCallback;I)V
com.samsung.android.server.wifi.SemWifiServiceImpl.registerWifiApSmartCallback(Landroid/os/IBinder;Lcom/samsung/android/wifi/ISemWifiApSmartCallback;I)V
com.samsung.android.server.wifi.SemWifiServiceImpl.removeExcludedNetwork(I)V
com.samsung.android.server.wifi.SemWifiServiceImpl.removeFactoryMacAddress()Z
com.samsung.android.server.wifi.SemWifiServiceImpl.removeNetwork(Ljava/lang/String;)Z
com.samsung.android.server.wifi.SemWifiServiceImpl.removePktlogFilter(Ljava/lang/String;Ljava/lang/String;)Z
com.samsung.android.server.wifi.SemWifiServiceImpl.reportBigData(Ljava/lang/String;Ljava/lang/String;)V
com.samsung.android.server.wifi.SemWifiServiceImpl.reportHotspotDumpLogs(Ljava/lang/String;)V
com.samsung.android.server.wifi.SemWifiServiceImpl.reportIssue(ILandroid/os/Bundle;)V
com.samsung.android.server.wifi.SemWifiServiceImpl.requestPassword(Z)V
com.samsung.android.server.wifi.SemWifiServiceImpl.requestStopAutohotspotAdvertisement(Z)V
com.samsung.android.server.wifi.SemWifiServiceImpl.resetSoftAp(Landroid/os/Message;)V
com.samsung.android.server.wifi.SemWifiServiceImpl.restoreIWCSettingsValue(II)V
com.samsung.android.server.wifi.SemWifiServiceImpl.restoreSemConfigurationsBackupData(Ljava/lang/String;)V
com.samsung.android.server.wifi.SemWifiServiceImpl.retrieveSemWifiConfigsBackupData()Ljava/lang/String;
com.samsung.android.server.wifi.SemWifiServiceImpl.runAutoShareForCurrent(Ljava/util/List;)V
com.samsung.android.server.wifi.SemWifiServiceImpl.runIptablesRulesCommand(Ljava/lang/String;)Ljava/lang/String;
com.samsung.android.server.wifi.SemWifiServiceImpl.saveFwDump()Z
com.samsung.android.server.wifi.SemWifiServiceImpl.sendReassociationRequestFrame(Ljava/lang/String;I)Z
com.samsung.android.server.wifi.SemWifiServiceImpl.sendVendorSpecificActionFrame(Ljava/lang/String;IILjava/lang/String;)Z
com.samsung.android.server.wifi.SemWifiServiceImpl.set5GmmWaveSarBackoffEnabled(Z)V
com.samsung.android.server.wifi.SemWifiServiceImpl.setAdvancedAutohotspotConnectSettings(I)V
com.samsung.android.server.wifi.SemWifiServiceImpl.setAdvancedAutohotspotLCDSettings(I)V
com.samsung.android.server.wifi.SemWifiServiceImpl.setAllowWifiScan(ZLjava/lang/String;)V
com.samsung.android.server.wifi.SemWifiServiceImpl.setAntInfo(Ljava/lang/String;)Z
com.samsung.android.server.wifi.SemWifiServiceImpl.setAntMode(I)V
com.samsung.android.server.wifi.SemWifiServiceImpl.setArdkPowerSaveMode(Z)V
com.samsung.android.server.wifi.SemWifiServiceImpl.setAutohotspotToastMessage(I)V
com.samsung.android.server.wifi.SemWifiServiceImpl.setConnectionAttemptInfo(IZLjava/lang/String;)V
com.samsung.android.server.wifi.SemWifiServiceImpl.setConnectivityCheckDisabled(Z)V
com.samsung.android.server.wifi.SemWifiServiceImpl.setCountryRev(Ljava/lang/String;)Z
com.samsung.android.server.wifi.SemWifiServiceImpl.setDCXOcalibrationData(Ljava/lang/String;)Z
com.samsung.android.server.wifi.SemWifiServiceImpl.setDtimInSuspendMode(I)V
com.samsung.android.server.wifi.SemWifiServiceImpl.setEasySetupScanSettings(Ljava/lang/String;Lcom/samsung/android/wifi/SemEasySetupWifiScanSettings;)V
com.samsung.android.server.wifi.SemWifiServiceImpl.setFactoryMacAddress(Ljava/lang/String;)Z
com.samsung.android.server.wifi.SemWifiServiceImpl.setFccChannelBackoffEnabled(Ljava/lang/String;Z)V
com.samsung.android.server.wifi.SemWifiServiceImpl.setFrameburstInfo(Ljava/lang/String;)Z
com.samsung.android.server.wifi.SemWifiServiceImpl.setGripSensorMonitorEnabled(Z)V
com.samsung.android.server.wifi.SemWifiServiceImpl.setHotspotAntMode(I)V
com.samsung.android.server.wifi.SemWifiServiceImpl.setIWCMockAction(I)V
com.samsung.android.server.wifi.SemWifiServiceImpl.setIWCQTables(Ljava/lang/String;)V
com.samsung.android.server.wifi.SemWifiServiceImpl.setImsCallEstablished(Z)V
com.samsung.android.server.wifi.SemWifiServiceImpl.setKeepConnection(ZZ)V
com.samsung.android.server.wifi.SemWifiServiceImpl.setKeepConnectionAlways(Z)V
com.samsung.android.server.wifi.SemWifiServiceImpl.setKeepConnectionBigData(I)V
com.samsung.android.server.wifi.SemWifiServiceImpl.setLatencyCritical(Ljava/lang/String;I)Z
com.samsung.android.server.wifi.SemWifiServiceImpl.setLocalOnlyHotspotEnabled(ZLjava/lang/String;Ljava/lang/String;I)Z
com.samsung.android.server.wifi.SemWifiServiceImpl.setMHSConfig(Ljava/lang/String;)Ljava/lang/String;
com.samsung.android.server.wifi.SemWifiServiceImpl.setMaxDtimInSuspendMode(Z)V
com.samsung.android.server.wifi.SemWifiServiceImpl.setNCHOModeEnabled(Z)Z
com.samsung.android.server.wifi.SemWifiServiceImpl.setOptimizerMode(I)Z
com.samsung.android.server.wifi.SemWifiServiceImpl.setPktlogFilter(Ljava/lang/String;Ljava/lang/String;)Z
com.samsung.android.server.wifi.SemWifiServiceImpl.setPowerSavingTime(I)V
com.samsung.android.server.wifi.SemWifiServiceImpl.setProvisionSuccess(Z)Z
com.samsung.android.server.wifi.SemWifiServiceImpl.setPsmInfo(Ljava/lang/String;)Z
com.samsung.android.server.wifi.SemWifiServiceImpl.setRoamBand(I)Z
com.samsung.android.server.wifi.SemWifiServiceImpl.setRoamDelta(I)Z
com.samsung.android.server.wifi.SemWifiServiceImpl.setRoamScanChannels([Ljava/lang/String;)Z
com.samsung.android.server.wifi.SemWifiServiceImpl.setRoamScanEnabled(Z)Z
com.samsung.android.server.wifi.SemWifiServiceImpl.setRoamScanPeriod(I)Z
com.samsung.android.server.wifi.SemWifiServiceImpl.setRoamTrigger(I)Z
com.samsung.android.server.wifi.SemWifiServiceImpl.setSoftApConfiguration(Landroid/net/wifi/SoftApConfiguration;)V
com.samsung.android.server.wifi.SemWifiServiceImpl.setTCRule(ZLjava/lang/String;I)V
com.samsung.android.server.wifi.SemWifiServiceImpl.setTdlsEnabled(Z)Z
com.samsung.android.server.wifi.SemWifiServiceImpl.setTestSettings(ILandroid/os/Bundle;)V
com.samsung.android.server.wifi.SemWifiServiceImpl.setUploadModeEnabled(Z)Z
com.samsung.android.server.wifi.SemWifiServiceImpl.setUserConfirmForSharingPassword(ZLjava/lang/String;)V
com.samsung.android.server.wifi.SemWifiServiceImpl.setVendorWlanDriverProp(Ljava/lang/String;Ljava/lang/String;)Z
com.samsung.android.server.wifi.SemWifiServiceImpl.setVerboseLoggingEnabled(Z)V
com.samsung.android.server.wifi.SemWifiServiceImpl.setWesModeEnabled(Z)Z
com.samsung.android.server.wifi.SemWifiServiceImpl.setWifiApClientDataPaused(Ljava/lang/String;Z)V
com.samsung.android.server.wifi.SemWifiServiceImpl.setWifiApClientMobileDataLimit(Ljava/lang/String;J)V
com.samsung.android.server.wifi.SemWifiServiceImpl.setWifiApClientTimeLimit(Ljava/lang/String;J)V
com.samsung.android.server.wifi.SemWifiServiceImpl.setWifiApConfigurationToDefault()V
com.samsung.android.server.wifi.SemWifiServiceImpl.setWifiApDailyDataLimit(J)V
com.samsung.android.server.wifi.SemWifiServiceImpl.setWifiApEnabled(Landroid/net/wifi/SoftApConfiguration;Z)Z
com.samsung.android.server.wifi.SemWifiServiceImpl.setWifiApGuestModeEnabled(Z)V
com.samsung.android.server.wifi.SemWifiServiceImpl.setWifiApGuestModeIsolationEnabled(Z)V
com.samsung.android.server.wifi.SemWifiServiceImpl.setWifiApGuestPassword(Ljava/lang/String;)V
com.samsung.android.server.wifi.SemWifiServiceImpl.setWifiApIsolate(Z)V
com.samsung.android.server.wifi.SemWifiServiceImpl.setWifiApMacAclEnable(Z)V
com.samsung.android.server.wifi.SemWifiServiceImpl.setWifiApMacAclMode(I)V
com.samsung.android.server.wifi.SemWifiServiceImpl.setWifiApMaxClient(I)V
com.samsung.android.server.wifi.SemWifiServiceImpl.setWifiApMaxClientToFramework(I)V
com.samsung.android.server.wifi.SemWifiServiceImpl.setWifiApWarningActivityRunning(I)V
com.samsung.android.server.wifi.SemWifiServiceImpl.setWifiApWpsPbc(Z)V
com.samsung.android.server.wifi.SemWifiServiceImpl.setWifiDeveloperModeEnabled(Z)V
com.samsung.android.server.wifi.SemWifiServiceImpl.setWifiSettingsForegroundState(I)V
com.samsung.android.server.wifi.SemWifiServiceImpl.setWifiSharingEnabled(Z)Z
com.samsung.android.server.wifi.SemWifiServiceImpl.setWifiUwbCoexEnabled(IZ)I
com.samsung.android.server.wifi.SemWifiServiceImpl.startIssueMonitoring(Landroid/os/Bundle;)V
com.samsung.android.server.wifi.SemWifiServiceImpl.startMcfClientMHSDiscovery(Z)I
com.samsung.android.server.wifi.SemWifiServiceImpl.startMcfMHSAdvertisement(Z)I
com.samsung.android.server.wifi.SemWifiServiceImpl.startScan(Ljava/lang/String;)Z
com.samsung.android.server.wifi.SemWifiServiceImpl.startTimerForWifiOffload()V
com.samsung.android.server.wifi.SemWifiServiceImpl.supportWifiAp5G()Z
com.samsung.android.server.wifi.SemWifiServiceImpl.supportWifiAp5GBasedOnCountry()Z
com.samsung.android.server.wifi.SemWifiServiceImpl.supportWifiAp6GBasedOnCountry()Z
com.samsung.android.server.wifi.SemWifiServiceImpl.triggerBackoffRoutine(Z)V
com.samsung.android.server.wifi.SemWifiServiceImpl.unRegisterWifiApDataUsageCallback(I)V
com.samsung.android.server.wifi.SemWifiServiceImpl.unregisterClientDataUsageCallback(I)V
com.samsung.android.server.wifi.SemWifiServiceImpl.unregisterClientListDataUsageCallback(I)V
com.samsung.android.server.wifi.SemWifiServiceImpl.unregisterPasswordCallback(Lcom/samsung/android/wifi/ISemSharedPasswordCallback;)V
com.samsung.android.server.wifi.SemWifiServiceImpl.unregisterWifiApSmartCallback(I)V
com.samsung.android.server.wifi.SemWifiServiceImpl.updateGuiderFeature(Landroid/os/Bundle;)V
com.samsung.android.server.wifi.SemWifiServiceImpl.updateHostapdMacList(I)V
com.samsung.android.server.wifi.SemWifiServiceImpl.updateIWCHintCard(J)V
com.samsung.android.server.wifi.SemWifiServiceImpl.wifiApBackUpClientDataUsageSettingsInfo()Ljava/lang/String;
com.samsung.android.server.wifi.SemWifiServiceImpl.wifiApBleClientRole(Z)Z
com.samsung.android.server.wifi.SemWifiServiceImpl.wifiApBleD2DClientRole(Z)Z
com.samsung.android.server.wifi.SemWifiServiceImpl.wifiApBleD2DMhsRole(Z)Z
com.samsung.android.server.wifi.SemWifiServiceImpl.wifiApBleMhsRole(Z)Z
com.samsung.android.server.wifi.SemWifiServiceImpl.wifiApDisassocSta(Ljava/lang/String;)V
com.samsung.android.server.wifi.SemWifiServiceImpl.wifiApRestoreClientDataUsageSettingsInfo(Ljava/lang/String;)V
com.samsung.android.server.wifi.SemBaseWifiService.addOrUpdateNetwork(Lcom/samsung/android/wifi/SemWifiConfiguration;)Z
com.samsung.android.server.wifi.SemBaseWifiService.addOrUpdateWifiControlHistory(Ljava/lang/String;Z)V
com.samsung.android.server.wifi.SemBaseWifiService.blockFccChannelBackoff(Z)V
com.samsung.android.server.wifi.SemBaseWifiService.canAutoHotspotBeEnabled()Z
com.samsung.android.server.wifi.SemBaseWifiService.checkAppForWiFiOffloading(Ljava/lang/String;)V
com.samsung.android.server.wifi.SemBaseWifiService.clearAutoHotspotLists()V
com.samsung.android.server.wifi.SemBaseWifiService.connectToMcfMHS(Ljava/lang/String;IIILjava/lang/String;Ljava/lang/String;I)I
com.samsung.android.server.wifi.SemBaseWifiService.connectToSmartD2DClient(Ljava/lang/String;Ljava/lang/String;Lcom/samsung/android/wifi/ISemWifiApSmartCallback;)Z
com.samsung.android.server.wifi.SemBaseWifiService.connectToSmartMHS(Ljava/lang/String;IIILjava/lang/String;Ljava/lang/String;IZ)Z
com.samsung.android.server.wifi.SemBaseWifiService.disableRandomMac()V
com.samsung.android.server.wifi.SemBaseWifiService.disconnectApBlockAutojoin(Z)Z
com.samsung.android.server.wifi.SemBaseWifiService.enableHotspotTsfInfo(Z)V
com.samsung.android.server.wifi.SemBaseWifiService.externalTwtInterface(ILjava/lang/String;)V
com.samsung.android.server.wifi.SemBaseWifiService.factoryReset()V
com.samsung.android.server.wifi.SemBaseWifiService.getAdvancedAutohotspotConnectSettings()I
com.samsung.android.server.wifi.SemBaseWifiService.getAdvancedAutohotspotLCDSettings()I
com.samsung.android.server.wifi.SemBaseWifiService.getAntInfo()Ljava/lang/String;
com.samsung.android.server.wifi.SemBaseWifiService.getAutoShareDump()Ljava/lang/String;
com.samsung.android.server.wifi.SemBaseWifiService.getAutoWifiDump()Ljava/lang/String;
com.samsung.android.server.wifi.SemBaseWifiService.getChannelUtilization()I
com.samsung.android.server.wifi.SemBaseWifiService.getConfiguredNetworkLocations()Ljava/util/Map;
com.samsung.android.server.wifi.SemBaseWifiService.getConfiguredNetworks()Landroid/content/pm/ParceledListSlice;
com.samsung.android.server.wifi.SemBaseWifiService.getConnectivityLog(Ljava/lang/String;)Ljava/lang/String;
com.samsung.android.server.wifi.SemBaseWifiService.getCountryCode()Ljava/lang/String;
com.samsung.android.server.wifi.SemBaseWifiService.getCountryRev()Ljava/lang/String;
com.samsung.android.server.wifi.SemBaseWifiService.getCurrentStatusMode()I
com.samsung.android.server.wifi.SemBaseWifiService.getCurrentWifiRouterInfo()Landroid/os/Bundle;
com.samsung.android.server.wifi.SemBaseWifiService.getDCXOcalibrationData()Ljava/lang/String;
com.samsung.android.server.wifi.SemBaseWifiService.getDiagnosisResults()Ljava/util/List;
com.samsung.android.server.wifi.SemBaseWifiService.getEasySetupScanSettings()Ljava/util/Map;
com.samsung.android.server.wifi.SemBaseWifiService.getFactoryMacAddress()Ljava/lang/String;
com.samsung.android.server.wifi.SemBaseWifiService.getFrameburstInfo()Ljava/lang/String;
com.samsung.android.server.wifi.SemBaseWifiService.getHotspotAntMode()I
com.samsung.android.server.wifi.SemBaseWifiService.getIWCQTables()Ljava/lang/String;
com.samsung.android.server.wifi.SemBaseWifiService.getIndoorStatus()I
com.samsung.android.server.wifi.SemBaseWifiService.getIssueDetectorDump(I)Ljava/lang/String;
com.samsung.android.server.wifi.SemBaseWifiService.getMHSConfig(Ljava/lang/String;)Ljava/lang/String;
com.samsung.android.server.wifi.SemBaseWifiService.getMaxTdlsSession()I
com.samsung.android.server.wifi.SemBaseWifiService.getMcfConnectedStatus(Ljava/lang/String;)I
com.samsung.android.server.wifi.SemBaseWifiService.getMcfConnectedStatusFromScanResult(Ljava/lang/String;)I
com.samsung.android.server.wifi.SemBaseWifiService.getMcfScanDetail()Ljava/util/List;
com.samsung.android.server.wifi.SemBaseWifiService.getMonthlyDataUsage()Ljava/util/List;
com.samsung.android.server.wifi.SemBaseWifiService.getNumOfTdlsSession()I
com.samsung.android.server.wifi.SemBaseWifiService.getNumOfWifiAnt()I
com.samsung.android.server.wifi.SemBaseWifiService.getOptimizerMode()I
com.samsung.android.server.wifi.SemBaseWifiService.getProfileShareDump()Ljava/lang/String;
com.samsung.android.server.wifi.SemBaseWifiService.getProvisionSuccess()I
com.samsung.android.server.wifi.SemBaseWifiService.getPsmInfo()Ljava/lang/String;
com.samsung.android.server.wifi.SemBaseWifiService.getQoSScores(Ljava/util/List;)Ljava/util/Map;
com.samsung.android.server.wifi.SemBaseWifiService.getRVFModeStatus()I
com.samsung.android.server.wifi.SemBaseWifiService.getRoamBand()I
com.samsung.android.server.wifi.SemBaseWifiService.getRoamDelta()I
com.samsung.android.server.wifi.SemBaseWifiService.getRoamScanPeriod()I
com.samsung.android.server.wifi.SemBaseWifiService.getRoamTrigger()I
com.samsung.android.server.wifi.SemBaseWifiService.getRssi(Ljava/lang/String;)I
com.samsung.android.server.wifi.SemBaseWifiService.getSilentRoamingDump(I)Ljava/lang/String;
com.samsung.android.server.wifi.SemBaseWifiService.getSmartApConnectedStatus(Ljava/lang/String;)I
com.samsung.android.server.wifi.SemBaseWifiService.getSmartApConnectedStatusFromScanResult(Ljava/lang/String;)I
com.samsung.android.server.wifi.SemBaseWifiService.getSmartD2DClientConnectedStatus(Ljava/lang/String;)I
com.samsung.android.server.wifi.SemBaseWifiService.getSoftApBands()[I
com.samsung.android.server.wifi.SemBaseWifiService.getSoftApConfiguration()Landroid/net/wifi/SoftApConfiguration;
com.samsung.android.server.wifi.SemBaseWifiService.getStationInfo(Ljava/lang/String;)Ljava/lang/String;
com.samsung.android.server.wifi.SemBaseWifiService.getTWTParams()[I
com.samsung.android.server.wifi.SemBaseWifiService.getTcpMonitorAllSocketHistory(I)Ljava/lang/String;
com.samsung.android.server.wifi.SemBaseWifiService.getTcpMonitorDnsHistory(I)Ljava/lang/String;
com.samsung.android.server.wifi.SemBaseWifiService.getTcpMonitorSocketForegroundHistory(I)Ljava/lang/String;
com.samsung.android.server.wifi.SemBaseWifiService.getTopHotspotClientsToday(II)Ljava/util/List;
com.samsung.android.server.wifi.SemBaseWifiService.getTopHotspotClientsTodayAsString(II)Ljava/lang/String;
com.samsung.android.server.wifi.SemBaseWifiService.getTotalAndTop3ClientsDataUsageBetweenGivenDates(JJ)Ljava/util/List;
com.samsung.android.server.wifi.SemBaseWifiService.getValidState()I
com.samsung.android.server.wifi.SemBaseWifiService.getVendorWlanDriverProp(Ljava/lang/String;)Ljava/lang/String;
com.samsung.android.server.wifi.SemBaseWifiService.getWcmEverQualityTested()I
com.samsung.android.server.wifi.SemBaseWifiService.getWifiApBleD2DScanDetail()Ljava/util/List;
com.samsung.android.server.wifi.SemBaseWifiService.getWifiApBleScanDetail()Ljava/util/List;
com.samsung.android.server.wifi.SemBaseWifiService.getWifiApChannel()I
com.samsung.android.server.wifi.SemBaseWifiService.getWifiApClientDetails(Ljava/lang/String;)Lcom/samsung/android/wifi/SemWifiApClientDetails;
com.samsung.android.server.wifi.SemBaseWifiService.getWifiApConnectedStationCount()I
com.samsung.android.server.wifi.SemBaseWifiService.getWifiApDailyDataLimit()J
com.samsung.android.server.wifi.SemBaseWifiService.getWifiApFreq()I
com.samsung.android.server.wifi.SemBaseWifiService.getWifiApGuestPassword()Ljava/lang/String;
com.samsung.android.server.wifi.SemBaseWifiService.getWifiApInterfaceName()Ljava/lang/String;
com.samsung.android.server.wifi.SemBaseWifiService.getWifiApIsolate()Z
com.samsung.android.server.wifi.SemBaseWifiService.getWifiApLOHSState()I
com.samsung.android.server.wifi.SemBaseWifiService.getWifiApMacAclMode()I
com.samsung.android.server.wifi.SemBaseWifiService.getWifiApMaxClient()I
com.samsung.android.server.wifi.SemBaseWifiService.getWifiApMaxClientFromFramework()I
com.samsung.android.server.wifi.SemBaseWifiService.getWifiApStaList()Ljava/lang/String;
com.samsung.android.server.wifi.SemBaseWifiService.getWifiApStaListDetail()Ljava/util/List;
com.samsung.android.server.wifi.SemBaseWifiService.getWifiApState()I
com.samsung.android.server.wifi.SemBaseWifiService.getWifiApTodaysTotalDataUsage()J
com.samsung.android.server.wifi.SemBaseWifiService.getWifiApWarningActivityRunningState()I
com.samsung.android.server.wifi.SemBaseWifiService.getWifiApWpsPbc()Z
com.samsung.android.server.wifi.SemBaseWifiService.getWifiCid()Ljava/lang/String;
com.samsung.android.server.wifi.SemBaseWifiService.getWifiEnableHistory()Ljava/lang/String;
com.samsung.android.server.wifi.SemBaseWifiService.getWifiFirmwareVersion()Ljava/lang/String;
com.samsung.android.server.wifi.SemBaseWifiService.getWifiIconVisibility()I
com.samsung.android.server.wifi.SemBaseWifiService.getWifiRouterInfo(Ljava/lang/String;)Landroid/os/Bundle;
com.samsung.android.server.wifi.SemBaseWifiService.getWifiRouterInfoBestEffort(Ljava/lang/String;)Ljava/lang/String;
com.samsung.android.server.wifi.SemBaseWifiService.getWifiRouterInfoPresentable(Ljava/lang/String;)Ljava/lang/String;
com.samsung.android.server.wifi.SemBaseWifiService.getWifiStaInfo()Ljava/lang/String;
com.samsung.android.server.wifi.SemBaseWifiService.getWifiSupportedFeatureSet()Ljava/lang/String;
com.samsung.android.server.wifi.SemBaseWifiService.getWifiUsabilityStatsEntry(I)Ljava/lang/String;
com.samsung.android.server.wifi.SemBaseWifiService.getWifiVersions()Ljava/lang/String;
com.samsung.android.server.wifi.SemBaseWifiService.hasConfiguredNetworkLocations(Ljava/lang/String;)Z
com.samsung.android.server.wifi.SemBaseWifiService.isAvailableAutoWifiScan()Z
com.samsung.android.server.wifi.SemBaseWifiService.isAvailableTdls()Z
com.samsung.android.server.wifi.SemBaseWifiService.isClientAcceptedWifiProfileSharing(Z)V
com.samsung.android.server.wifi.SemBaseWifiService.isGripSensorMonitorEnabled()Z
com.samsung.android.server.wifi.SemBaseWifiService.isIndividualAppSupported()Z
com.samsung.android.server.wifi.SemBaseWifiService.isMCFClientAutohotspotSupported()Z
com.samsung.android.server.wifi.SemBaseWifiService.isNCHOModeEnabled()Z
com.samsung.android.server.wifi.SemBaseWifiService.isOverAllMhsDataLimitReached()Z
com.samsung.android.server.wifi.SemBaseWifiService.isOverAllMhsDataLimitSet()Z
com.samsung.android.server.wifi.SemBaseWifiService.isP2pConnected()Z
com.samsung.android.server.wifi.SemBaseWifiService.isScanningEnabled()Z
com.samsung.android.server.wifi.SemBaseWifiService.isSupportedAutoWifi()Z
com.samsung.android.server.wifi.SemBaseWifiService.isSupportedProfileRequest()Z
com.samsung.android.server.wifi.SemBaseWifiService.isSupportedQoSProvider()Z
com.samsung.android.server.wifi.SemBaseWifiService.isUploadModeEnabled()Z
com.samsung.android.server.wifi.SemBaseWifiService.isWesModeEnabled()Z
com.samsung.android.server.wifi.SemBaseWifiService.isWiderBandwidthTdlsSupported()Z
com.samsung.android.server.wifi.SemBaseWifiService.isWifiApEnabled()Z
com.samsung.android.server.wifi.SemBaseWifiService.isWifiApEnabledWithDualBand()Z
com.samsung.android.server.wifi.SemBaseWifiService.isWifiApGuestClient(Ljava/lang/String;)Z
com.samsung.android.server.wifi.SemBaseWifiService.isWifiApGuestModeEnabled()Z
com.samsung.android.server.wifi.SemBaseWifiService.isWifiApGuestModeIsolationEnabled()Z
com.samsung.android.server.wifi.SemBaseWifiService.isWifiApMacAclEnabled()Z
com.samsung.android.server.wifi.SemBaseWifiService.isWifiApWpa3Supported()Z
com.samsung.android.server.wifi.SemBaseWifiService.isWifiDeveloperModeEnabled()Z
com.samsung.android.server.wifi.SemBaseWifiService.isWifiSharingEnabled()Z
com.samsung.android.server.wifi.SemBaseWifiService.isWifiSharingLiteSupported()Z
com.samsung.android.server.wifi.SemBaseWifiService.isWifiSharingSupported()Z
com.samsung.android.server.wifi.SemBaseWifiService.linkQosQuery(JJJ)Z
com.samsung.android.server.wifi.SemBaseWifiService.manageWifiApMacAclList(Ljava/lang/String;Ljava/lang/String;II)I
com.samsung.android.server.wifi.SemBaseWifiService.notifyConnect(ILjava/lang/String;)V
com.samsung.android.server.wifi.SemBaseWifiService.notifyReachabilityLost()V
com.samsung.android.server.wifi.SemBaseWifiService.readWifiApMacAclList(I)Ljava/util/List;
com.samsung.android.server.wifi.SemBaseWifiService.registerClientDataUsageCallback(Landroid/os/IBinder;Lcom/samsung/android/wifi/ISemWifiApClientUpdateCallback;ILjava/lang/String;)V
com.samsung.android.server.wifi.SemBaseWifiService.registerClientListDataUsageCallback(Landroid/os/IBinder;Lcom/samsung/android/wifi/ISemWifiApClientListUpdateCallback;III)V
com.samsung.android.server.wifi.SemBaseWifiService.registerPasswordCallback(Ljava/lang/String;Lcom/samsung/android/wifi/ISemSharedPasswordCallback;)V
com.samsung.android.server.wifi.SemBaseWifiService.registerWifiApDataUsageCallback(Landroid/os/IBinder;Lcom/samsung/android/wifi/ISemWifiApDataUsageCallback;I)V
com.samsung.android.server.wifi.SemBaseWifiService.registerWifiApSmartCallback(Landroid/os/IBinder;Lcom/samsung/android/wifi/ISemWifiApSmartCallback;I)V
com.samsung.android.server.wifi.SemBaseWifiService.removeExcludedNetwork(I)V
com.samsung.android.server.wifi.SemBaseWifiService.removeFactoryMacAddress()Z
com.samsung.android.server.wifi.SemBaseWifiService.removeNetwork(Ljava/lang/String;)Z
com.samsung.android.server.wifi.SemBaseWifiService.removePktlogFilter(Ljava/lang/String;Ljava/lang/String;)Z
com.samsung.android.server.wifi.SemBaseWifiService.reportBigData(Ljava/lang/String;Ljava/lang/String;)V
com.samsung.android.server.wifi.SemBaseWifiService.reportHotspotDumpLogs(Ljava/lang/String;)V
com.samsung.android.server.wifi.SemBaseWifiService.reportIssue(ILandroid/os/Bundle;)V
com.samsung.android.server.wifi.SemBaseWifiService.requestPassword(Z)V
com.samsung.android.server.wifi.SemBaseWifiService.requestStopAutohotspotAdvertisement(Z)V
com.samsung.android.server.wifi.SemBaseWifiService.resetSoftAp(Landroid/os/Message;)V
com.samsung.android.server.wifi.SemBaseWifiService.restoreIWCSettingsValue(II)V
com.samsung.android.server.wifi.SemBaseWifiService.restoreSemConfigurationsBackupData(Ljava/lang/String;)V
com.samsung.android.server.wifi.SemBaseWifiService.retrieveSemWifiConfigsBackupData()Ljava/lang/String;
com.samsung.android.server.wifi.SemBaseWifiService.runAutoShareForCurrent(Ljava/util/List;)V
com.samsung.android.server.wifi.SemBaseWifiService.runIptablesRulesCommand(Ljava/lang/String;)Ljava/lang/String;
com.samsung.android.server.wifi.SemBaseWifiService.saveFwDump()Z
com.samsung.android.server.wifi.SemBaseWifiService.sendReassociationRequestFrame(Ljava/lang/String;I)Z
com.samsung.android.server.wifi.SemBaseWifiService.sendVendorSpecificActionFrame(Ljava/lang/String;IILjava/lang/String;)Z
com.samsung.android.server.wifi.SemBaseWifiService.set5GmmWaveSarBackoffEnabled(Z)V
com.samsung.android.server.wifi.SemBaseWifiService.setAdvancedAutohotspotConnectSettings(I)V
com.samsung.android.server.wifi.SemBaseWifiService.setAdvancedAutohotspotLCDSettings(I)V
com.samsung.android.server.wifi.SemBaseWifiService.setAllowWifiScan(ZLjava/lang/String;)V
com.samsung.android.server.wifi.SemBaseWifiService.setAntInfo(Ljava/lang/String;)Z
com.samsung.android.server.wifi.SemBaseWifiService.setAntMode(I)V
com.samsung.android.server.wifi.SemBaseWifiService.setArdkPowerSaveMode(Z)V
com.samsung.android.server.wifi.SemBaseWifiService.setAutohotspotToastMessage(I)V
com.samsung.android.server.wifi.SemBaseWifiService.setConnectionAttemptInfo(IZLjava/lang/String;)V
com.samsung.android.server.wifi.SemBaseWifiService.setConnectivityCheckDisabled(Z)V
com.samsung.android.server.wifi.SemBaseWifiService.setCountryRev(Ljava/lang/String;)Z
com.samsung.android.server.wifi.SemBaseWifiService.setDCXOcalibrationData(Ljava/lang/String;)Z
com.samsung.android.server.wifi.SemBaseWifiService.setDtimInSuspendMode(I)V
com.samsung.android.server.wifi.SemBaseWifiService.setEasySetupScanSettings(Ljava/lang/String;Lcom/samsung/android/wifi/SemEasySetupWifiScanSettings;)V
com.samsung.android.server.wifi.SemBaseWifiService.setFactoryMacAddress(Ljava/lang/String;)Z
com.samsung.android.server.wifi.SemBaseWifiService.setFccChannelBackoffEnabled(Ljava/lang/String;Z)V
com.samsung.android.server.wifi.SemBaseWifiService.setFrameburstInfo(Ljava/lang/String;)Z
com.samsung.android.server.wifi.SemBaseWifiService.setGripSensorMonitorEnabled(Z)V
com.samsung.android.server.wifi.SemBaseWifiService.setHotspotAntMode(I)V
com.samsung.android.server.wifi.SemBaseWifiService.setIWCMockAction(I)V
com.samsung.android.server.wifi.SemBaseWifiService.setIWCQTables(Ljava/lang/String;)V
com.samsung.android.server.wifi.SemBaseWifiService.setImsCallEstablished(Z)V
com.samsung.android.server.wifi.SemBaseWifiService.setKeepConnection(ZZ)V
com.samsung.android.server.wifi.SemBaseWifiService.setKeepConnectionAlways(Z)V
com.samsung.android.server.wifi.SemBaseWifiService.setKeepConnectionBigData(I)V
com.samsung.android.server.wifi.SemBaseWifiService.setLatencyCritical(Ljava/lang/String;I)Z
com.samsung.android.server.wifi.SemBaseWifiService.setLocalOnlyHotspotEnabled(ZLjava/lang/String;Ljava/lang/String;I)Z
com.samsung.android.server.wifi.SemBaseWifiService.setMHSConfig(Ljava/lang/String;)Ljava/lang/String;
com.samsung.android.server.wifi.SemBaseWifiService.setMaxDtimInSuspendMode(Z)V
com.samsung.android.server.wifi.SemBaseWifiService.setNCHOModeEnabled(Z)Z
com.samsung.android.server.wifi.SemBaseWifiService.setOptimizerMode(I)Z
com.samsung.android.server.wifi.SemBaseWifiService.setPktlogFilter(Ljava/lang/String;Ljava/lang/String;)Z
com.samsung.android.server.wifi.SemBaseWifiService.setPowerSavingTime(I)V
com.samsung.android.server.wifi.SemBaseWifiService.setProvisionSuccess(Z)Z
com.samsung.android.server.wifi.SemBaseWifiService.setPsmInfo(Ljava/lang/String;)Z
com.samsung.android.server.wifi.SemBaseWifiService.setRVFmodeStatus(I)V
com.samsung.android.server.wifi.SemBaseWifiService.setRoamBand(I)Z
com.samsung.android.server.wifi.SemBaseWifiService.setRoamDelta(I)Z
com.samsung.android.server.wifi.SemBaseWifiService.setRoamScanChannels([Ljava/lang/String;)Z
com.samsung.android.server.wifi.SemBaseWifiService.setRoamScanEnabled(Z)Z
com.samsung.android.server.wifi.SemBaseWifiService.setRoamScanPeriod(I)Z
com.samsung.android.server.wifi.SemBaseWifiService.setRoamTrigger(I)Z
com.samsung.android.server.wifi.SemBaseWifiService.setSoftApConfiguration(Landroid/net/wifi/SoftApConfiguration;)V
com.samsung.android.server.wifi.SemBaseWifiService.setTCRule(ZLjava/lang/String;I)V
com.samsung.android.server.wifi.SemBaseWifiService.setTdlsEnabled(Z)Z
com.samsung.android.server.wifi.SemBaseWifiService.setTestSettings(ILandroid/os/Bundle;)V
com.samsung.android.server.wifi.SemBaseWifiService.setUploadModeEnabled(Z)Z
com.samsung.android.server.wifi.SemBaseWifiService.setUserConfirmForSharingPassword(ZLjava/lang/String;)V
com.samsung.android.server.wifi.SemBaseWifiService.setVendorWlanDriverProp(Ljava/lang/String;Ljava/lang/String;)Z
com.samsung.android.server.wifi.SemBaseWifiService.setVerboseLoggingEnabled(Z)V
com.samsung.android.server.wifi.SemBaseWifiService.setWesModeEnabled(Z)Z
com.samsung.android.server.wifi.SemBaseWifiService.setWifiApClientDataPaused(Ljava/lang/String;Z)V
com.samsung.android.server.wifi.SemBaseWifiService.setWifiApClientMobileDataLimit(Ljava/lang/String;J)V
com.samsung.android.server.wifi.SemBaseWifiService.setWifiApClientTimeLimit(Ljava/lang/String;J)V
com.samsung.android.server.wifi.SemBaseWifiService.setWifiApConfigurationToDefault()V
com.samsung.android.server.wifi.SemBaseWifiService.setWifiApDailyDataLimit(J)V
com.samsung.android.server.wifi.SemBaseWifiService.setWifiApEnabled(Landroid/net/wifi/SoftApConfiguration;Z)Z
com.samsung.android.server.wifi.SemBaseWifiService.setWifiApGuestModeEnabled(Z)V
com.samsung.android.server.wifi.SemBaseWifiService.setWifiApGuestModeIsolationEnabled(Z)V
com.samsung.android.server.wifi.SemBaseWifiService.setWifiApGuestPassword(Ljava/lang/String;)V
com.samsung.android.server.wifi.SemBaseWifiService.setWifiApIsolate(Z)V
com.samsung.android.server.wifi.SemBaseWifiService.setWifiApMacAclEnable(Z)V
com.samsung.android.server.wifi.SemBaseWifiService.setWifiApMacAclMode(I)V
com.samsung.android.server.wifi.SemBaseWifiService.setWifiApMaxClient(I)V
com.samsung.android.server.wifi.SemBaseWifiService.setWifiApMaxClientToFramework(I)V
com.samsung.android.server.wifi.SemBaseWifiService.setWifiApWarningActivityRunning(I)V
com.samsung.android.server.wifi.SemBaseWifiService.setWifiApWpsPbc(Z)V
com.samsung.android.server.wifi.SemBaseWifiService.setWifiDeveloperModeEnabled(Z)V
com.samsung.android.server.wifi.SemBaseWifiService.setWifiSettingsForegroundState(I)V
com.samsung.android.server.wifi.SemBaseWifiService.setWifiSharingEnabled(Z)Z
com.samsung.android.server.wifi.SemBaseWifiService.setWifiUwbCoexEnabled(IZ)I
com.samsung.android.server.wifi.SemBaseWifiService.startIssueMonitoring(Landroid/os/Bundle;)V
com.samsung.android.server.wifi.SemBaseWifiService.startMcfClientMHSDiscovery(Z)I
com.samsung.android.server.wifi.SemBaseWifiService.startMcfMHSAdvertisement(Z)I
com.samsung.android.server.wifi.SemBaseWifiService.startScan(Ljava/lang/String;)Z
com.samsung.android.server.wifi.SemBaseWifiService.startTimerForWifiOffload()V
com.samsung.android.server.wifi.SemBaseWifiService.supportWifiAp5G()Z
com.samsung.android.server.wifi.SemBaseWifiService.supportWifiAp5GBasedOnCountry()Z
com.samsung.android.server.wifi.SemBaseWifiService.supportWifiAp6GBasedOnCountry()Z
com.samsung.android.server.wifi.SemBaseWifiService.triggerBackoffRoutine(Z)V
com.samsung.android.server.wifi.SemBaseWifiService.unRegisterWifiApDataUsageCallback(I)V
com.samsung.android.server.wifi.SemBaseWifiService.unregisterClientDataUsageCallback(I)V
com.samsung.android.server.wifi.SemBaseWifiService.unregisterClientListDataUsageCallback(I)V
com.samsung.android.server.wifi.SemBaseWifiService.unregisterPasswordCallback(Lcom/samsung/android/wifi/ISemSharedPasswordCallback;)V
com.samsung.android.server.wifi.SemBaseWifiService.unregisterWifiApSmartCallback(I)V
com.samsung.android.server.wifi.SemBaseWifiService.updateGuiderFeature(Landroid/os/Bundle;)V
com.samsung.android.server.wifi.SemBaseWifiService.updateHostapdMacList(I)V
com.samsung.android.server.wifi.SemBaseWifiService.updateIWCHintCard(J)V
com.samsung.android.server.wifi.SemBaseWifiService.wifiApBackUpClientDataUsageSettingsInfo()Ljava/lang/String;
com.samsung.android.server.wifi.SemBaseWifiService.wifiApBleClientRole(Z)Z
com.samsung.android.server.wifi.SemBaseWifiService.wifiApBleD2DClientRole(Z)Z
com.samsung.android.server.wifi.SemBaseWifiService.wifiApBleD2DMhsRole(Z)Z
com.samsung.android.server.wifi.SemBaseWifiService.wifiApBleMhsRole(Z)Z
com.samsung.android.server.wifi.SemBaseWifiService.wifiApDisassocSta(Ljava/lang/String;)V
com.samsung.android.server.wifi.SemBaseWifiService.wifiApRestoreClientDataUsageSettingsInfo(Ljava/lang/String;)V
com.android.server.pm.PackageManagerService$IPackageManagerImpl.applyRuntimePermissionsForAllApplicationsForMDM(II)Z
com.android.server.pm.PackageManagerService$IPackageManagerImpl.applyRuntimePermissionsForMDM(Ljava/lang/String;Ljava/util/List;II)Z
com.android.server.pm.PackageManagerService$IPackageManagerImpl.cancelEMPHandlerSendPendingBroadcast()V
com.android.server.pm.PackageManagerService$IPackageManagerImpl.changeMonetizationBadgeState(Ljava/lang/String;Ljava/lang/String;)V
com.android.server.pm.PackageManagerService$IPackageManagerImpl.checkASKSTarget(I)[Ljava/lang/String;
com.android.server.pm.PackageManagerService$IPackageManagerImpl.checkDeletableListForASKS()V
com.android.server.pm.PackageManagerService$IPackageManagerImpl.checkPackageStartable(Ljava/lang/String;I)V
com.android.server.pm.PackageManagerService$IPackageManagerImpl.clearApplicationProfileData(Ljava/lang/String;)V
com.android.server.pm.PackageManagerService$IPackageManagerImpl.clearApplicationUserData(Ljava/lang/String;Landroid/content/pm/IPackageDataObserver;I)V
com.android.server.pm.PackageManagerService$IPackageManagerImpl.clearCrossProfileIntentFilters(ILjava/lang/String;)V
com.android.server.pm.PackageManagerService$IPackageManagerImpl.clearPackagePreferredActivitiesAsUserForMDM(Ljava/lang/String;I)V
com.android.server.pm.PackageManagerService$IPackageManagerImpl.createEncAppData(Ljava/lang/String;I)Z
com.android.server.pm.PackageManagerService$IPackageManagerImpl.deleteApplicationCacheFiles(Ljava/lang/String;Landroid/content/pm/IPackageDataObserver;)V
com.android.server.pm.PackageManagerService$IPackageManagerImpl.deleteApplicationCacheFilesAsUser(Ljava/lang/String;ILandroid/content/pm/IPackageDataObserver;)V
com.android.server.pm.PackageManagerService$IPackageManagerImpl.dumpProfiles(Ljava/lang/String;Z)V
com.android.server.pm.PackageManagerService$IPackageManagerImpl.enterSafeMode()V
com.android.server.pm.PackageManagerService$IPackageManagerImpl.extendVerificationTimeout(IIJ)V
com.android.server.pm.PackageManagerService$IPackageManagerImpl.flushPackageRestrictionsAsUser(I)V
com.android.server.pm.PackageManagerService$IPackageManagerImpl.freeStorage(Ljava/lang/String;JILandroid/content/IntentSender;)V
com.android.server.pm.PackageManagerService$IPackageManagerImpl.freeStorageAndNotify(Ljava/lang/String;JILandroid/content/pm/IPackageDataObserver;)V
com.android.server.pm.PackageManagerService$IPackageManagerImpl.getChangedPackages(II)Landroid/content/pm/ChangedPackages;
com.android.server.pm.PackageManagerService$IPackageManagerImpl.getComponentMetadataForIconTray(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)Z
com.android.server.pm.PackageManagerService$IPackageManagerImpl.getDomainVerificationBackup(I)[B
com.android.server.pm.PackageManagerService$IPackageManagerImpl.getGrantedPermissionsForMDM(Ljava/lang/String;)Ljava/util/List;
com.android.server.pm.PackageManagerService$IPackageManagerImpl.getHoldLockToken()Landroid/os/IBinder;
com.android.server.pm.PackageManagerService$IPackageManagerImpl.getInstantAppAndroidId(Ljava/lang/String;I)Ljava/lang/String;
com.android.server.pm.PackageManagerService$IPackageManagerImpl.getInstantAppCookie(Ljava/lang/String;I)[B
com.android.server.pm.PackageManagerService$IPackageManagerImpl.getInstantAppIcon(Ljava/lang/String;I)Landroid/graphics/Bitmap;
com.android.server.pm.PackageManagerService$IPackageManagerImpl.getInstantApps(I)Landroid/content/pm/ParceledListSlice;
com.android.server.pm.PackageManagerService$IPackageManagerImpl.getLastChosenActivity(Landroid/content/Intent;Ljava/lang/String;I)Landroid/content/pm/ResolveInfo;
com.android.server.pm.PackageManagerService$IPackageManagerImpl.getLaunchIntentSenderForPackage(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)Landroid/content/IntentSender;
com.android.server.pm.PackageManagerService$IPackageManagerImpl.getMetadataForIconTray(Ljava/lang/String;Ljava/lang/String;ILjava/util/List;)Z
com.android.server.pm.PackageManagerService$IPackageManagerImpl.getMimeGroup(Ljava/lang/String;Ljava/lang/String;)Ljava/util/List;
com.android.server.pm.PackageManagerService$IPackageManagerImpl.getMoveStatus(I)I
com.android.server.pm.PackageManagerService$IPackageManagerImpl.getPackageGrantedPermissionsForMDM(Ljava/lang/String;)Ljava/util/List;
com.android.server.pm.PackageManagerService$IPackageManagerImpl.getPackageListForDualDarPolicy(Ljava/lang/String;)Ljava/util/List;
com.android.server.pm.PackageManagerService$IPackageManagerImpl.getPermissionControllerPackageName()Ljava/lang/String;
com.android.server.pm.PackageManagerService$IPackageManagerImpl.getProgressionOfPackageChanged()I
com.android.server.pm.PackageManagerService$IPackageManagerImpl.getRequestedRuntimePermissionsForMDM(Ljava/lang/String;)Ljava/util/List;
com.android.server.pm.PackageManagerService$IPackageManagerImpl.getRuntimePermissionsVersion(I)I
com.android.server.pm.PackageManagerService$IPackageManagerImpl.getSplashScreenTheme(Ljava/lang/String;I)Ljava/lang/String;
com.android.server.pm.PackageManagerService$IPackageManagerImpl.getSuspendedPackageAppExtras(Ljava/lang/String;I)Landroid/os/Bundle;
com.android.server.pm.PackageManagerService$IPackageManagerImpl.getSystemAvailableFeatures()Landroid/content/pm/ParceledListSlice;
com.android.server.pm.PackageManagerService$IPackageManagerImpl.getUNvalueForASKS()Ljava/lang/String;
com.android.server.pm.PackageManagerService$IPackageManagerImpl.getUnknownSourcePackagesAsUser(JI)Landroid/content/pm/ParceledListSlice;
com.android.server.pm.PackageManagerService$IPackageManagerImpl.getUnsuspendablePackagesForUser([Ljava/lang/String;I)[Ljava/lang/String;
com.android.server.pm.PackageManagerService$IPackageManagerImpl.getVerifierDeviceIdentity()Landroid/content/pm/VerifierDeviceIdentity;
com.android.server.pm.PackageManagerService$IPackageManagerImpl.holdLock(Landroid/os/IBinder;I)V
com.android.server.pm.PackageManagerService$IPackageManagerImpl.installExistingPackageAsUser(Ljava/lang/String;IIILjava/util/List;)I
com.android.server.pm.PackageManagerService$IPackageManagerImpl.isAppLockEnabled()Z
com.android.server.pm.PackageManagerService$IPackageManagerImpl.isAutoRevokeWhitelisted(Ljava/lang/String;)Z
com.android.server.pm.PackageManagerService$IPackageManagerImpl.isHiddenBySprotect(Ljava/lang/String;)Z
com.android.server.pm.PackageManagerService$IPackageManagerImpl.isLockedBySprotect(Ljava/lang/String;)Z
com.android.server.pm.PackageManagerService$IPackageManagerImpl.isPackageAutoDisabled(Ljava/lang/String;I)Z
com.android.server.pm.PackageManagerService$IPackageManagerImpl.isPackageStateProtected(Ljava/lang/String;I)Z
com.android.server.pm.PackageManagerService$IPackageManagerImpl.isProtectedBroadcast(Ljava/lang/String;)Z
com.android.server.pm.PackageManagerService$IPackageManagerImpl.isUnknownSourcePackage(Ljava/lang/String;)Z
com.android.server.pm.PackageManagerService$IPackageManagerImpl.logAppProcessStartIfNeeded(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;I)V
com.android.server.pm.PackageManagerService$IPackageManagerImpl.makeProviderVisible(ILjava/lang/String;)V
com.android.server.pm.PackageManagerService$IPackageManagerImpl.makeUidVisible(II)V
com.android.server.pm.PackageManagerService$IPackageManagerImpl.movePackage(Ljava/lang/String;Ljava/lang/String;)I
com.android.server.pm.PackageManagerService$IPackageManagerImpl.movePackageToSd(Ljava/lang/String;Ljava/lang/String;Landroid/content/pm/IMemorySaverPackageMoveObserver;)I
com.android.server.pm.PackageManagerService$IPackageManagerImpl.movePrimaryStorage(Ljava/lang/String;)I
com.android.server.pm.PackageManagerService$IPackageManagerImpl.notifyDexLoad(Ljava/lang/String;Ljava/util/Map;Ljava/lang/String;)V
com.android.server.pm.PackageManagerService$IPackageManagerImpl.notifyPackageUse(Ljava/lang/String;I)V
com.android.server.pm.PackageManagerService$IPackageManagerImpl.notifyPackagesReplacedReceived([Ljava/lang/String;)V
com.android.server.pm.PackageManagerService$IPackageManagerImpl.overrideLabelAndIcon(Landroid/content/ComponentName;Ljava/lang/String;II)V
com.android.server.pm.PackageManagerService$IPackageManagerImpl.performDexOptForADCP(Ljava/lang/String;Z)I
com.android.server.pm.PackageManagerService$IPackageManagerImpl.queryProperty(Ljava/lang/String;I)Landroid/content/pm/ParceledListSlice;
com.android.server.pm.PackageManagerService$IPackageManagerImpl.reconcileSecondaryDexFiles(Ljava/lang/String;)V
com.android.server.pm.PackageManagerService$IPackageManagerImpl.registerDexModule(Ljava/lang/String;Ljava/lang/String;ZLandroid/content/pm/IDexModuleRegisterCallback;)V
com.android.server.pm.PackageManagerService$IPackageManagerImpl.registerMoveCallback(Landroid/content/pm/IPackageMoveObserver;)V
com.android.server.pm.PackageManagerService$IPackageManagerImpl.removeEncPkgDir(ILjava/lang/String;)Z
com.android.server.pm.PackageManagerService$IPackageManagerImpl.removeEncUserDir(I)Z
com.android.server.pm.PackageManagerService$IPackageManagerImpl.requestPackageChecksums(Ljava/lang/String;ZIILjava/util/List;Landroid/content/pm/IOnChecksumsReadyListener;I)V
com.android.server.pm.PackageManagerService$IPackageManagerImpl.restoreDomainVerification([BI)V
com.android.server.pm.PackageManagerService$IPackageManagerImpl.restoreLabelAndIcon(Landroid/content/ComponentName;I)V
com.android.server.pm.PackageManagerService$IPackageManagerImpl.semGetSystemFeatureLevel(Ljava/lang/String;)I
com.android.server.pm.PackageManagerService$IPackageManagerImpl.semIsPermissionRevokedByUserFixed(Ljava/lang/String;Ljava/lang/String;I)Z
com.android.server.pm.PackageManagerService$IPackageManagerImpl.sendDeviceCustomizationReadyBroadcast()V
com.android.server.pm.PackageManagerService$IPackageManagerImpl.setApplicationCategoryHint(Ljava/lang/String;ILjava/lang/String;)V
com.android.server.pm.PackageManagerService$IPackageManagerImpl.setApplicationEnabledSetting(Ljava/lang/String;IIILjava/lang/String;)V
com.android.server.pm.PackageManagerService$IPackageManagerImpl.setApplicationEnabledSettingWithList(Ljava/util/List;IIZZILjava/lang/String;)V
com.android.server.pm.PackageManagerService$IPackageManagerImpl.setApplicationHiddenSettingAsUser(Ljava/lang/String;ZI)Z
com.android.server.pm.PackageManagerService$IPackageManagerImpl.setBlockUninstallForUser(Ljava/lang/String;ZI)Z
com.android.server.pm.PackageManagerService$IPackageManagerImpl.setComponentEnabledSetting(Landroid/content/ComponentName;III)V
com.android.server.pm.PackageManagerService$IPackageManagerImpl.setComponentEnabledSettings(Ljava/util/List;I)V
com.android.server.pm.PackageManagerService$IPackageManagerImpl.setDistractingPackageRestrictionsAsUser([Ljava/lang/String;II)[Ljava/lang/String;
com.android.server.pm.PackageManagerService$IPackageManagerImpl.setHarmfulAppWarning(Ljava/lang/String;Ljava/lang/CharSequence;I)V
com.android.server.pm.PackageManagerService$IPackageManagerImpl.setInstallLocation(I)Z
com.android.server.pm.PackageManagerService$IPackageManagerImpl.setInstallerPackageName(Ljava/lang/String;Ljava/lang/String;)V
com.android.server.pm.PackageManagerService$IPackageManagerImpl.setInstantAppCookie(Ljava/lang/String;[BI)Z
com.android.server.pm.PackageManagerService$IPackageManagerImpl.setKeepUninstalledPackages(Ljava/util/List;)V
com.android.server.pm.PackageManagerService$IPackageManagerImpl.setLicensePermissionsForMDM(Ljava/lang/String;)I
com.android.server.pm.PackageManagerService$IPackageManagerImpl.setMimeGroup(Ljava/lang/String;Ljava/lang/String;Ljava/util/List;)V
com.android.server.pm.PackageManagerService$IPackageManagerImpl.setPackageStoppedState(Ljava/lang/String;ZI)V
com.android.server.pm.PackageManagerService$IPackageManagerImpl.setPackagesSuspendedAsUser([Ljava/lang/String;ZLandroid/os/PersistableBundle;Landroid/os/PersistableBundle;Landroid/content/pm/SuspendDialogInfo;Ljava/lang/String;I)[Ljava/lang/String;
com.android.server.pm.PackageManagerService$IPackageManagerImpl.setRequiredForSystemUser(Ljava/lang/String;Z)Z
com.android.server.pm.PackageManagerService$IPackageManagerImpl.setRuntimePermissionsVersion(II)V
com.android.server.pm.PackageManagerService$IPackageManagerImpl.setSplashScreenTheme(Ljava/lang/String;Ljava/lang/String;I)V
com.android.server.pm.PackageManagerService$IPackageManagerImpl.setTrustTimebyStatusChanged()V
com.android.server.pm.PackageManagerService$IPackageManagerImpl.setUpdateAvailable(Ljava/lang/String;Z)V
com.android.server.pm.PackageManagerService$IPackageManagerImpl.shouldAppSupportBadgeIcon(Ljava/lang/String;)Z
com.android.server.pm.PackageManagerService$IPackageManagerImpl.unregisterMoveCallback(Landroid/content/pm/IPackageMoveObserver;)V
com.android.server.pm.PackageManagerService$IPackageManagerImpl.updateAppInfoForPackage(Ljava/lang/String;Ljava/lang/String;)Z
com.android.server.pm.PackageManagerService$IPackageManagerImpl.verifyPendingInstall(II)V
com.android.server.pm.IPackageManagerBase.activitySupportsIntent(Landroid/content/ComponentName;Landroid/content/Intent;Ljava/lang/String;)Z
com.android.server.pm.IPackageManagerBase.addCrossProfileIntentFilter(Landroid/content/IntentFilter;Ljava/lang/String;III)V
com.android.server.pm.IPackageManagerBase.addPermission(Landroid/content/pm/PermissionInfo;)Z
com.android.server.pm.IPackageManagerBase.addPermissionAsync(Landroid/content/pm/PermissionInfo;)Z
com.android.server.pm.IPackageManagerBase.addPersistentPreferredActivity(Landroid/content/IntentFilter;Landroid/content/ComponentName;I)V
com.android.server.pm.IPackageManagerBase.addPreferredActivity(Landroid/content/IntentFilter;I[Landroid/content/ComponentName;Landroid/content/ComponentName;IZ)V
com.android.server.pm.IPackageManagerBase.canForwardTo(Landroid/content/Intent;Ljava/lang/String;II)Z
com.android.server.pm.IPackageManagerBase.canPackageQuery(Ljava/lang/String;Ljava/lang/String;I)Z
com.android.server.pm.IPackageManagerBase.canRequestPackageInstalls(Ljava/lang/String;I)Z
com.android.server.pm.IPackageManagerBase.canonicalToCurrentPackageNames([Ljava/lang/String;)[Ljava/lang/String;
com.android.server.pm.IPackageManagerBase.checkPermission(Ljava/lang/String;Ljava/lang/String;I)I
com.android.server.pm.IPackageManagerBase.checkSignatures(Ljava/lang/String;Ljava/lang/String;)I
com.android.server.pm.IPackageManagerBase.checkUidPermission(Ljava/lang/String;I)I
com.android.server.pm.IPackageManagerBase.checkUidSignatures(II)I
com.android.server.pm.IPackageManagerBase.clearPackagePersistentPreferredActivities(Ljava/lang/String;I)V
com.android.server.pm.IPackageManagerBase.clearPackagePreferredActivities(Ljava/lang/String;)V
com.android.server.pm.IPackageManagerBase.currentToCanonicalPackageNames([Ljava/lang/String;)[Ljava/lang/String;
com.android.server.pm.IPackageManagerBase.deleteExistingPackageAsUser(Landroid/content/pm/VersionedPackage;Landroid/content/pm/IPackageDeleteObserver2;I)V
com.android.server.pm.IPackageManagerBase.deletePackageAsUser(Ljava/lang/String;ILandroid/content/pm/IPackageDeleteObserver;II)V
com.android.server.pm.IPackageManagerBase.deletePackageVersioned(Landroid/content/pm/VersionedPackage;Landroid/content/pm/IPackageDeleteObserver2;II)V
com.android.server.pm.IPackageManagerBase.deletePreloadsFileCache()V
com.android.server.pm.IPackageManagerBase.findPersistentPreferredActivity(Landroid/content/Intent;I)Landroid/content/pm/ResolveInfo;
com.android.server.pm.IPackageManagerBase.finishPackageInstall(IZ)V
com.android.server.pm.IPackageManagerBase.forceDexOpt(Ljava/lang/String;)V
com.android.server.pm.IPackageManagerBase.getActivityInfo(Landroid/content/ComponentName;JI)Landroid/content/pm/ActivityInfo;
com.android.server.pm.IPackageManagerBase.getAllIntentFilters(Ljava/lang/String;)Landroid/content/pm/ParceledListSlice;
com.android.server.pm.IPackageManagerBase.getAllPackages()Ljava/util/List;
com.android.server.pm.IPackageManagerBase.getAppOpPermissionPackages(Ljava/lang/String;)[Ljava/lang/String;
com.android.server.pm.IPackageManagerBase.getAppPredictionServicePackageName()Ljava/lang/String;
com.android.server.pm.IPackageManagerBase.getApplicationEnabledSetting(Ljava/lang/String;I)I
com.android.server.pm.IPackageManagerBase.getApplicationHiddenSettingAsUser(Ljava/lang/String;I)Z
com.android.server.pm.IPackageManagerBase.getApplicationInfo(Ljava/lang/String;JI)Landroid/content/pm/ApplicationInfo;
com.android.server.pm.IPackageManagerBase.getArtManager()Landroid/content/pm/dex/IArtManager;
com.android.server.pm.IPackageManagerBase.getAttentionServicePackageName()Ljava/lang/String;
com.android.server.pm.IPackageManagerBase.getBlockUninstallForUser(Ljava/lang/String;I)Z
com.android.server.pm.IPackageManagerBase.getComponentEnabledSetting(Landroid/content/ComponentName;I)I
com.android.server.pm.IPackageManagerBase.getContentCaptureServicePackageName()Ljava/lang/String;
com.android.server.pm.IPackageManagerBase.getDeclaredSharedLibraries(Ljava/lang/String;JI)Landroid/content/pm/ParceledListSlice;
com.android.server.pm.IPackageManagerBase.getDefaultAppsBackup(I)[B
com.android.server.pm.IPackageManagerBase.getDefaultTextClassifierPackageName()Ljava/lang/String;
com.android.server.pm.IPackageManagerBase.getFlagsForUid(I)I
com.android.server.pm.IPackageManagerBase.getHarmfulAppWarning(Ljava/lang/String;I)Ljava/lang/CharSequence;
com.android.server.pm.IPackageManagerBase.getHomeActivities(Ljava/util/List;)Landroid/content/ComponentName;
com.android.server.pm.IPackageManagerBase.getIncidentReportApproverPackageName()Ljava/lang/String;
com.android.server.pm.IPackageManagerBase.getInstallLocation()I
com.android.server.pm.IPackageManagerBase.getInstallReason(Ljava/lang/String;I)I
com.android.server.pm.IPackageManagerBase.getInstallSourceInfo(Ljava/lang/String;)Landroid/content/pm/InstallSourceInfo;
com.android.server.pm.IPackageManagerBase.getInstalledApplications(JI)Landroid/content/pm/ParceledListSlice;
com.android.server.pm.IPackageManagerBase.getInstalledModules(I)Ljava/util/List;
com.android.server.pm.IPackageManagerBase.getInstalledPackages(JI)Landroid/content/pm/ParceledListSlice;
com.android.server.pm.IPackageManagerBase.getInstallerPackageName(Ljava/lang/String;)Ljava/lang/String;
com.android.server.pm.IPackageManagerBase.getInstantAppInstallerComponent()Landroid/content/ComponentName;
com.android.server.pm.IPackageManagerBase.getInstantAppResolverComponent()Landroid/content/ComponentName;
com.android.server.pm.IPackageManagerBase.getInstantAppResolverSettingsComponent()Landroid/content/ComponentName;
com.android.server.pm.IPackageManagerBase.getInstrumentationInfo(Landroid/content/ComponentName;I)Landroid/content/pm/InstrumentationInfo;
com.android.server.pm.IPackageManagerBase.getIntentFilterVerifications(Ljava/lang/String;)Landroid/content/pm/ParceledListSlice;
com.android.server.pm.IPackageManagerBase.getIntentVerificationStatus(Ljava/lang/String;I)I
com.android.server.pm.IPackageManagerBase.getKeySetByAlias(Ljava/lang/String;Ljava/lang/String;)Landroid/content/pm/KeySet;
com.android.server.pm.IPackageManagerBase.getModuleInfo(Ljava/lang/String;I)Landroid/content/pm/ModuleInfo;
com.android.server.pm.IPackageManagerBase.getNameForUid(I)Ljava/lang/String;
com.android.server.pm.IPackageManagerBase.getNamesForUids([I)[Ljava/lang/String;
com.android.server.pm.IPackageManagerBase.getPackageGids(Ljava/lang/String;JI)[I
com.android.server.pm.IPackageManagerBase.getPackageInfo(Ljava/lang/String;JI)Landroid/content/pm/PackageInfo;
com.android.server.pm.IPackageManagerBase.getPackageInfoVersioned(Landroid/content/pm/VersionedPackage;JI)Landroid/content/pm/PackageInfo;
com.android.server.pm.IPackageManagerBase.getPackageInstaller()Landroid/content/pm/IPackageInstaller;
com.android.server.pm.IPackageManagerBase.getPackageSizeInfo(Ljava/lang/String;ILandroid/content/pm/IPackageStatsObserver;)V
com.android.server.pm.IPackageManagerBase.getPackageUid(Ljava/lang/String;JI)I
com.android.server.pm.IPackageManagerBase.getPackagesForUid(I)[Ljava/lang/String;
com.android.server.pm.IPackageManagerBase.getPackagesHoldingPermissions([Ljava/lang/String;JI)Landroid/content/pm/ParceledListSlice;
com.android.server.pm.IPackageManagerBase.getPermissionGroupInfo(Ljava/lang/String;I)Landroid/content/pm/PermissionGroupInfo;
com.android.server.pm.IPackageManagerBase.getPersistentApplications(I)Landroid/content/pm/ParceledListSlice;
com.android.server.pm.IPackageManagerBase.getPreferredActivities(Ljava/util/List;Ljava/util/List;Ljava/lang/String;)I
com.android.server.pm.IPackageManagerBase.getPreferredActivityBackup(I)[B
com.android.server.pm.IPackageManagerBase.getPrivateFlagsForUid(I)I
com.android.server.pm.IPackageManagerBase.getProperty(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/content/pm/PackageManager$Property;
com.android.server.pm.IPackageManagerBase.getProviderInfo(Landroid/content/ComponentName;JI)Landroid/content/pm/ProviderInfo;
com.android.server.pm.IPackageManagerBase.getReceiverInfo(Landroid/content/ComponentName;JI)Landroid/content/pm/ActivityInfo;
com.android.server.pm.IPackageManagerBase.getRotationResolverPackageName()Ljava/lang/String;
com.android.server.pm.IPackageManagerBase.getSdkSandboxPackageName()Ljava/lang/String;
com.android.server.pm.IPackageManagerBase.getServiceInfo(Landroid/content/ComponentName;JI)Landroid/content/pm/ServiceInfo;
com.android.server.pm.IPackageManagerBase.getServicesSystemSharedLibraryPackageName()Ljava/lang/String;
com.android.server.pm.IPackageManagerBase.getSetupWizardPackageName()Ljava/lang/String;
com.android.server.pm.IPackageManagerBase.getSharedLibraries(Ljava/lang/String;JI)Landroid/content/pm/ParceledListSlice;
com.android.server.pm.IPackageManagerBase.getSharedSystemSharedLibraryPackageName()Ljava/lang/String;
com.android.server.pm.IPackageManagerBase.getSigningKeySet(Ljava/lang/String;)Landroid/content/pm/KeySet;
com.android.server.pm.IPackageManagerBase.getSystemCaptionsServicePackageName()Ljava/lang/String;
com.android.server.pm.IPackageManagerBase.getSystemSharedLibraryNames()[Ljava/lang/String;
com.android.server.pm.IPackageManagerBase.getSystemTextClassifierPackageName()Ljava/lang/String;
com.android.server.pm.IPackageManagerBase.getTargetSdkVersion(Ljava/lang/String;)I
com.android.server.pm.IPackageManagerBase.getUidForSharedUser(Ljava/lang/String;)I
com.android.server.pm.IPackageManagerBase.getWellbeingPackageName()Ljava/lang/String;
com.android.server.pm.IPackageManagerBase.grantRuntimePermission(Ljava/lang/String;Ljava/lang/String;I)V
com.android.server.pm.IPackageManagerBase.hasSigningCertificate(Ljava/lang/String;[BI)Z
com.android.server.pm.IPackageManagerBase.hasSystemFeature(Ljava/lang/String;I)Z
com.android.server.pm.IPackageManagerBase.hasSystemUidErrors()Z
com.android.server.pm.IPackageManagerBase.hasUidSigningCertificate(I[BI)Z
com.android.server.pm.IPackageManagerBase.isDeviceUpgrading()Z
com.android.server.pm.IPackageManagerBase.isFirstBoot()Z
com.android.server.pm.IPackageManagerBase.isInstantApp(Ljava/lang/String;I)Z
com.android.server.pm.IPackageManagerBase.isOnlyCoreApps()Z
com.android.server.pm.IPackageManagerBase.isPackageAvailable(Ljava/lang/String;I)Z
com.android.server.pm.IPackageManagerBase.isPackageDeviceAdminOnAnyUser(Ljava/lang/String;)Z
com.android.server.pm.IPackageManagerBase.isPackageSignedByKeySet(Ljava/lang/String;Landroid/content/pm/KeySet;)Z
com.android.server.pm.IPackageManagerBase.isPackageSignedByKeySetExactly(Ljava/lang/String;Landroid/content/pm/KeySet;)Z
com.android.server.pm.IPackageManagerBase.isPackageSuspendedForUser(Ljava/lang/String;I)Z
com.android.server.pm.IPackageManagerBase.isSafeMode()Z
com.android.server.pm.IPackageManagerBase.isStorageLow()Z
com.android.server.pm.IPackageManagerBase.isUidPrivileged(I)Z
com.android.server.pm.IPackageManagerBase.performDexOptMode(Ljava/lang/String;ZLjava/lang/String;ZZLjava/lang/String;)Z
com.android.server.pm.IPackageManagerBase.performDexOptSecondary(Ljava/lang/String;Ljava/lang/String;Z)Z
com.android.server.pm.IPackageManagerBase.queryContentProviders(Ljava/lang/String;IJLjava/lang/String;)Landroid/content/pm/ParceledListSlice;
com.android.server.pm.IPackageManagerBase.queryInstrumentation(Ljava/lang/String;I)Landroid/content/pm/ParceledListSlice;
com.android.server.pm.IPackageManagerBase.queryIntentActivities(Landroid/content/Intent;Ljava/lang/String;JI)Landroid/content/pm/ParceledListSlice;
com.android.server.pm.IPackageManagerBase.queryIntentActivityOptions(Landroid/content/ComponentName;[Landroid/content/Intent;[Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;JI)Landroid/content/pm/ParceledListSlice;
com.android.server.pm.IPackageManagerBase.queryIntentContentProviders(Landroid/content/Intent;Ljava/lang/String;JI)Landroid/content/pm/ParceledListSlice;
com.android.server.pm.IPackageManagerBase.queryIntentReceivers(Landroid/content/Intent;Ljava/lang/String;JI)Landroid/content/pm/ParceledListSlice;
com.android.server.pm.IPackageManagerBase.queryIntentServices(Landroid/content/Intent;Ljava/lang/String;JI)Landroid/content/pm/ParceledListSlice;
com.android.server.pm.IPackageManagerBase.querySyncProviders(Ljava/util/List;Ljava/util/List;)V
com.android.server.pm.IPackageManagerBase.removePermission(Ljava/lang/String;)V
com.android.server.pm.IPackageManagerBase.replacePreferredActivity(Landroid/content/IntentFilter;I[Landroid/content/ComponentName;Landroid/content/ComponentName;I)V
com.android.server.pm.IPackageManagerBase.resetApplicationPreferences(I)V
com.android.server.pm.IPackageManagerBase.resolveContentProvider(Ljava/lang/String;JI)Landroid/content/pm/ProviderInfo;
com.android.server.pm.IPackageManagerBase.resolveIntent(Landroid/content/Intent;Ljava/lang/String;JI)Landroid/content/pm/ResolveInfo;
com.android.server.pm.IPackageManagerBase.resolveService(Landroid/content/Intent;Ljava/lang/String;JI)Landroid/content/pm/ResolveInfo;
com.android.server.pm.IPackageManagerBase.restoreDefaultApps([BI)V
com.android.server.pm.IPackageManagerBase.restorePreferredActivities([BI)V
com.android.server.pm.IPackageManagerBase.setHomeActivity(Landroid/content/ComponentName;I)V
com.android.server.pm.IPackageManagerBase.setLastChosenActivity(Landroid/content/Intent;Ljava/lang/String;ILandroid/content/IntentFilter;ILandroid/content/ComponentName;)V
com.android.server.pm.IPackageManagerBase.setSystemAppHiddenUntilInstalled(Ljava/lang/String;Z)V
com.android.server.pm.IPackageManagerBase.setSystemAppInstallState(Ljava/lang/String;ZI)Z
com.android.server.pm.IPackageManagerBase.updateIntentVerificationStatus(Ljava/lang/String;II)Z
com.android.server.pm.IPackageManagerBase.verifyIntentFilter(IILjava/util/List;)V
com.android.server.pm.ShortcutService.applyRestoreSmartSwitch(Landroid/os/ParcelFileDescriptor;I)I
com.android.server.pm.ShortcutService.getBackupShortcut(I)Landroid/os/ParcelFileDescriptor;
com.android.server.pm.ShortcutService.getBitmapPathList(I)[Ljava/lang/String;
com.android.server.pm.ShortcutService.getShortcutBitmapsFileDescriptor()Lcom/android/internal/os/IParcelFileDescriptorFactory;
com.android.server.pm.ShortcutService.handleLocaleChanged(Z)V
com.android.server.pm.ShortcutService.requestPinShortcutAsDisplay(Ljava/lang/String;Landroid/content/pm/ShortcutInfo;Landroid/content/IntentSender;IILcom/android/internal/infra/AndroidFuture;)V
com.android.server.pm.ShortcutService.restoreBitmapsFromBackupService(Landroid/os/ParcelFileDescriptor;Ljava/lang/String;Ljava/lang/String;)V
com.samsung.android.server.wifi.p2p.SemWifiP2pServiceImpl.controlOpenWifiScanTimer(I)V
com.samsung.android.server.wifi.p2p.SemWifiP2pServiceImpl.discoverPeers(ILcom/samsung/android/wifi/p2p/ISemWifiP2pCallback;)V
com.samsung.android.server.wifi.p2p.SemWifiP2pServiceImpl.getChannelsMhzForBand(I)[I
com.samsung.android.server.wifi.p2p.SemWifiP2pServiceImpl.getInUsePackageList(Ljava/lang/String;)Ljava/util/List;
com.samsung.android.server.wifi.p2p.SemWifiP2pServiceImpl.getP2pFactoryMacAddress()Landroid/net/MacAddress;
com.samsung.android.server.wifi.p2p.SemWifiP2pServiceImpl.getSemWifiP2pDevice(Ljava/lang/String;)Lcom/samsung/android/wifi/p2p/SemWifiP2pDevice;
com.samsung.android.server.wifi.p2p.SemWifiP2pServiceImpl.getWifiP2pState()I
com.samsung.android.server.wifi.p2p.SemWifiP2pServiceImpl.removeClient(Ljava/lang/String;Lcom/samsung/android/wifi/p2p/ISemWifiP2pCallback;)V
com.samsung.android.server.wifi.p2p.SemWifiP2pServiceImpl.setInUsePackage(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)V
com.samsung.android.server.wifi.p2p.SemWifiP2pServiceImpl.setListenOffloading(IIII)V
com.samsung.android.server.wifi.p2p.SemWifiP2pServiceImpl.setMsMiceInfo(ILjava/lang/String;Ljava/lang/String;)V
com.samsung.android.server.wifi.p2p.SemWifiP2pServiceImpl.setPreparedAccountPin(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.samsung.android.server.wifi.p2p.SemWifiP2pServiceImpl.setScreenSharing(Z)V
com.samsung.android.server.wifi.p2p.SemWifiP2pServiceImpl.unsetAllInUsePackage(Ljava/lang/String;)V
com.samsung.android.server.wifi.p2p.SemWifiP2pServiceImpl.unsetInUsePackage(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)V
com.android.server.appprelauncher.AppPrelaunchService.isAppPrelaunched(I)Z
com.android.server.appprelauncher.AppPrelaunchService.killApp(I)Z
com.android.server.appprelauncher.AppPrelaunchService.prelaunchApp(Ljava/lang/String;I)Z
com.android.server.appprelauncher.AppPrelaunchService.prelaunchAppTillStage(Ljava/lang/String;II)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.addConfigurationType(Lcom/samsung/android/knox/ContextInfo;Ljava/util/List;)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.addHomeShortcutToPersonal(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;Ljava/lang/String;)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.addNetworkSSID(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.addPackageToExternalStorageBlackList(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/AppIdentity;)I
com.android.server.enterprise.container.KnoxMUMContainerPolicy.addPackageToExternalStorageWhiteList(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/AppIdentity;)I
com.android.server.enterprise.container.KnoxMUMContainerPolicy.addPackageToInstallWhiteList(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/AppIdentity;)I
com.android.server.enterprise.container.KnoxMUMContainerPolicy.addSecureKeyPad(ILjava/lang/String;)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.allowLayoutSwitching(Lcom/samsung/android/knox/ContextInfo;Z)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.cancelCreateContainer(Lcom/samsung/android/knox/container/ContainerCreationParams;)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.checkProvisioningPreCondition(Ljava/lang/String;I)I
com.android.server.enterprise.container.KnoxMUMContainerPolicy.clearNetworkSSID(Lcom/samsung/android/knox/ContextInfo;)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.clearPackagesFromExternalStorageBlackList(Lcom/samsung/android/knox/ContextInfo;)I
com.android.server.enterprise.container.KnoxMUMContainerPolicy.clearPackagesFromExternalStorageWhiteList(Lcom/samsung/android/knox/ContextInfo;)I
com.android.server.enterprise.container.KnoxMUMContainerPolicy.createContainer(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/container/CreationParams;I)I
com.android.server.enterprise.container.KnoxMUMContainerPolicy.createContainerInternal(Lcom/samsung/android/knox/container/ContainerCreationParams;)I
com.android.server.enterprise.container.KnoxMUMContainerPolicy.createContainerMarkSuccess(Lcom/samsung/android/knox/container/ContainerCreationParams;)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.createContainerWithCallback(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/container/CreationParams;ILcom/samsung/android/knox/IEnterpriseContainerCallback;)I
com.android.server.enterprise.container.KnoxMUMContainerPolicy.deleteHomeShortcutFromPersonal(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;Ljava/lang/String;)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.doSelfUninstall()V
com.android.server.enterprise.container.KnoxMUMContainerPolicy.enableBluetooth(Lcom/samsung/android/knox/ContextInfo;ZLandroid/os/Bundle;)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.enableExternalStorage(Lcom/samsung/android/knox/ContextInfo;Z)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.enableNFC(Lcom/samsung/android/knox/ContextInfo;ZLandroid/os/Bundle;)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.enableUsbAccess(Lcom/samsung/android/knox/ContextInfo;ZLandroid/os/Bundle;)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.enforceMultifactorAuthentication(Lcom/samsung/android/knox/ContextInfo;Z)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.forceResetPassword(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;I)I
com.android.server.enterprise.container.KnoxMUMContainerPolicy.getAppSeparationConfig()Landroid/os/Bundle;
com.android.server.enterprise.container.KnoxMUMContainerPolicy.getConfigurationType(Lcom/samsung/android/knox/ContextInfo;I)Ljava/util/List;
com.android.server.enterprise.container.KnoxMUMContainerPolicy.getConfigurationTypeByName(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)Ljava/util/List;
com.android.server.enterprise.container.KnoxMUMContainerPolicy.getConfigurationTypes(Lcom/samsung/android/knox/ContextInfo;)Ljava/util/List;
com.android.server.enterprise.container.KnoxMUMContainerPolicy.getContainerCreationParams(I)Lcom/samsung/android/knox/container/ContainerCreationParams;
com.android.server.enterprise.container.KnoxMUMContainerPolicy.getContainers(Lcom/samsung/android/knox/ContextInfo;)Ljava/util/List;
com.android.server.enterprise.container.KnoxMUMContainerPolicy.getCustomResource(ILjava/lang/String;)Ljava/lang/String;
com.android.server.enterprise.container.KnoxMUMContainerPolicy.getDefaultConfigurationTypes()Ljava/util/List;
com.android.server.enterprise.container.KnoxMUMContainerPolicy.getEnforceAuthForContainer(Lcom/samsung/android/knox/ContextInfo;)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.getFIDOInfo(Lcom/samsung/android/knox/ContextInfo;)Landroid/os/Bundle;
com.android.server.enterprise.container.KnoxMUMContainerPolicy.getHibernationTimeout(Lcom/samsung/android/knox/ContextInfo;)J
com.android.server.enterprise.container.KnoxMUMContainerPolicy.getKnoxCustomBadgePolicy()Ljava/util/List;
com.android.server.enterprise.container.KnoxMUMContainerPolicy.getNetworkSSID(Lcom/samsung/android/knox/ContextInfo;)Ljava/util/List;
com.android.server.enterprise.container.KnoxMUMContainerPolicy.getOwnContainers()[Lcom/samsung/android/knox/container/EnterpriseContainerObject;
com.android.server.enterprise.container.KnoxMUMContainerPolicy.getPackageSignaturesFromExternalStorageWhiteList(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)[Landroid/content/pm/Signature;
com.android.server.enterprise.container.KnoxMUMContainerPolicy.getPackagesFromExternalStorageBlackList(Lcom/samsung/android/knox/ContextInfo;)Ljava/util/List;
com.android.server.enterprise.container.KnoxMUMContainerPolicy.getPackagesFromExternalStorageWhiteList(Lcom/samsung/android/knox/ContextInfo;)Ljava/util/List;
com.android.server.enterprise.container.KnoxMUMContainerPolicy.getPackagesFromInstallWhiteList(Lcom/samsung/android/knox/ContextInfo;)Ljava/util/List;
com.android.server.enterprise.container.KnoxMUMContainerPolicy.getProvisioningState()Landroid/os/Bundle;
com.android.server.enterprise.container.KnoxMUMContainerPolicy.getSecureKeyPad(I)Ljava/util/List;
com.android.server.enterprise.container.KnoxMUMContainerPolicy.getStatus(Lcom/samsung/android/knox/ContextInfo;)I
com.android.server.enterprise.container.KnoxMUMContainerPolicy.getStatusInternal(I)I
com.android.server.enterprise.container.KnoxMUMContainerPolicy.isBluetoothEnabled(Lcom/samsung/android/knox/ContextInfo;)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.isBluetoothEnabledBeforeFOTA(Lcom/samsung/android/knox/ContextInfo;)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.isContactsSharingEnabled(Lcom/samsung/android/knox/ContextInfo;)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.isEmergencyModeSupported()Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.isExternalStorageEnabled(Lcom/samsung/android/knox/ContextInfo;)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.isLayoutSwitchingAllowed(Lcom/samsung/android/knox/ContextInfo;)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.isMultifactorAuthenticationEnforced(Lcom/samsung/android/knox/ContextInfo;)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.isNFCEnabled(Lcom/samsung/android/knox/ContextInfo;)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.isPackageAllowedToAccessExternalSdcard(Lcom/samsung/android/knox/ContextInfo;I)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.isPackageInInstallWhiteList(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.isResetContainerOnRebootEnabled(Lcom/samsung/android/knox/ContextInfo;)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.isSettingsOptionEnabled(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.isSettingsOptionEnabledInternal(ILjava/lang/String;Z)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.isUsbAccessEnabled(Lcom/samsung/android/knox/ContextInfo;)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.lockContainer(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.registerBroadcastReceiverIntent(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;Ljava/lang/String;)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.removeConfigurationType(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.removeContainer(Lcom/samsung/android/knox/ContextInfo;)I
com.android.server.enterprise.container.KnoxMUMContainerPolicy.removeContainerInternal(I)I
com.android.server.enterprise.container.KnoxMUMContainerPolicy.removeNetworkSSID(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.removePackageFromExternalStorageBlackList(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/AppIdentity;)I
com.android.server.enterprise.container.KnoxMUMContainerPolicy.removePackageFromExternalStorageWhiteList(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/AppIdentity;)I
com.android.server.enterprise.container.KnoxMUMContainerPolicy.removePackageFromInstallWhiteList(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/AppIdentity;)I
com.android.server.enterprise.container.KnoxMUMContainerPolicy.removeSecureKeyPad(ILjava/lang/String;)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.resetContainerOnReboot(Lcom/samsung/android/knox/ContextInfo;Z)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.setAppSeparationConfig(Lcom/samsung/android/knox/ContextInfo;Landroid/os/Bundle;)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.setAppSeparationWhitelistedApps(Lcom/samsung/android/knox/ContextInfo;Ljava/util/List;)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.setContactsSharingEnabled(Lcom/samsung/android/knox/ContextInfo;Z)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.setCustomResource(ILcom/samsung/android/knox/ContextInfo;Landroid/os/Bundle;)I
com.android.server.enterprise.container.KnoxMUMContainerPolicy.setEnforceAuthForContainer(Lcom/samsung/android/knox/ContextInfo;Z)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.setFIDOInfo(Lcom/samsung/android/knox/ContextInfo;Landroid/os/Bundle;)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.setHibernationTimeout(Lcom/samsung/android/knox/ContextInfo;J)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.setSettingsOptionEnabled(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;Z)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.unlockContainer(Lcom/samsung/android/knox/ContextInfo;)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.unregisterBroadcastReceiverIntent(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;Ljava/lang/String;)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.updateProvisioningState(Landroid/os/Bundle;)Z
com.samsung.android.knox.analytics.service.KnoxAnalyticsProxyService.log(Lcom/samsung/android/knox/knoxanalyticsproxy/KnoxAnalyticsData;)V
com.android.internal.telephony.semtelephonyinterface.SemTelephonyController.NSRI_requestProc(I[B)[B
com.android.internal.telephony.semtelephonyinterface.SemTelephonyController.changeIccSimPersoPassword(Ljava/lang/String;Ljava/lang/String;)Z
com.android.internal.telephony.semtelephonyinterface.SemTelephonyController.changeIccSimPersoPasswordForSubId(ILjava/lang/String;Ljava/lang/String;)Z
com.android.internal.telephony.semtelephonyinterface.SemTelephonyController.checkCallControl(ILjava/lang/String;)Ljava/lang/String;
com.android.internal.telephony.semtelephonyinterface.SemTelephonyController.checkNSRIUSIMstate_int()I
com.android.internal.telephony.semtelephonyinterface.SemTelephonyController.dialForSubscriber(ILjava/lang/String;)V
com.android.internal.telephony.semtelephonyinterface.SemTelephonyController.getActivationDay(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
com.android.internal.telephony.semtelephonyinterface.SemTelephonyController.getAllCellInfoBySubId(ILjava/lang/String;Ljava/lang/String;)Ljava/util/List;
com.android.internal.telephony.semtelephonyinterface.SemTelephonyController.getAtr(I)[B
com.android.internal.telephony.semtelephonyinterface.SemTelephonyController.getCdmaMinForOtasp(I)Ljava/lang/String;
com.android.internal.telephony.semtelephonyinterface.SemTelephonyController.getCellLocationBySubId(ILjava/lang/String;Ljava/lang/String;)Landroid/telephony/CellIdentity;
com.android.internal.telephony.semtelephonyinterface.SemTelephonyController.getCurrentUATI()[B
com.android.internal.telephony.semtelephonyinterface.SemTelephonyController.getDataRoamingEnabled()Z
com.android.internal.telephony.semtelephonyinterface.SemTelephonyController.getDisable2g()I
com.android.internal.telephony.semtelephonyinterface.SemTelephonyController.getEuimid()Ljava/lang/String;
com.android.internal.telephony.semtelephonyinterface.SemTelephonyController.getFDNavailable(I)Z
com.android.internal.telephony.semtelephonyinterface.SemTelephonyController.getFeliCaUimLockStatus(I)I
com.android.internal.telephony.semtelephonyinterface.SemTelephonyController.getIccUsimPersoEnabled()Z
com.android.internal.telephony.semtelephonyinterface.SemTelephonyController.getIccUsimPersoEnabledForSubId(I)Z
com.android.internal.telephony.semtelephonyinterface.SemTelephonyController.getIpAddressFromLinkProp(Ljava/lang/String;)Ljava/lang/String;
com.android.internal.telephony.semtelephonyinterface.SemTelephonyController.getMobileQualityInformation(ILjava/lang/String;Ljava/lang/String;)Ljava/lang/String;
com.android.internal.telephony.semtelephonyinterface.SemTelephonyController.getNetworkStatusDisplayOption(Ljava/lang/String;Ljava/lang/String;)I
com.android.internal.telephony.semtelephonyinterface.SemTelephonyController.getNrMode(I)I
com.android.internal.telephony.semtelephonyinterface.SemTelephonyController.getSdnAvailable()Z
com.android.internal.telephony.semtelephonyinterface.SemTelephonyController.getServiceStateForPhoneId(ILjava/lang/String;Ljava/lang/String;)Landroid/telephony/ServiceState;
com.android.internal.telephony.semtelephonyinterface.SemTelephonyController.getSimPinRetryForSubscriber(I)I
com.android.internal.telephony.semtelephonyinterface.SemTelephonyController.getSimPukRetryForSubscriber(I)I
com.android.internal.telephony.semtelephonyinterface.SemTelephonyController.getSupportedNrca(I)Z
com.android.internal.telephony.semtelephonyinterface.SemTelephonyController.getUaUap(Ljava/lang/String;)Ljava/lang/String;
com.android.internal.telephony.semtelephonyinterface.SemTelephonyController.getVendorConfigState(I)Landroid/telephony/VendorConfigurationState;
com.android.internal.telephony.semtelephonyinterface.SemTelephonyController.getVoNRMode(I)I
com.android.internal.telephony.semtelephonyinterface.SemTelephonyController.invokeOemRilRequestRawForSubscriber(I[B[B)I
com.android.internal.telephony.semtelephonyinterface.SemTelephonyController.isEmergencyNumberBySubId(ILjava/lang/String;Z)Z
com.android.internal.telephony.semtelephonyinterface.SemTelephonyController.isMmiForSubscriber(ILjava/lang/String;)Z
com.android.internal.telephony.semtelephonyinterface.SemTelephonyController.isSimFDNEnabledForSubscriber(I)Z
com.android.internal.telephony.semtelephonyinterface.SemTelephonyController.isSupportLteCapaOptionC(I)Z
com.android.internal.telephony.semtelephonyinterface.SemTelephonyController.isVideoCall()Z
com.android.internal.telephony.semtelephonyinterface.SemTelephonyController.reloadTestEmergencyNumber()V
com.android.internal.telephony.semtelephonyinterface.SemTelephonyController.requestModemActivityInfo(Landroid/os/ResultReceiver;Ljava/lang/String;)V
com.android.internal.telephony.semtelephonyinterface.SemTelephonyController.sendRequestToRIL([B[BII)I
com.android.internal.telephony.semtelephonyinterface.SemTelephonyController.sendVolteState(IZ)V
com.android.internal.telephony.semtelephonyinterface.SemTelephonyController.setAllowDataDuringCall(I)V
com.android.internal.telephony.semtelephonyinterface.SemTelephonyController.setDisable2g(I)Z
com.android.internal.telephony.semtelephonyinterface.SemTelephonyController.setEPSLOCI([B)V
com.android.internal.telephony.semtelephonyinterface.SemTelephonyController.setGbaBootstrappingParams(I[BLjava/lang/String;Ljava/lang/String;)V
com.android.internal.telephony.semtelephonyinterface.SemTelephonyController.setIccSimPersoEnabled(ZLjava/lang/String;)Z
com.android.internal.telephony.semtelephonyinterface.SemTelephonyController.setIccSimPersoEnabledForSubId(IZLjava/lang/String;)Z
com.android.internal.telephony.semtelephonyinterface.SemTelephonyController.setNrMode(IIZLjava/lang/String;)Z
com.android.internal.telephony.semtelephonyinterface.SemTelephonyController.setTransmitPowerExt(JZ)Z
com.android.internal.telephony.semtelephonyinterface.SemTelephonyController.setTransmitPowerWithFlag(IZ)Z
com.android.internal.telephony.semtelephonyinterface.SemTelephonyController.setVoNRMode(II)Z
com.android.internal.telephony.semtelephonyinterface.SemTelephonyController.sms_NSRI_decryptsms(I[B)[B
com.android.internal.telephony.semtelephonyinterface.SemTelephonyController.sms_NSRI_decryptsmsintxside(ILjava/lang/String;[B)[B
com.android.internal.telephony.semtelephonyinterface.SemTelephonyController.sms_NSRI_encryptsms(ILjava/lang/String;[B)[B
com.android.internal.telephony.semtelephonyinterface.SemTelephonyController.supplyPerso(Ljava/lang/String;)Z
com.android.internal.telephony.semtelephonyinterface.SemTelephonyController.supplyPersoForSubId(ILjava/lang/String;)Z
com.android.server.am.ActivityManagerService.addInstrumentationResults(Landroid/app/IApplicationThread;Landroid/os/Bundle;)V
com.android.server.am.ActivityManagerService.addLongLiveApp(Ljava/lang/String;)Z
com.android.server.am.ActivityManagerService.addPackageData(Ljava/lang/String;F)V
com.android.server.am.ActivityManagerService.addPackageDependency(Ljava/lang/String;)V
com.android.server.am.ActivityManagerService.appNotResponding(Ljava/lang/String;)V
com.android.server.am.ActivityManagerService.appNotRespondingViaProvider(Landroid/os/IBinder;)V
com.android.server.am.ActivityManagerService.attachApplication(Landroid/app/IApplicationThread;J)V
com.android.server.am.ActivityManagerService.backgroundAllowlistUid(I)V
com.android.server.am.ActivityManagerService.backupAgentCreated(Ljava/lang/String;Landroid/os/IBinder;I)V
com.android.server.am.ActivityManagerService.bindBackupAgent(Ljava/lang/String;III)Z
com.android.server.am.ActivityManagerService.bindService(Landroid/app/IApplicationThread;Landroid/os/IBinder;Landroid/content/Intent;Ljava/lang/String;Landroid/app/IServiceConnection;ILjava/lang/String;I)I
com.android.server.am.ActivityManagerService.bindServiceInstance(Landroid/app/IApplicationThread;Landroid/os/IBinder;Landroid/content/Intent;Ljava/lang/String;Landroid/app/IServiceConnection;ILjava/lang/String;Ljava/lang/String;I)I
com.android.server.am.ActivityManagerService.bootAnimationComplete()V
com.android.server.am.ActivityManagerService.broadcastIntent(Landroid/app/IApplicationThread;Landroid/content/Intent;Ljava/lang/String;Landroid/content/IIntentReceiver;ILjava/lang/String;Landroid/os/Bundle;[Ljava/lang/String;ILandroid/os/Bundle;ZZI)I
com.android.server.am.ActivityManagerService.broadcastIntentWithFeature(Landroid/app/IApplicationThread;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/content/IIntentReceiver;ILjava/lang/String;Landroid/os/Bundle;[Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/String;ILandroid/os/Bundle;ZZI)I
com.android.server.am.ActivityManagerService.canRestrict(ILjava/lang/String;I)Z
com.android.server.am.ActivityManagerService.cancelIntentSender(Landroid/content/IIntentSender;)V
com.android.server.am.ActivityManagerService.cancelTaskWindowTransition(I)V
com.android.server.am.ActivityManagerService.checkPermission(Ljava/lang/String;II)I
com.android.server.am.ActivityManagerService.checkProfileForADCP(ILjava/lang/String;)V
com.android.server.am.ActivityManagerService.checkUriPermission(Landroid/net/Uri;IIIILandroid/os/IBinder;)I
com.android.server.am.ActivityManagerService.checkUriPermissions(Ljava/util/List;IIIILandroid/os/IBinder;)[I
com.android.server.am.ActivityManagerService.clearApplicationUserData(Ljava/lang/String;ZLandroid/content/pm/IPackageDataObserver;I)Z
com.android.server.am.ActivityManagerService.clearLongLiveTask(I)Z
com.android.server.am.ActivityManagerService.clearRestrictionInfo(Ljava/util/List;)Z
com.android.server.am.ActivityManagerService.clearTTSPkgInfo()V
com.android.server.am.ActivityManagerService.closeSystemDialogs(Ljava/lang/String;)V
com.android.server.am.ActivityManagerService.closeSystemDialogsInDisplay(Ljava/lang/String;I)V
com.android.server.am.ActivityManagerService.crashApplicationWithType(IILjava/lang/String;ILjava/lang/String;ZI)V
com.android.server.am.ActivityManagerService.crashApplicationWithTypeWithExtras(IILjava/lang/String;ILjava/lang/String;ZILandroid/os/Bundle;)V
com.android.server.am.ActivityManagerService.dismissUserSwitchingDialog(I)V
com.android.server.am.ActivityManagerService.dumpHeap(Ljava/lang/String;IZZZLjava/lang/String;Landroid/os/ParcelFileDescriptor;Landroid/os/RemoteCallback;)Z
com.android.server.am.ActivityManagerService.dumpHeapFinished(Ljava/lang/String;)V
com.android.server.am.ActivityManagerService.enableAppFreezer(Z)Z
com.android.server.am.ActivityManagerService.enableBinderTracing()V
com.android.server.am.ActivityManagerService.enableFgsNotificationRateLimit(Z)Z
com.android.server.am.ActivityManagerService.enterSafeMode()V
com.android.server.am.ActivityManagerService.finishActivity(Landroid/os/IBinder;ILandroid/content/Intent;I)Z
com.android.server.am.ActivityManagerService.finishHeavyWeightApp()V
com.android.server.am.ActivityManagerService.finishInstrumentation(Landroid/app/IApplicationThread;ILandroid/os/Bundle;)V
com.android.server.am.ActivityManagerService.finishReceiver(Landroid/os/IBinder;ILjava/lang/String;Landroid/os/Bundle;ZI)V
com.android.server.am.ActivityManagerService.forceStopPackage(Ljava/lang/String;I)V
com.android.server.am.ActivityManagerService.forceStopPackageByAdmin(Ljava/lang/String;I)V
com.android.server.am.ActivityManagerService.getAllRestrictedList()Ljava/util/List;
com.android.server.am.ActivityManagerService.getAllRootTaskInfos()Ljava/util/List;
com.android.server.am.ActivityManagerService.getAutoRemoveRecents(I)Z
com.android.server.am.ActivityManagerService.getBackgroundRestrictionExemptionReason(I)I
com.android.server.am.ActivityManagerService.getBugreportWhitelistedPackages()Ljava/util/List;
com.android.server.am.ActivityManagerService.getConfiguration()Landroid/content/res/Configuration;
com.android.server.am.ActivityManagerService.getContentProvider(Landroid/app/IApplicationThread;Ljava/lang/String;Ljava/lang/String;IZ)Landroid/app/ContentProviderHolder;
com.android.server.am.ActivityManagerService.getContentProviderExternal(Ljava/lang/String;ILandroid/os/IBinder;Ljava/lang/String;)Landroid/app/ContentProviderHolder;
com.android.server.am.ActivityManagerService.getCurrentUser()Landroid/content/pm/UserInfo;
com.android.server.am.ActivityManagerService.getCurrentUserId()I
com.android.server.am.ActivityManagerService.getDelegatedShellPermissions()Ljava/util/List;
com.android.server.am.ActivityManagerService.getFocusedRootTaskInfo()Landroid/app/ActivityTaskManager$RootTaskInfo;
com.android.server.am.ActivityManagerService.getForegroundServiceType(Landroid/content/ComponentName;Landroid/os/IBinder;)I
com.android.server.am.ActivityManagerService.getGlobalConfiguration()Landroid/content/res/Configuration;
com.android.server.am.ActivityManagerService.getHistoricalProcessExitReasons(Ljava/lang/String;III)Landroid/content/pm/ParceledListSlice;
com.android.server.am.ActivityManagerService.getInfoForIntentSender(Landroid/content/IIntentSender;)Landroid/app/ActivityManager$PendingIntentInfo;
com.android.server.am.ActivityManagerService.getIntentForIntentSender(Landroid/content/IIntentSender;)Landroid/content/Intent;
com.android.server.am.ActivityManagerService.getIntentSender(ILjava/lang/String;Landroid/os/IBinder;Ljava/lang/String;I[Landroid/content/Intent;[Ljava/lang/String;ILandroid/os/Bundle;I)Landroid/content/IIntentSender;
com.android.server.am.ActivityManagerService.getIntentSenderWithFeature(ILjava/lang/String;Ljava/lang/String;Landroid/os/IBinder;Ljava/lang/String;I[Landroid/content/Intent;[Ljava/lang/String;ILandroid/os/Bundle;I)Landroid/content/IIntentSender;
com.android.server.am.ActivityManagerService.getIsolatedProcessList()[I
com.android.server.am.ActivityManagerService.getLaunchedFromPackage(Landroid/os/IBinder;)Ljava/lang/String;
com.android.server.am.ActivityManagerService.getLaunchedFromUid(Landroid/os/IBinder;)I
com.android.server.am.ActivityManagerService.getLifeMonitor()Landroid/os/ParcelFileDescriptor;
com.android.server.am.ActivityManagerService.getLockTaskModeState()I
com.android.server.am.ActivityManagerService.getLongLiveApp()Ljava/lang/String;
com.android.server.am.ActivityManagerService.getLongLiveApps()Ljava/util/List;
com.android.server.am.ActivityManagerService.getLongLiveProcesses()Ljava/util/List;
com.android.server.am.ActivityManagerService.getLongLiveProcessesForUser(I)Ljava/util/List;
com.android.server.am.ActivityManagerService.getLongLiveTaskIdsForUser(I)Ljava/util/List;
com.android.server.am.ActivityManagerService.getMaxLongLiveApps()I
com.android.server.am.ActivityManagerService.getMemoryInfo(Landroid/app/ActivityManager$MemoryInfo;)V
com.android.server.am.ActivityManagerService.getMemoryTrimLevel()I
com.android.server.am.ActivityManagerService.getMyMemoryState(Landroid/app/ActivityManager$RunningAppProcessInfo;)V
com.android.server.am.ActivityManagerService.getOptionsForIntentSender(Landroid/content/IIntentSender;)Landroid/os/Bundle;
com.android.server.am.ActivityManagerService.getPackageFromAppProcesses(I)Ljava/lang/String;
com.android.server.am.ActivityManagerService.getPackageProcessState(Ljava/lang/String;Ljava/lang/String;)I
com.android.server.am.ActivityManagerService.getProcessLimit()I
com.android.server.am.ActivityManagerService.getProcessMemoryInfo([I)[Landroid/os/Debug$MemoryInfo;
com.android.server.am.ActivityManagerService.getProcessPss([I)[J
com.android.server.am.ActivityManagerService.getProcessesInErrorState()Ljava/util/List;
com.android.server.am.ActivityManagerService.getProviderMimeType(Landroid/net/Uri;I)Ljava/lang/String;
com.android.server.am.ActivityManagerService.getProviderMimeTypeAsync(Landroid/net/Uri;ILandroid/os/RemoteCallback;)V
com.android.server.am.ActivityManagerService.getRecentTasks(III)Landroid/content/pm/ParceledListSlice;
com.android.server.am.ActivityManagerService.getRequestedOrientationByTaskId(I)I
com.android.server.am.ActivityManagerService.getRestrictableList(I)Ljava/util/List;
com.android.server.am.ActivityManagerService.getRestrictedList(I)Ljava/util/List;
com.android.server.am.ActivityManagerService.getRestrictionInfo(ILjava/lang/String;I)Lcom/samsung/android/sdhms/SemAppRestrictionManager$RestrictionInfo;
com.android.server.am.ActivityManagerService.getRunningAppProcesses()Ljava/util/List;
com.android.server.am.ActivityManagerService.getRunningExternalApplications()Ljava/util/List;
com.android.server.am.ActivityManagerService.getRunningServiceControlPanel(Landroid/content/ComponentName;)Landroid/app/PendingIntent;
com.android.server.am.ActivityManagerService.getRunningUserIds()[I
com.android.server.am.ActivityManagerService.getScalingFactor(Ljava/lang/String;)F
com.android.server.am.ActivityManagerService.getServices(II)Ljava/util/List;
com.android.server.am.ActivityManagerService.getSwitchingFromUserMessage()Ljava/lang/String;
com.android.server.am.ActivityManagerService.getSwitchingToUserMessage()Ljava/lang/String;
com.android.server.am.ActivityManagerService.getTagForIntentSender(Landroid/content/IIntentSender;Ljava/lang/String;)Ljava/lang/String;
com.android.server.am.ActivityManagerService.getTaskBounds(I)Landroid/graphics/Rect;
com.android.server.am.ActivityManagerService.getTaskForActivity(Landroid/os/IBinder;Z)I
com.android.server.am.ActivityManagerService.getTasks(I)Ljava/util/List;
com.android.server.am.ActivityManagerService.getUidProcessCapabilities(ILjava/lang/String;)I
com.android.server.am.ActivityManagerService.getUidProcessState(ILjava/lang/String;)I
com.android.server.am.ActivityManagerService.grantUriPermission(Landroid/app/IApplicationThread;Ljava/lang/String;Landroid/net/Uri;II)V
com.android.server.am.ActivityManagerService.handleApplicationCrash(Landroid/os/IBinder;Landroid/app/ApplicationErrorReport$ParcelableCrashInfo;)V
com.android.server.am.ActivityManagerService.handleApplicationStrictModeViolation(Landroid/os/IBinder;ILandroid/os/StrictMode$ViolationInfo;)V
com.android.server.am.ActivityManagerService.handleApplicationWtf(Landroid/os/IBinder;Ljava/lang/String;ZLandroid/app/ApplicationErrorReport$ParcelableCrashInfo;I)Z
com.android.server.am.ActivityManagerService.handleIncomingUser(IIIZZLjava/lang/String;Ljava/lang/String;)I
com.android.server.am.ActivityManagerService.hang(Landroid/os/IBinder;Z)V
com.android.server.am.ActivityManagerService.holdLock(Landroid/os/IBinder;I)V
com.android.server.am.ActivityManagerService.isAppFreezerEnabled()Z
com.android.server.am.ActivityManagerService.isAppFreezerSupported()Z
com.android.server.am.ActivityManagerService.isBackgroundRestricted(Ljava/lang/String;)Z
com.android.server.am.ActivityManagerService.isFreezableUid(I)Z
com.android.server.am.ActivityManagerService.isInLockTaskMode()Z
com.android.server.am.ActivityManagerService.isIntentSenderAnActivity(Landroid/content/IIntentSender;)Z
com.android.server.am.ActivityManagerService.isIntentSenderTargetedToPackage(Landroid/content/IIntentSender;)Z
com.android.server.am.ActivityManagerService.isScaledApp(I)Z
com.android.server.am.ActivityManagerService.isScaledAppByPackageName(Ljava/lang/String;)Z
com.android.server.am.ActivityManagerService.isTopActivityImmersive()Z
com.android.server.am.ActivityManagerService.isTopOfTask(Landroid/os/IBinder;)Z
com.android.server.am.ActivityManagerService.isUidActive(ILjava/lang/String;)Z
com.android.server.am.ActivityManagerService.isUserAMonkey()Z
com.android.server.am.ActivityManagerService.isUserRunning(II)Z
com.android.server.am.ActivityManagerService.isVrModePackageEnabled(Landroid/content/ComponentName;)Z
com.android.server.am.ActivityManagerService.killAllBackgroundProcesses()V
com.android.server.am.ActivityManagerService.killApplication(Ljava/lang/String;IILjava/lang/String;)V
com.android.server.am.ActivityManagerService.killApplicationProcess(Ljava/lang/String;I)V
com.android.server.am.ActivityManagerService.killBackgroundProcesses(Ljava/lang/String;I)V
com.android.server.am.ActivityManagerService.killPackageDependents(Ljava/lang/String;I)V
com.android.server.am.ActivityManagerService.killPids([ILjava/lang/String;Z)Z
com.android.server.am.ActivityManagerService.killProcessesBelowForeground(Ljava/lang/String;)Z
com.android.server.am.ActivityManagerService.killProcessesWhenImperceptible([ILjava/lang/String;)V
com.android.server.am.ActivityManagerService.killUid(IILjava/lang/String;)V
com.android.server.am.ActivityManagerService.killUidForPermissionChange(IILjava/lang/String;)V
com.android.server.am.ActivityManagerService.launchBugReportHandlerApp()Z
com.android.server.am.ActivityManagerService.makePackageIdle(Ljava/lang/String;I)V
com.android.server.am.ActivityManagerService.moveActivityTaskToBack(Landroid/os/IBinder;Z)Z
com.android.server.am.ActivityManagerService.moveTaskToBack(IZ)Z
com.android.server.am.ActivityManagerService.moveTaskToBackWithBundle(IZLandroid/os/Bundle;)Z
com.android.server.am.ActivityManagerService.moveTaskToFront(Landroid/app/IApplicationThread;Ljava/lang/String;IILandroid/os/Bundle;)V
com.android.server.am.ActivityManagerService.moveTaskToRootTask(IIZ)V
com.android.server.am.ActivityManagerService.noteAlarmFinish(Landroid/content/IIntentSender;Landroid/os/WorkSource;ILjava/lang/String;)V
com.android.server.am.ActivityManagerService.noteAlarmStart(Landroid/content/IIntentSender;Landroid/os/WorkSource;ILjava/lang/String;)V
com.android.server.am.ActivityManagerService.noteWakeupAlarm(Landroid/content/IIntentSender;Landroid/os/WorkSource;ILjava/lang/String;Ljava/lang/String;)V
com.android.server.am.ActivityManagerService.notifyCleartextNetwork(I[B)V
com.android.server.am.ActivityManagerService.notifyLockedProfile(I)V
com.android.server.am.ActivityManagerService.openContentUri(Ljava/lang/String;)Landroid/os/ParcelFileDescriptor;
com.android.server.am.ActivityManagerService.peekService(Landroid/content/Intent;Ljava/lang/String;Ljava/lang/String;)Landroid/os/IBinder;
com.android.server.am.ActivityManagerService.performIdleMaintenance()V
com.android.server.am.ActivityManagerService.preloadBoosterAppsFromIpm(Ljava/util/List;I)V
com.android.server.am.ActivityManagerService.profileControl(Ljava/lang/String;IZLandroid/app/ProfilerInfo;I)Z
com.android.server.am.ActivityManagerService.publishContentProviders(Landroid/app/IApplicationThread;Ljava/util/List;)V
com.android.server.am.ActivityManagerService.publishService(Landroid/os/IBinder;Landroid/content/Intent;Landroid/os/IBinder;)V
com.android.server.am.ActivityManagerService.queryIntentComponentsForIntentSender(Landroid/content/IIntentSender;I)Landroid/content/pm/ParceledListSlice;
com.android.server.am.ActivityManagerService.queryRegisteredReceiverPackages(Landroid/content/Intent;Ljava/lang/String;I)[Ljava/lang/String;
com.android.server.am.ActivityManagerService.refContentProvider(Landroid/os/IBinder;II)Z
com.android.server.am.ActivityManagerService.registerDedicatedCallback(Landroid/os/RemoteCallback;I)V
com.android.server.am.ActivityManagerService.registerForegroundServiceObserver(Landroid/app/IForegroundServiceObserver;)Z
com.android.server.am.ActivityManagerService.registerIntentSenderCancelListenerEx(Landroid/content/IIntentSender;Lcom/android/internal/os/IResultReceiver;)Z
com.android.server.am.ActivityManagerService.registerProcessObserver(Landroid/app/IProcessObserver;)V
com.android.server.am.ActivityManagerService.registerReceiver(Landroid/app/IApplicationThread;Ljava/lang/String;Landroid/content/IIntentReceiver;Landroid/content/IntentFilter;Ljava/lang/String;II)Landroid/content/Intent;
com.android.server.am.ActivityManagerService.registerReceiverWithFeature(Landroid/app/IApplicationThread;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/content/IIntentReceiver;Landroid/content/IntentFilter;Ljava/lang/String;II)Landroid/content/Intent;
com.android.server.am.ActivityManagerService.registerTaskStackListener(Landroid/app/ITaskStackListener;)V
com.android.server.am.ActivityManagerService.registerUidObserver(Landroid/app/IUidObserver;IILjava/lang/String;)V
com.android.server.am.ActivityManagerService.registerUserSwitchObserver(Landroid/app/IUserSwitchObserver;Ljava/lang/String;)V
com.android.server.am.ActivityManagerService.removeContentProvider(Landroid/os/IBinder;Z)V
com.android.server.am.ActivityManagerService.removeContentProviderExternal(Ljava/lang/String;Landroid/os/IBinder;)V
com.android.server.am.ActivityManagerService.removeContentProviderExternalAsUser(Ljava/lang/String;Landroid/os/IBinder;I)V
com.android.server.am.ActivityManagerService.removeLongLiveApp(Ljava/lang/String;)Z
com.android.server.am.ActivityManagerService.removeTask(I)Z
com.android.server.am.ActivityManagerService.reportAbnormalUsage(II)V
com.android.server.am.ActivityManagerService.requestBugReport(I)V
com.android.server.am.ActivityManagerService.requestBugReportWithDescription(Ljava/lang/String;Ljava/lang/String;I)V
com.android.server.am.ActivityManagerService.requestFullBugReport()V
com.android.server.am.ActivityManagerService.requestInteractiveBugReport()V
com.android.server.am.ActivityManagerService.requestInteractiveBugReportWithDescription(Ljava/lang/String;Ljava/lang/String;)V
com.android.server.am.ActivityManagerService.requestRemoteBugReport(J)V
com.android.server.am.ActivityManagerService.requestSystemServerHeapDump()V
com.android.server.am.ActivityManagerService.requestTelephonyBugReport(Ljava/lang/String;Ljava/lang/String;)V
com.android.server.am.ActivityManagerService.requestWifiBugReport(Ljava/lang/String;Ljava/lang/String;)V
com.android.server.am.ActivityManagerService.resetAbnormalList()V
com.android.server.am.ActivityManagerService.resetAppErrors()V
com.android.server.am.ActivityManagerService.resizeTask(ILandroid/graphics/Rect;I)V
com.android.server.am.ActivityManagerService.restart()V
com.android.server.am.ActivityManagerService.restartUserInBackground(I)I
com.android.server.am.ActivityManagerService.restrict(IIZLjava/lang/String;I)Z
com.android.server.am.ActivityManagerService.resumeAppSwitches()V
com.android.server.am.ActivityManagerService.revokeUriPermission(Landroid/app/IApplicationThread;Ljava/lang/String;Landroid/net/Uri;II)V
com.android.server.am.ActivityManagerService.scheduleApplicationInfoChanged(Ljava/util/List;I)V
com.android.server.am.ActivityManagerService.sendIdleJobTrigger()V
com.android.server.am.ActivityManagerService.sendIntentSender(Landroid/content/IIntentSender;Landroid/os/IBinder;ILandroid/content/Intent;Ljava/lang/String;Landroid/content/IIntentReceiver;Ljava/lang/String;Landroid/os/Bundle;)I
com.android.server.am.ActivityManagerService.serviceDoneExecuting(Landroid/os/IBinder;III)V
com.android.server.am.ActivityManagerService.setActivityController(Landroid/app/IActivityController;Z)V
com.android.server.am.ActivityManagerService.setActivityLocusContext(Landroid/content/ComponentName;Landroid/content/LocusId;Landroid/os/IBinder;)V
com.android.server.am.ActivityManagerService.setAgentApp(Ljava/lang/String;Ljava/lang/String;)V
com.android.server.am.ActivityManagerService.setAlwaysFinish(Z)V
com.android.server.am.ActivityManagerService.setDebugApp(Ljava/lang/String;ZZ)V
com.android.server.am.ActivityManagerService.setDssForPackage(Ljava/lang/String;F)V
com.android.server.am.ActivityManagerService.setDumpHeapDebugLimit(Ljava/lang/String;IJLjava/lang/String;)V
com.android.server.am.ActivityManagerService.setFGSFilter(IZ)Z
com.android.server.am.ActivityManagerService.setFocusedRootTask(I)V
com.android.server.am.ActivityManagerService.setHasTopUi(Z)V
com.android.server.am.ActivityManagerService.setLongLiveApp(Ljava/lang/String;)Z
com.android.server.am.ActivityManagerService.setLongLiveTask(I)Z
com.android.server.am.ActivityManagerService.setPackageScreenCompatMode(Ljava/lang/String;I)V
com.android.server.am.ActivityManagerService.setPersistentVrThread(I)V
com.android.server.am.ActivityManagerService.setProcessImportant(Landroid/os/IBinder;IZLjava/lang/String;)V
com.android.server.am.ActivityManagerService.setProcessLimit(I)V
com.android.server.am.ActivityManagerService.setProcessMemoryTrimLevel(Ljava/lang/String;II)Z
com.android.server.am.ActivityManagerService.setProcessSlowdown(IZ)Z
com.android.server.am.ActivityManagerService.setProcessStateSummary([B)V
com.android.server.am.ActivityManagerService.setRenderThread(I)V
com.android.server.am.ActivityManagerService.setRequestedOrientation(Landroid/os/IBinder;I)V
com.android.server.am.ActivityManagerService.setServiceForeground(Landroid/content/ComponentName;Landroid/os/IBinder;ILandroid/app/Notification;II)V
com.android.server.am.ActivityManagerService.setStopUserOnSwitch(I)V
com.android.server.am.ActivityManagerService.setTTSPkgInfo(I)V
com.android.server.am.ActivityManagerService.setTaskResizeable(II)V
com.android.server.am.ActivityManagerService.setUserIsMonkey(Z)V
com.android.server.am.ActivityManagerService.showAllDSSInfo()V
com.android.server.am.ActivityManagerService.showBootMessage(Ljava/lang/CharSequence;Z)V
com.android.server.am.ActivityManagerService.showWaitingForDebugger(Landroid/app/IApplicationThread;Z)V
com.android.server.am.ActivityManagerService.shutdown(I)Z
com.android.server.am.ActivityManagerService.signalPersistentProcesses(I)V
com.android.server.am.ActivityManagerService.startActivity(Landroid/app/IApplicationThread;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/os/IBinder;Ljava/lang/String;IILandroid/app/ProfilerInfo;Landroid/os/Bundle;)I
com.android.server.am.ActivityManagerService.startActivityAsUser(Landroid/app/IApplicationThread;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/os/IBinder;Ljava/lang/String;IILandroid/app/ProfilerInfo;Landroid/os/Bundle;I)I
com.android.server.am.ActivityManagerService.startActivityAsUserWithFeature(Landroid/app/IApplicationThread;Ljava/lang/String;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/os/IBinder;Ljava/lang/String;IILandroid/app/ProfilerInfo;Landroid/os/Bundle;I)I
com.android.server.am.ActivityManagerService.startActivityFromRecents(ILandroid/os/Bundle;)I
com.android.server.am.ActivityManagerService.startActivityWithFeature(Landroid/app/IApplicationThread;Ljava/lang/String;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/os/IBinder;Ljava/lang/String;IILandroid/app/ProfilerInfo;Landroid/os/Bundle;)I
com.android.server.am.ActivityManagerService.startBinderTracking()Z
com.android.server.am.ActivityManagerService.startConfirmDeviceCredentialIntent(Landroid/content/Intent;Landroid/os/Bundle;)V
com.android.server.am.ActivityManagerService.startDelegateShellPermissionIdentity(I[Ljava/lang/String;)V
com.android.server.am.ActivityManagerService.startInstrumentation(Landroid/content/ComponentName;Ljava/lang/String;ILandroid/os/Bundle;Landroid/app/IInstrumentationWatcher;Landroid/app/IUiAutomationConnection;ILjava/lang/String;)Z
com.android.server.am.ActivityManagerService.startProfile(I)Z
com.android.server.am.ActivityManagerService.startService(Landroid/app/IApplicationThread;Landroid/content/Intent;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;I)Landroid/content/ComponentName;
com.android.server.am.ActivityManagerService.startSystemLockTaskMode(I)V
com.android.server.am.ActivityManagerService.startUserInBackground(I)Z
com.android.server.am.ActivityManagerService.startUserInBackgroundWithListener(ILandroid/os/IProgressListener;)Z
com.android.server.am.ActivityManagerService.startUserInForegroundWithListener(ILandroid/os/IProgressListener;)Z
com.android.server.am.ActivityManagerService.stopAppForUser(Ljava/lang/String;I)V
com.android.server.am.ActivityManagerService.stopAppSwitches()V
com.android.server.am.ActivityManagerService.stopBinderTrackingAndDump(Landroid/os/ParcelFileDescriptor;)Z
com.android.server.am.ActivityManagerService.stopDelegateShellPermissionIdentity()V
com.android.server.am.ActivityManagerService.stopProfile(I)Z
com.android.server.am.ActivityManagerService.stopService(Landroid/app/IApplicationThread;Landroid/content/Intent;Ljava/lang/String;I)I
com.android.server.am.ActivityManagerService.stopServiceToken(Landroid/content/ComponentName;Landroid/os/IBinder;I)Z
com.android.server.am.ActivityManagerService.stopUser(IZLandroid/app/IStopUserCallback;)I
com.android.server.am.ActivityManagerService.stopUserWithDelayedLocking(IZLandroid/app/IStopUserCallback;)I
com.android.server.am.ActivityManagerService.suppressResizeConfigChanges(Z)V
com.android.server.am.ActivityManagerService.switchUser(I)Z
com.android.server.am.ActivityManagerService.unbindBackupAgent(Landroid/content/pm/ApplicationInfo;)V
com.android.server.am.ActivityManagerService.unbindFinished(Landroid/os/IBinder;Landroid/content/Intent;Z)V
com.android.server.am.ActivityManagerService.unbindService(Landroid/app/IServiceConnection;)Z
com.android.server.am.ActivityManagerService.unbroadcastIntent(Landroid/app/IApplicationThread;Landroid/content/Intent;I)V
com.android.server.am.ActivityManagerService.unhandledBack()V
com.android.server.am.ActivityManagerService.unlockUser(I[B[BLandroid/os/IProgressListener;)Z
com.android.server.am.ActivityManagerService.unregisterIntentSenderCancelListener(Landroid/content/IIntentSender;Lcom/android/internal/os/IResultReceiver;)V
com.android.server.am.ActivityManagerService.unregisterProcessObserver(Landroid/app/IProcessObserver;)V
com.android.server.am.ActivityManagerService.unregisterReceiver(Landroid/content/IIntentReceiver;)V
com.android.server.am.ActivityManagerService.unregisterTaskStackListener(Landroid/app/ITaskStackListener;)V
com.android.server.am.ActivityManagerService.unregisterUidObserver(Landroid/app/IUidObserver;)V
com.android.server.am.ActivityManagerService.unregisterUserSwitchObserver(Landroid/app/IUserSwitchObserver;)V
com.android.server.am.ActivityManagerService.unstableProviderDied(Landroid/os/IBinder;)V
com.android.server.am.ActivityManagerService.updateConfiguration(Landroid/content/res/Configuration;)Z
com.android.server.am.ActivityManagerService.updateLockTaskPackages(I[Ljava/lang/String;)V
com.android.server.am.ActivityManagerService.updateMccMncConfiguration(Ljava/lang/String;Ljava/lang/String;)Z
com.android.server.am.ActivityManagerService.updatePersistentConfiguration(Landroid/content/res/Configuration;)V
com.android.server.am.ActivityManagerService.updatePersistentConfigurationAndLocaleOverlays(Landroid/content/res/Configuration;Ljava/lang/String;Ljava/lang/String;Landroid/os/LocaleList;)V
com.android.server.am.ActivityManagerService.updatePersistentConfigurationWithAttribution(Landroid/content/res/Configuration;Ljava/lang/String;Ljava/lang/String;)V
com.android.server.am.ActivityManagerService.updateRestrictionInfo(Lcom/samsung/android/sdhms/SemAppRestrictionManager$RestrictionInfo;Ljava/util/List;)Z
com.android.server.am.ActivityManagerService.updateServiceGroup(Landroid/app/IServiceConnection;II)V
com.android.server.am.ActivityManagerService.waitForBroadcastIdle()V
com.android.server.am.ActivityManagerService.waitForNetworkStateUpdate(J)V
com.android.server.VaultKeeperService.checkDataWritable(Ljava/lang/String;)I
com.android.server.VaultKeeperService.destroy(Ljava/lang/String;[B[B[B)I
com.android.server.VaultKeeperService.encryptMessage(Ljava/lang/String;[B)[B
com.android.server.VaultKeeperService.generateHotpCode(Ljava/lang/String;)I
com.android.server.VaultKeeperService.initialize(Ljava/lang/String;[B[B[B[B)I
com.android.server.VaultKeeperService.isInitialized(Ljava/lang/String;)Z
com.android.server.VaultKeeperService.migrationStorage(Ljava/lang/String;)Z
com.android.server.VaultKeeperService.read(Ljava/lang/String;I[I)[B
com.android.server.VaultKeeperService.sensitiveBox(Ljava/lang/String;I[I)[B
com.android.server.VaultKeeperService.verifyCertificate(Ljava/lang/String;[B)Z
com.android.server.VaultKeeperService.write(Ljava/lang/String;I[B[B[B)I
com.android.server.multicontrol.MultiControlManagerService.enableTriggerDetection(Z)V
com.android.server.multicontrol.MultiControlManagerService.forceHideCursor(Z)V
com.android.server.multicontrol.MultiControlManagerService.getProtocolVersion()I
com.android.server.multicontrol.MultiControlManagerService.isAllowed()Z
com.android.server.multicontrol.MultiControlManagerService.resetInputFilter()V
com.android.server.multicontrol.MultiControlManagerService.setCursorPosition(III)V
com.android.server.multicontrol.MultiControlManagerService.setInputFilter(Landroid/view/IInputFilter;Lcom/samsung/android/multicontrol/IInputFilterInstallListener;)V
com.android.server.multicontrol.MultiControlManagerService.setInteractive(Z)V
com.android.server.multicontrol.MultiControlManagerService.setMultiControlOutOfFocus(Z)V
com.android.server.multicontrol.MultiControlManagerService.setProtocolVersion(I)V
com.android.server.multicontrol.MultiControlManagerService.setTriggerThreshold(I)V
com.android.server.multicontrol.MultiControlManagerService.startDeathChecker(Lcom/samsung/android/multicontrol/IMultiControlDeathChecker;)V
com.android.server.multicontrol.MultiControlManagerService.stopDeathChecker()V
com.android.server.aod.AODManagerService$BinderService.acquireDoze(Landroid/os/IBinder;Ljava/lang/String;Ljava/lang/String;)V
com.android.server.aod.AODManagerService$BinderService.addLogText(Ljava/util/List;)V
com.android.server.aod.AODManagerService$BinderService.getActiveImageInfo()Ljava/lang/String;
com.android.server.aod.AODManagerService$BinderService.isAODState()Z
com.android.server.aod.AODManagerService$BinderService.isSViewCoverBrightnessHigh()Z
com.android.server.aod.AODManagerService$BinderService.readyToScreenTurningOn()V
com.android.server.aod.AODManagerService$BinderService.registerAODDozeCallback(Landroid/os/IBinder;)V
com.android.server.aod.AODManagerService$BinderService.registerAODListener(Landroid/os/IBinder;)V
com.android.server.aod.AODManagerService$BinderService.releaseDoze(Landroid/os/IBinder;)V
com.android.server.aod.AODManagerService$BinderService.requestAODToast(Ljava/lang/String;Lcom/samsung/android/aod/AODToast;)V
com.android.server.aod.AODManagerService$BinderService.setLiveClockCommand(III[I)I
com.android.server.aod.AODManagerService$BinderService.setLiveClockImage(II[BLjava/lang/String;)I
com.android.server.aod.AODManagerService$BinderService.setLiveClockInfo(IJJJJJJJJ)I
com.android.server.aod.AODManagerService$BinderService.setLiveClockNeedle([B)V
com.android.server.aod.AODManagerService$BinderService.unregisterAODDozeCallback(Landroid/os/IBinder;)V
com.android.server.aod.AODManagerService$BinderService.unregisterAODListener(Landroid/os/IBinder;)V
com.android.server.aod.AODManagerService$BinderService.updateAODTspRect(IIIILjava/lang/String;)V
com.android.server.aod.AODManagerService$BinderService.writeAODCommand(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.server.emailksproxy.EmailKeystoreService.getKeystoreStatus()I
com.android.server.emailksproxy.EmailKeystoreService.grantAccessForAKS(ILjava/lang/String;)V
com.android.server.emailksproxy.EmailKeystoreService.installCACert(Lcom/samsung/android/knox/util/SemCertAndroidKeyStore;)I
com.android.server.emailksproxy.EmailKeystoreService.installCertificateInAndroidKeyStore(Lcom/samsung/android/knox/util/SemCertByte;Ljava/lang/String;[CI)I
com.android.server.emailksproxy.EmailKeystoreService.isAliasExists(Ljava/lang/String;)I
com.android.server.net.NetworkPolicyManagerService.getAllFirewallRuleMobileData()[I
com.android.server.net.NetworkPolicyManagerService.getFirewallRuleMobileData(I)Z
com.android.server.net.NetworkPolicyManagerService.getFirewallRuleWifi(I)Z
com.android.server.net.NetworkPolicyManagerService.onApplicationKill(Ljava/lang/String;I)V
com.android.server.net.NetworkPolicyManagerService.setFirewallRuleMobileData(IZ)V
com.android.server.net.NetworkPolicyManagerService.setFirewallRuleMobileDataMap(Ljava/util/Map;)V
com.android.server.net.NetworkPolicyManagerService.setFirewallRuleWifi(IZ)V
com.android.server.net.NetworkPolicyManagerService.setFirewallRuleWifiMap(Ljava/util/Map;)V
com.android.server.vibrator.VibratorManagerService.getSupportedVibratorGroup()I
com.android.server.vibrator.VibratorManagerService.semGetNumberOfSupportedPatterns()I
com.android.server.vibrator.VibratorManagerService.updateWatchConnectionState(Z)V
com.android.server.vibrator.VibratorManagerService.vibrate(ILjava/lang/String;Landroid/os/CombinedVibration;Landroid/os/VibrationAttributes;Ljava/lang/String;Landroid/os/IBinder;)V
com.android.server.enterprise.EnterpriseDeviceManagerServiceImpl.activateDevicePermissions(Ljava/util/List;)Z
com.android.server.enterprise.EnterpriseDeviceManagerServiceImpl.addAuthorizedUid(II)Z
com.android.server.enterprise.EnterpriseDeviceManagerServiceImpl.addPseudoAdminForParent(I)I
com.android.server.enterprise.EnterpriseDeviceManagerServiceImpl.captureUmcLogs(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;Ljava/util/List;)[B
com.android.server.enterprise.EnterpriseDeviceManagerServiceImpl.disableConstrainedState(Lcom/samsung/android/knox/ContextInfo;)Z
com.android.server.enterprise.EnterpriseDeviceManagerServiceImpl.enableConstrainedState(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)Z
com.android.server.enterprise.EnterpriseDeviceManagerServiceImpl.enforceActiveAdminPermission(Ljava/util/List;)V
com.android.server.enterprise.EnterpriseDeviceManagerServiceImpl.enforceActiveAdminPermissionByContext(Lcom/samsung/android/knox/ContextInfo;Ljava/util/List;)Lcom/samsung/android/knox/ContextInfo;
com.android.server.enterprise.EnterpriseDeviceManagerServiceImpl.enforceComponentCheck(Lcom/samsung/android/knox/ContextInfo;Landroid/content/ComponentName;)V
com.android.server.enterprise.EnterpriseDeviceManagerServiceImpl.enforceContainerOwnerShipPermissionByContext(Lcom/samsung/android/knox/ContextInfo;Ljava/util/List;)Lcom/samsung/android/knox/ContextInfo;
com.android.server.enterprise.EnterpriseDeviceManagerServiceImpl.enforceDOPOPermission(Lcom/samsung/android/knox/ContextInfo;ZZ)Lcom/samsung/android/knox/ContextInfo;
com.android.server.enterprise.EnterpriseDeviceManagerServiceImpl.enforceDoPoOnlyPermissionByContext(Lcom/samsung/android/knox/ContextInfo;Ljava/util/List;)Lcom/samsung/android/knox/ContextInfo;
com.android.server.enterprise.EnterpriseDeviceManagerServiceImpl.enforceKnoxV2Permission(Ljava/lang/String;Ljava/lang/String;)V
com.android.server.enterprise.EnterpriseDeviceManagerServiceImpl.enforceKnoxV2VerifyCaller(I)Z
com.android.server.enterprise.EnterpriseDeviceManagerServiceImpl.enforceOwnerOnlyAndActiveAdminPermission(Lcom/samsung/android/knox/ContextInfo;Ljava/util/List;)Lcom/samsung/android/knox/ContextInfo;
com.android.server.enterprise.EnterpriseDeviceManagerServiceImpl.enforceOwnerOnlyPermissionByContext(Lcom/samsung/android/knox/ContextInfo;Ljava/util/List;)Lcom/samsung/android/knox/ContextInfo;
com.android.server.enterprise.EnterpriseDeviceManagerServiceImpl.enforcePermissionByContext(Lcom/samsung/android/knox/ContextInfo;Ljava/util/List;)Lcom/samsung/android/knox/ContextInfo;
com.android.server.enterprise.EnterpriseDeviceManagerServiceImpl.enforceWpcod(IZ)V
com.android.server.enterprise.EnterpriseDeviceManagerServiceImpl.getActiveAdminComponent()Landroid/content/ComponentName;
com.android.server.enterprise.EnterpriseDeviceManagerServiceImpl.getActiveAdmins(I)Ljava/util/List;
com.android.server.enterprise.EnterpriseDeviceManagerServiceImpl.getActiveAdminsInfo(I)Ljava/util/List;
com.android.server.enterprise.EnterpriseDeviceManagerServiceImpl.getAdminContextIfCallerInCertWhiteList(Ljava/util/List;)Lcom/samsung/android/knox/ContextInfo;
com.android.server.enterprise.EnterpriseDeviceManagerServiceImpl.getAdminRemovable(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)Z
com.android.server.enterprise.EnterpriseDeviceManagerServiceImpl.getAdminUidForAuthorizedUid(I)I
com.android.server.enterprise.EnterpriseDeviceManagerServiceImpl.getAuthorizedUidForAdminUid(I)I
com.android.server.enterprise.EnterpriseDeviceManagerServiceImpl.getConstrainedState()I
com.android.server.enterprise.EnterpriseDeviceManagerServiceImpl.getKPUPackageName()Ljava/lang/String;
com.android.server.enterprise.EnterpriseDeviceManagerServiceImpl.getRemoveWarning(Landroid/content/ComponentName;Landroid/os/RemoteCallback;)V
com.android.server.enterprise.EnterpriseDeviceManagerServiceImpl.getUserStatus(I)I
com.android.server.enterprise.EnterpriseDeviceManagerServiceImpl.hasAnyActiveAdmin()Z
com.android.server.enterprise.EnterpriseDeviceManagerServiceImpl.hasDelegatedPermission(Ljava/lang/String;ILjava/lang/String;)Z
com.android.server.enterprise.EnterpriseDeviceManagerServiceImpl.hasGrantedPolicy(Landroid/content/ComponentName;I)Z
com.android.server.enterprise.EnterpriseDeviceManagerServiceImpl.isAdminActive(Landroid/content/ComponentName;)Z
com.android.server.enterprise.EnterpriseDeviceManagerServiceImpl.isAdminRemovable(Landroid/content/ComponentName;)Z
com.android.server.enterprise.EnterpriseDeviceManagerServiceImpl.isAdminRemovableInternal(Landroid/content/ComponentName;I)Z
com.android.server.enterprise.EnterpriseDeviceManagerServiceImpl.isCallerValidKPU(Lcom/samsung/android/knox/ContextInfo;)Z
com.android.server.enterprise.EnterpriseDeviceManagerServiceImpl.isCameraEnabledNative(Lcom/samsung/android/knox/ContextInfo;)Z
com.android.server.enterprise.EnterpriseDeviceManagerServiceImpl.isEmailAdminPkg(Ljava/lang/String;)Z
com.android.server.enterprise.EnterpriseDeviceManagerServiceImpl.isKPUPlatformSigned(Ljava/lang/String;I)Z
com.android.server.enterprise.EnterpriseDeviceManagerServiceImpl.isMdmAdminPresent()Z
com.android.server.enterprise.EnterpriseDeviceManagerServiceImpl.isMdmAdminPresentAsUser(I)Z
com.android.server.enterprise.EnterpriseDeviceManagerServiceImpl.isPossibleTransferOwenerShip(Landroid/content/ComponentName;)Z
com.android.server.enterprise.EnterpriseDeviceManagerServiceImpl.isRestrictedByConstrainedState(I)Z
com.android.server.enterprise.EnterpriseDeviceManagerServiceImpl.isUserSelectable(Ljava/lang/String;)Z
com.android.server.enterprise.EnterpriseDeviceManagerServiceImpl.keychainMarkedReset(Lcom/samsung/android/knox/ContextInfo;)Z
com.android.server.enterprise.EnterpriseDeviceManagerServiceImpl.migrateKnoxPoliciesForWpcod(I)Z
com.android.server.enterprise.EnterpriseDeviceManagerServiceImpl.packageHasActiveAdmins(Ljava/lang/String;)Z
com.android.server.enterprise.EnterpriseDeviceManagerServiceImpl.packageHasActiveAdminsAsUser(Ljava/lang/String;I)Z
com.android.server.enterprise.EnterpriseDeviceManagerServiceImpl.readUmcEnrollmentData(Lcom/samsung/android/knox/ContextInfo;)Ljava/lang/String;
com.android.server.enterprise.EnterpriseDeviceManagerServiceImpl.reconcileAdmin(Landroid/content/ComponentName;I)V
com.android.server.enterprise.EnterpriseDeviceManagerServiceImpl.removeActiveAdmin(Landroid/content/ComponentName;)V
com.android.server.enterprise.EnterpriseDeviceManagerServiceImpl.removeActiveAdminFromDpm(Landroid/content/ComponentName;I)V
com.android.server.enterprise.EnterpriseDeviceManagerServiceImpl.removeAuthorizedUid(II)Z
com.android.server.enterprise.EnterpriseDeviceManagerServiceImpl.sendIntent(I)V
com.android.server.enterprise.EnterpriseDeviceManagerServiceImpl.setActiveAdmin(Landroid/content/ComponentName;Z)V
com.android.server.enterprise.EnterpriseDeviceManagerServiceImpl.setActiveAdminSilent(Landroid/content/ComponentName;)V
com.android.server.enterprise.EnterpriseDeviceManagerServiceImpl.setAdminRemovable(Lcom/samsung/android/knox/ContextInfo;ZLjava/lang/String;)Z
com.android.server.enterprise.EnterpriseDeviceManagerServiceImpl.setB2BMode(Z)I
com.android.server.enterprise.EnterpriseDeviceManagerServiceImpl.setUserSelectable(ILjava/lang/String;Z)V
com.android.server.enterprise.EnterpriseDeviceManagerServiceImpl.startDualDARServices()V
com.android.server.enterprise.EnterpriseDeviceManagerServiceImpl.transferOwnerShip(Landroid/content/ComponentName;Landroid/content/ComponentName;I)V
com.android.server.enterprise.EnterpriseDeviceManagerServiceImpl.writeUmcEnrollmentData(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)Z
com.android.server.enterprise.EnterpriseDeviceManagerService.getActiveAdmins(I)Ljava/util/List;
com.android.server.enterprise.EnterpriseDeviceManagerService.getActiveAdminsInfo(I)Ljava/util/List;
com.android.server.enterprise.EnterpriseDeviceManagerService.getAdminRemovable(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)Z
com.android.server.enterprise.EnterpriseDeviceManagerService.isAdminRemovable(Landroid/content/ComponentName;)Z
com.android.server.enterprise.EnterpriseDeviceManagerService.isMdmAdminPresent()Z
com.android.server.enterprise.EnterpriseDeviceManagerService.setAdminRemovable(Lcom/samsung/android/knox/ContextInfo;ZLjava/lang/String;)Z
com.android.server.wm.ActivityTaskManagerService.clearAppLockedUnLockedApp()V
com.android.server.wm.ActivityTaskManagerService.clearRecentTasks(I)Z
com.android.server.wm.ActivityTaskManagerService.getAppLockedCheckAction()Ljava/lang/String;
com.android.server.wm.ActivityTaskManagerService.getAppLockedLockType()Ljava/lang/String;
com.android.server.wm.ActivityTaskManagerService.getAppLockedPackageList()Ljava/util/List;
com.android.server.wm.ActivityTaskManagerService.getApplockLockedAppsClass()Ljava/lang/String;
com.android.server.wm.ActivityTaskManagerService.getApplockLockedAppsPackage()Ljava/lang/String;
com.android.server.wm.ActivityTaskManagerService.getApplockType()I
com.android.server.wm.ActivityTaskManagerService.getBoundsCompatAlignment()I
com.android.server.wm.ActivityTaskManagerService.getCoverLauncherAvailableAppList(I)Ljava/util/List;
com.android.server.wm.ActivityTaskManagerService.getCoverLauncherEnabledAppList(I)Ljava/util/Map;
com.android.server.wm.ActivityTaskManagerService.getCoverLauncherEnabledAppListByType(II)Ljava/util/Map;
com.android.server.wm.ActivityTaskManagerService.getCoverLauncherPackagePosition(Ljava/lang/String;I)I
com.android.server.wm.ActivityTaskManagerService.getCutoutPolicy(ILjava/lang/String;)I
com.android.server.wm.ActivityTaskManagerService.getFoldStarManagerService()Lcom/samsung/android/core/IFoldStarManager;
com.android.server.wm.ActivityTaskManagerService.getMultiTaskingBinder()Lcom/samsung/android/multiwindow/IMultiTaskingBinder;
com.android.server.wm.ActivityTaskManagerService.getOrientationControlPolicy(ILjava/lang/String;)I
com.android.server.wm.ActivityTaskManagerService.getResumedTaskThumbnail(I)Landroid/graphics/Bitmap;
com.android.server.wm.ActivityTaskManagerService.getScpmVersion()Ljava/lang/String;
com.android.server.wm.ActivityTaskManagerService.getSsecureHiddenAppsPackages()Ljava/lang/String;
com.android.server.wm.ActivityTaskManagerService.getTaskSnapshot(IZ)Landroid/window/TaskSnapshot;
com.android.server.wm.ActivityTaskManagerService.getTasks(IZZ)Ljava/util/List;
com.android.server.wm.ActivityTaskManagerService.hasWallpaperBackgroundForLetterbox(I)Z
com.android.server.wm.ActivityTaskManagerService.isAppLockedPackage(Ljava/lang/String;)Z
com.android.server.wm.ActivityTaskManagerService.isAppLockedVerifying(Ljava/lang/String;)Z
com.android.server.wm.ActivityTaskManagerService.isApplockEnabled()Z
com.android.server.wm.ActivityTaskManagerService.isPackageEnabledForCoverLauncher(Ljava/lang/String;I)Z
com.android.server.wm.ActivityTaskManagerService.killPackageProcesses(Ljava/lang/String;ILjava/lang/String;)V
com.android.server.wm.ActivityTaskManagerService.requestWaitingForOccluding(I)V
com.android.server.wm.ActivityTaskManagerService.resetUserPackageSettings(II)V
com.android.server.wm.ActivityTaskManagerService.rotateDexCompatTask(Landroid/os/IBinder;)V
com.android.server.wm.ActivityTaskManagerService.semRemoveTask(II)Z
com.android.server.wm.ActivityTaskManagerService.setAppLockedUnLockPackage(Ljava/lang/String;)V
com.android.server.wm.ActivityTaskManagerService.setAppLockedVerifying(Ljava/lang/String;Z)V
com.android.server.wm.ActivityTaskManagerService.setApplockEnabled(Z)V
com.android.server.wm.ActivityTaskManagerService.setApplockLockedAppsClass(Ljava/lang/String;)V
com.android.server.wm.ActivityTaskManagerService.setApplockLockedAppsPackage(Ljava/lang/String;)V
com.android.server.wm.ActivityTaskManagerService.setApplockType(I)V
com.android.server.wm.ActivityTaskManagerService.setBoundsCompatAlignment(I)V
com.android.server.wm.ActivityTaskManagerService.setCoverLauncherPackageDisabled(Ljava/lang/String;I)I
com.android.server.wm.ActivityTaskManagerService.setCoverLauncherPackageEnabled(Ljava/lang/String;I)I
com.android.server.wm.ActivityTaskManagerService.setCoverLauncherPackagePosition(Ljava/lang/String;II)I
com.android.server.wm.ActivityTaskManagerService.setCustomSplashScreenTheme(Ljava/lang/String;Ljava/lang/String;I)V
com.android.server.wm.ActivityTaskManagerService.setCutoutPolicy(ILjava/lang/String;I)V
com.android.server.wm.ActivityTaskManagerService.setDisallowWhenLandscape(Z)V
com.android.server.wm.ActivityTaskManagerService.setOrientationControlDefault(Z)V
com.android.server.wm.ActivityTaskManagerService.setOrientationControlPolicy(ILjava/lang/String;I)V
com.android.server.wm.ActivityTaskManagerService.setSsecureHiddenAppsPackages(Ljava/lang/String;)V
com.android.server.wm.ActivityTaskManagerService.setUseLetterbox(Z)V
com.android.server.wm.ActivityTaskManagerService.startActivityForCoverLauncher(Landroid/content/Intent;Ljava/lang/String;)V
com.android.server.wm.ActivityTaskManagerService.startActivityForCoverLauncherAsUser(Landroid/content/Intent;Ljava/lang/String;I)V
com.android.server.wm.ActivityTaskManagerService.startAppLockService(Landroid/os/IBinder;Landroid/content/Intent;ZLjava/lang/String;)V
com.android.server.wm.ActivityTaskManagerService.startBackNavigation(Z)Landroid/window/BackNavigationInfo;
com.android.server.CountryDetectorService.addCountryListener(Landroid/location/ICountryListener;)V
com.android.server.CountryDetectorService.detectCountry()Landroid/location/Country;
com.android.server.CountryDetectorService.removeCountryListener(Landroid/location/ICountryListener;)V
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.activateCocktailBar()V
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.bindRemoteViewsService(Ljava/lang/String;ILandroid/content/Intent;Landroid/app/IApplicationThread;Landroid/os/IBinder;Landroid/app/IServiceConnection;I)Z
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.closeCocktail(Ljava/lang/String;II)V
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.deactivateCocktailBar()V
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.disableCocktail(Ljava/lang/String;Landroid/content/ComponentName;)V
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.getAllCocktailIds()[I
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.getCategoryFilterStr()Ljava/lang/String;
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.getCocktaiBarWakeUpState()Z
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.getCocktail(I)Lcom/samsung/android/cocktailbar/Cocktail;
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.getCocktailBarStateInfo()Lcom/samsung/android/cocktailbar/CocktailBarStateInfo;
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.getCocktailBarVisibility()I
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.getCocktailId(Ljava/lang/String;Landroid/content/ComponentName;)I
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.getCocktailIds(Ljava/lang/String;Landroid/content/ComponentName;)[I
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.getConfigVersion()I
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.getEnabledCocktailIds()[I
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.getHideEdgeListStr()Ljava/lang/String;
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.getPreferWidth()I
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.getSystemBarAppearance()I
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.getWindowType()I
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.isBoundCocktailPackage(Ljava/lang/String;I)Z
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.isCocktailEnabled(Ljava/lang/String;Landroid/content/ComponentName;)Z
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.isEnabledCocktail(Ljava/lang/String;Landroid/content/ComponentName;)Z
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.notifyCocktailViewDataChanged(Ljava/lang/String;II)V
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.notifyCocktailVisibiltyChanged(II)V
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.notifyKeyguardState(Z)V
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.partiallyUpdateCocktail(Ljava/lang/String;Landroid/widget/RemoteViews;I)V
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.partiallyUpdateHelpView(Ljava/lang/String;Landroid/widget/RemoteViews;I)V
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.registerCocktailBarStateListenerCallback(Landroid/os/IBinder;Landroid/content/ComponentName;)V
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.registerSystemUiVisibilityListenerCallback(Landroid/os/IBinder;Landroid/content/ComponentName;)V
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.removeCocktailUIService()V
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.requestToDisableCocktail(I)Z
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.requestToDisableCocktailByCategory(I)Z
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.requestToUpdateCocktail(I)Z
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.requestToUpdateCocktailByCategory(I)Z
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.sendExtraDataToCocktailBar(Landroid/os/Bundle;)V
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.setCocktailBarWakeUpState(Z)V
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.setCocktailHostCallbacks(Lcom/samsung/android/cocktailbar/ICocktailHost;Ljava/lang/String;I)V
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.setEnabledCocktailIds([I)V
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.setOnPullPendingIntent(Ljava/lang/String;IILandroid/app/PendingIntent;)V
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.showCocktail(Ljava/lang/String;I)V
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.startListening(Lcom/samsung/android/cocktailbar/ICocktailHost;Ljava/lang/String;I)V
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.stopListening(Ljava/lang/String;)V
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.unbindRemoteViewsService(Ljava/lang/String;ILandroid/content/Intent;)V
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.unregisterCocktailBarStateListenerCallback(Landroid/os/IBinder;)V
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.unregisterSystemUiVisibilityListenerCallback(Landroid/os/IBinder;)V
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.updateCocktail(Ljava/lang/String;Lcom/samsung/android/cocktailbar/CocktailInfo;I)V
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.updateCocktailBarPosition(I)V
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.updateCocktailBarVisibility(I)V
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.updateCocktailBarWindowType(Ljava/lang/String;I)V
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.updateWakeupArea(I)V
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.updateWakeupGesture(IZ)V
com.android.server.enterprise.ucm.UniversalCredentialManagerService.addPackagesToExemptList(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;ILjava/util/List;)I
com.android.server.enterprise.ucm.UniversalCredentialManagerService.addPackagesToWhiteList(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;Ljava/util/List;Landroid/os/Bundle;)I
com.android.server.enterprise.ucm.UniversalCredentialManagerService.addPackagesToWhiteListInternal(IILcom/samsung/android/knox/ucm/configurator/CredentialStorage;Ljava/util/List;Landroid/os/Bundle;)I
com.android.server.enterprise.ucm.UniversalCredentialManagerService.changeKeyguardPin(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;Ljava/lang/String;Ljava/lang/String;)I
com.android.server.enterprise.ucm.UniversalCredentialManagerService.clearWhiteList(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;Landroid/os/Bundle;)I
com.android.server.enterprise.ucm.UniversalCredentialManagerService.configureCredentialStorageForODESettings(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;Landroid/os/Bundle;)I
com.android.server.enterprise.ucm.UniversalCredentialManagerService.configureCredentialStoragePlugin(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;Landroid/os/Bundle;)I
com.android.server.enterprise.ucm.UniversalCredentialManagerService.deleteCACertificate(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)I
com.android.server.enterprise.ucm.UniversalCredentialManagerService.deleteCertificate(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;Ljava/lang/String;)I
com.android.server.enterprise.ucm.UniversalCredentialManagerService.deleteCertificateInternal(IILcom/samsung/android/knox/ucm/configurator/CredentialStorage;Ljava/lang/String;)I
com.android.server.enterprise.ucm.UniversalCredentialManagerService.enableCredentialStorageForLockType(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;Z)I
com.android.server.enterprise.ucm.UniversalCredentialManagerService.enforceCredentialStorageAsLockType(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;Landroid/os/Bundle;)I
com.android.server.enterprise.ucm.UniversalCredentialManagerService.getAdminForEnforcedCredentialStorageAsUser(I)I
com.android.server.enterprise.ucm.UniversalCredentialManagerService.getAliases(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;)[Ljava/lang/String;
com.android.server.enterprise.ucm.UniversalCredentialManagerService.getAllCertificateAliases(Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;)[Ljava/lang/String;
com.android.server.enterprise.ucm.UniversalCredentialManagerService.getAuthType(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;)I
com.android.server.enterprise.ucm.UniversalCredentialManagerService.getAvailableCredentialStorages(Lcom/samsung/android/knox/ContextInfo;)[Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;
com.android.server.enterprise.ucm.UniversalCredentialManagerService.getCACertificate(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)Lcom/samsung/android/knox/ucm/configurator/CACertificateInfo;
com.android.server.enterprise.ucm.UniversalCredentialManagerService.getCACertificateAliases(Lcom/samsung/android/knox/ContextInfo;Landroid/os/Bundle;)[Ljava/lang/String;
com.android.server.enterprise.ucm.UniversalCredentialManagerService.getCertificateAliases(ILcom/samsung/android/knox/ucm/configurator/CredentialStorage;)[Ljava/lang/String;
com.android.server.enterprise.ucm.UniversalCredentialManagerService.getCertificateAliasesAsUser(ILcom/samsung/android/knox/ucm/configurator/CredentialStorage;)[Ljava/lang/String;
com.android.server.enterprise.ucm.UniversalCredentialManagerService.getCredentialStoragePluginConfiguration(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;)Landroid/os/Bundle;
com.android.server.enterprise.ucm.UniversalCredentialManagerService.getCredentialStorageProperty(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;Landroid/os/Bundle;)Landroid/os/Bundle;
com.android.server.enterprise.ucm.UniversalCredentialManagerService.getCredentialStorages(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)[Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;
com.android.server.enterprise.ucm.UniversalCredentialManagerService.getDefaultInstallStorage(Lcom/samsung/android/knox/ContextInfo;)Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;
com.android.server.enterprise.ucm.UniversalCredentialManagerService.getDefaultInstallStorageAsUser(I)Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;
com.android.server.enterprise.ucm.UniversalCredentialManagerService.getEnforcedCredentialStorageForLockType(Lcom/samsung/android/knox/ContextInfo;)Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;
com.android.server.enterprise.ucm.UniversalCredentialManagerService.getEnforcedCredentialStorageForLockTypeAsUser(I)Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;
com.android.server.enterprise.ucm.UniversalCredentialManagerService.getKeyguardPinCurrentRetryCount(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;)I
com.android.server.enterprise.ucm.UniversalCredentialManagerService.getKeyguardPinMaximumLength(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;)I
com.android.server.enterprise.ucm.UniversalCredentialManagerService.getKeyguardPinMaximumRetryCount(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;)I
com.android.server.enterprise.ucm.UniversalCredentialManagerService.getKeyguardPinMinimumLength(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;)I
com.android.server.enterprise.ucm.UniversalCredentialManagerService.getODESettingsConfiguration(Lcom/samsung/android/knox/ContextInfo;)Landroid/os/Bundle;
com.android.server.enterprise.ucm.UniversalCredentialManagerService.getPackagesFromExemptList(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;I)Ljava/util/List;
com.android.server.enterprise.ucm.UniversalCredentialManagerService.getPackagesFromWhiteList(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;Landroid/os/Bundle;)Ljava/util/List;
com.android.server.enterprise.ucm.UniversalCredentialManagerService.getStorageAuthenticationType(ILcom/samsung/android/knox/ucm/configurator/CredentialStorage;)I
com.android.server.enterprise.ucm.UniversalCredentialManagerService.getSupportedAlgorithms(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;)[Ljava/lang/String;
com.android.server.enterprise.ucm.UniversalCredentialManagerService.getWifiCertificateAliasesAsUser(ILcom/samsung/android/knox/ucm/configurator/CredentialStorage;)[Ljava/lang/String;
com.android.server.enterprise.ucm.UniversalCredentialManagerService.initKeyguardPin(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;Ljava/lang/String;Landroid/os/Bundle;)I
com.android.server.enterprise.ucm.UniversalCredentialManagerService.installCACertificate(Lcom/samsung/android/knox/ContextInfo;[BLjava/lang/String;Landroid/os/Bundle;)I
com.android.server.enterprise.ucm.UniversalCredentialManagerService.installCertificate(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;[BLjava/lang/String;Ljava/lang/String;Landroid/os/Bundle;)I
com.android.server.enterprise.ucm.UniversalCredentialManagerService.installCertificateInternal(IILcom/samsung/android/knox/ucm/configurator/CredentialStorage;[BLjava/lang/String;Landroid/os/Bundle;Z)I
com.android.server.enterprise.ucm.UniversalCredentialManagerService.isAccessAllowed(ILcom/samsung/android/knox/ucm/configurator/CredentialStorage;Landroid/os/Bundle;)Z
com.android.server.enterprise.ucm.UniversalCredentialManagerService.isCallerDelegated(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;I)Z
com.android.server.enterprise.ucm.UniversalCredentialManagerService.isCredentialStorageEnabledForLockType(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;)Z
com.android.server.enterprise.ucm.UniversalCredentialManagerService.isCredentialStorageEnabledForLockTypeAsUser(ILcom/samsung/android/knox/ucm/configurator/CredentialStorage;)Z
com.android.server.enterprise.ucm.UniversalCredentialManagerService.isCredentialStorageLocked(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;)Z
com.android.server.enterprise.ucm.UniversalCredentialManagerService.isCredentialStorageLockedAsUser(ILcom/samsung/android/knox/ucm/configurator/CredentialStorage;)Z
com.android.server.enterprise.ucm.UniversalCredentialManagerService.isCredentialStorageManaged(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;)Z
com.android.server.enterprise.ucm.UniversalCredentialManagerService.isCredentialStorageManagedAsUser(ILcom/samsung/android/knox/ucm/configurator/CredentialStorage;)Z
com.android.server.enterprise.ucm.UniversalCredentialManagerService.isPackageFromExemptList(ILcom/samsung/android/knox/ucm/configurator/CredentialStorage;I)Z
com.android.server.enterprise.ucm.UniversalCredentialManagerService.lockCredentialStorage(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;Z)I
com.android.server.enterprise.ucm.UniversalCredentialManagerService.manageCredentialStorage(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;Z)I
com.android.server.enterprise.ucm.UniversalCredentialManagerService.notifyLicenseStatus(ILjava/lang/String;)Z
com.android.server.enterprise.ucm.UniversalCredentialManagerService.removePackagesFromExemptList(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;ILjava/util/List;)I
com.android.server.enterprise.ucm.UniversalCredentialManagerService.removePackagesFromWhiteList(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;Ljava/util/List;Landroid/os/Bundle;)I
com.android.server.enterprise.ucm.UniversalCredentialManagerService.setAuthType(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;I)I
com.android.server.enterprise.ucm.UniversalCredentialManagerService.setCredentialStorageProperty(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;Landroid/os/Bundle;)Landroid/os/Bundle;
com.android.server.enterprise.ucm.UniversalCredentialManagerService.setDefaultInstallStorage(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;)I
com.android.server.enterprise.ucm.UniversalCredentialManagerService.setKeyguardPinMaximumLength(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;I)I
com.android.server.enterprise.ucm.UniversalCredentialManagerService.setKeyguardPinMaximumRetryCount(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;I)I
com.android.server.enterprise.ucm.UniversalCredentialManagerService.setKeyguardPinMinimumLength(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;I)I
com.android.server.usage.UsageStatsService$BinderService.clearBroadcastEvents(Ljava/lang/String;I)V
com.android.server.usage.UsageStatsService$BinderService.clearBroadcastResponseStats(Ljava/lang/String;JLjava/lang/String;I)V
com.android.server.usage.UsageStatsService$BinderService.deleteUsageStats()V
com.android.server.usage.UsageStatsService$BinderService.forceUsageSourceSettingRead()V
com.android.server.usage.UsageStatsService$BinderService.getAppMinStandbyBucket(Ljava/lang/String;Ljava/lang/String;I)I
com.android.server.usage.UsageStatsService$BinderService.getAppStandbyBucket(Ljava/lang/String;Ljava/lang/String;I)I
com.android.server.usage.UsageStatsService$BinderService.getAppStandbyBuckets(Ljava/lang/String;I)Landroid/content/pm/ParceledListSlice;
com.android.server.usage.UsageStatsService$BinderService.getAppStandbyConstant(Ljava/lang/String;)Ljava/lang/String;
com.android.server.usage.UsageStatsService$BinderService.getLastTimeAnyComponentUsed(Ljava/lang/String;Ljava/lang/String;)J
com.android.server.usage.UsageStatsService$BinderService.getUsageSource()I
com.android.server.usage.UsageStatsService$BinderService.isAppInactive(Ljava/lang/String;ILjava/lang/String;)Z
com.android.server.usage.UsageStatsService$BinderService.onCarrierPrivilegedAppsChanged()V
com.android.server.usage.UsageStatsService$BinderService.queryBroadcastResponseStats(Ljava/lang/String;JLjava/lang/String;I)Landroid/app/usage/BroadcastResponseStatsList;
com.android.server.usage.UsageStatsService$BinderService.queryConfigurationStats(IJJLjava/lang/String;)Landroid/content/pm/ParceledListSlice;
com.android.server.usage.UsageStatsService$BinderService.queryEventStats(IJJLjava/lang/String;)Landroid/content/pm/ParceledListSlice;
com.android.server.usage.UsageStatsService$BinderService.queryEvents(JJLjava/lang/String;)Landroid/app/usage/UsageEvents;
com.android.server.usage.UsageStatsService$BinderService.queryEventsForPackage(JJLjava/lang/String;)Landroid/app/usage/UsageEvents;
com.android.server.usage.UsageStatsService$BinderService.queryEventsForPackageForUser(JJILjava/lang/String;Ljava/lang/String;)Landroid/app/usage/UsageEvents;
com.android.server.usage.UsageStatsService$BinderService.queryEventsForUser(JJILjava/lang/String;)Landroid/app/usage/UsageEvents;
com.android.server.usage.UsageStatsService$BinderService.queryUsageStats(IJJLjava/lang/String;I)Landroid/content/pm/ParceledListSlice;
com.android.server.usage.UsageStatsService$BinderService.registerAppUsageLimitObserver(I[Ljava/lang/String;JJLandroid/app/PendingIntent;Ljava/lang/String;)V
com.android.server.usage.UsageStatsService$BinderService.registerAppUsageObserver(I[Ljava/lang/String;JLandroid/app/PendingIntent;Ljava/lang/String;)V
com.android.server.usage.UsageStatsService$BinderService.registerUsageSessionObserver(I[Ljava/lang/String;JJLandroid/app/PendingIntent;Landroid/app/PendingIntent;Ljava/lang/String;)V
com.android.server.usage.UsageStatsService$BinderService.registerUsageStatsWatcher(Lcom/samsung/android/app/usage/IUsageStatsWatcher;)V
com.android.server.usage.UsageStatsService$BinderService.registerUsageStatsWatcherWithComponent(Lcom/samsung/android/app/usage/IUsageStatsWatcher;Ljava/util/List;)V
com.android.server.usage.UsageStatsService$BinderService.reportChooserSelection(Ljava/lang/String;ILjava/lang/String;[Ljava/lang/String;Ljava/lang/String;)V
com.android.server.usage.UsageStatsService$BinderService.reportPastUsageStart(Landroid/os/IBinder;Ljava/lang/String;JLjava/lang/String;)V
com.android.server.usage.UsageStatsService$BinderService.reportUsageStart(Landroid/os/IBinder;Ljava/lang/String;Ljava/lang/String;)V
com.android.server.usage.UsageStatsService$BinderService.reportUsageStop(Landroid/os/IBinder;Ljava/lang/String;Ljava/lang/String;)V
com.android.server.usage.UsageStatsService$BinderService.reportUserInteraction(Ljava/lang/String;I)V
com.android.server.usage.UsageStatsService$BinderService.setAppInactive(Ljava/lang/String;ZI)V
com.android.server.usage.UsageStatsService$BinderService.setAppStandbyBucket(Ljava/lang/String;II)V
com.android.server.usage.UsageStatsService$BinderService.setAppStandbyBuckets(Landroid/content/pm/ParceledListSlice;I)V
com.android.server.usage.UsageStatsService$BinderService.setEstimatedLaunchTime(Ljava/lang/String;JI)V
com.android.server.usage.UsageStatsService$BinderService.setEstimatedLaunchTimes(Landroid/content/pm/ParceledListSlice;I)V
com.android.server.usage.UsageStatsService$BinderService.unregisterAppUsageLimitObserver(ILjava/lang/String;)V
com.android.server.usage.UsageStatsService$BinderService.unregisterAppUsageObserver(ILjava/lang/String;)V
com.android.server.usage.UsageStatsService$BinderService.unregisterUsageSessionObserver(ILjava/lang/String;)V
com.android.server.usage.UsageStatsService$BinderService.unregisterUsageStatsWatcher(Lcom/samsung/android/app/usage/IUsageStatsWatcher;)V
com.android.server.dreams.DreamManagerService$BinderService.awaken()V
com.android.server.dreams.DreamManagerService$BinderService.dream()V
com.android.server.dreams.DreamManagerService$BinderService.finishSelf(Landroid/os/IBinder;Z)V
com.android.server.dreams.DreamManagerService$BinderService.forceAmbientDisplayEnabled(Z)V
com.android.server.dreams.DreamManagerService$BinderService.getDefaultDreamComponentForUser(I)Landroid/content/ComponentName;
com.android.server.dreams.DreamManagerService$BinderService.getDreamComponents()[Landroid/content/ComponentName;
com.android.server.dreams.DreamManagerService$BinderService.getDreamComponentsForUser(I)[Landroid/content/ComponentName;
com.android.server.dreams.DreamManagerService$BinderService.isDreaming()Z
com.android.server.dreams.DreamManagerService$BinderService.registerDreamOverlayService(Landroid/content/ComponentName;)V
com.android.server.dreams.DreamManagerService$BinderService.semStartDozing(Landroid/os/IBinder;IIIZ)V
com.android.server.dreams.DreamManagerService$BinderService.setDreamComponents([Landroid/content/ComponentName;)V
com.android.server.dreams.DreamManagerService$BinderService.setDreamComponentsForUser(I[Landroid/content/ComponentName;)V
com.android.server.dreams.DreamManagerService$BinderService.startDozing(Landroid/os/IBinder;II)V
com.android.server.dreams.DreamManagerService$BinderService.stopDozing(Landroid/os/IBinder;)V
com.android.server.dreams.DreamManagerService$BinderService.testDream(ILandroid/content/ComponentName;)V
com.android.server.pm.PersonaManagerService.CMFALock(I)V
com.android.server.pm.PersonaManagerService.CMFAUnLock(I)V
com.android.server.pm.PersonaManagerService.addAppPackageNameToAllowList(ILjava/util/List;)V
com.android.server.pm.PersonaManagerService.appliedPasswordPolicy(I)Z
com.android.server.pm.PersonaManagerService.bindCoreServiceAsUser(Landroid/content/ComponentName;Landroid/app/IApplicationThread;Landroid/os/IBinder;Landroid/content/Intent;Landroid/app/IServiceConnection;II)Z
com.android.server.pm.PersonaManagerService.broadcastIntentThroughPersona(Landroid/content/Intent;I)Z
com.android.server.pm.PersonaManagerService.clearAttributes(II)Z
com.android.server.pm.PersonaManagerService.getAdminComponentName(I)Landroid/content/ComponentName;
com.android.server.pm.PersonaManagerService.getAttributes(I)I
com.android.server.pm.PersonaManagerService.getContainerName(I)Ljava/lang/String;
com.android.server.pm.PersonaManagerService.getContainerOrder(I)I
com.android.server.pm.PersonaManagerService.getCustomResource(ILjava/lang/String;)Ljava/lang/String;
com.android.server.pm.PersonaManagerService.getDualDARProfile()Landroid/os/Bundle;
com.android.server.pm.PersonaManagerService.getECName(I)Ljava/lang/String;
com.android.server.pm.PersonaManagerService.getFocusedLauncherId()I
com.android.server.pm.PersonaManagerService.getFocusedUser()I
com.android.server.pm.PersonaManagerService.getFotaVersion()I
com.android.server.pm.PersonaManagerService.getKnoxIcon(Ljava/lang/String;Ljava/lang/String;I)[B
com.android.server.pm.PersonaManagerService.getKnoxSettingsCustomName(I)Ljava/lang/String;
com.android.server.pm.PersonaManagerService.getMoveToKnoxMenuList(I)Ljava/util/List;
com.android.server.pm.PersonaManagerService.getPersonaCacheValue(Ljava/lang/String;)Ljava/lang/String;
com.android.server.pm.PersonaManagerService.getPersonaUserHasBeenShutdownBefore(I)Z
com.android.server.pm.PersonaManagerService.getPersonalModeName(I)Ljava/lang/String;
com.android.server.pm.PersonaManagerService.getProfileName(I)Ljava/lang/String;
com.android.server.pm.PersonaManagerService.getProfiles(IZ)Ljava/util/List;
com.android.server.pm.PersonaManagerService.getRCPDataPolicy(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
com.android.server.pm.PersonaManagerService.getRCPDataPolicyForUser(ILjava/lang/String;Ljava/lang/String;)Ljava/lang/String;
com.android.server.pm.PersonaManagerService.getSecureFolderId()I
com.android.server.pm.PersonaManagerService.getSecureFolderName()Ljava/lang/String;
com.android.server.pm.PersonaManagerService.getSecureFolderPolicy(Ljava/lang/String;I)Ljava/util/List;
com.android.server.pm.PersonaManagerService.getSeparationConfigfromCache()Landroid/os/Bundle;
com.android.server.pm.PersonaManagerService.getWorkspaceName(Landroid/content/pm/UserInfo;Z)Ljava/lang/String;
com.android.server.pm.PersonaManagerService.hideMultiWindows(I)V
com.android.server.pm.PersonaManagerService.isContainerCorePackageUID(I)Z
com.android.server.pm.PersonaManagerService.isContainerService(I)Z
com.android.server.pm.PersonaManagerService.isExternalStorageEnabled(I)Z
com.android.server.pm.PersonaManagerService.isFOTAUpgrade()Z
com.android.server.pm.PersonaManagerService.isFotaUpgradeVersionChanged()Z
com.android.server.pm.PersonaManagerService.isKnoxProfileActivePasswordSufficientForParent(I)Z
com.android.server.pm.PersonaManagerService.isKnoxWindowExist(III)Z
com.android.server.pm.PersonaManagerService.isMoveFilesToContainerAllowed(I)Z
com.android.server.pm.PersonaManagerService.isMoveFilesToOwnerAllowed(I)Z
com.android.server.pm.PersonaManagerService.isPasswordSufficientAfterKnoxProfileUnification(I)Z
com.android.server.pm.PersonaManagerService.isPossibleAddAppsToContainer(Ljava/lang/String;I)Z
com.android.server.pm.PersonaManagerService.isShareClipboardDataToContainerAllowed(I)Z
com.android.server.pm.PersonaManagerService.isShareClipboardDataToOwnerAllowed(I)Z
com.android.server.pm.PersonaManagerService.postPwdChangeNotificationForDeviceOwner(I)V
com.android.server.pm.PersonaManagerService.refreshLockTimer(I)V
com.android.server.pm.PersonaManagerService.registerSystemPersonaObserver(Landroid/content/pm/ISystemPersonaObserver;)Z
com.android.server.pm.PersonaManagerService.sendProxyMessage(Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;)Landroid/os/Bundle;
com.android.server.pm.PersonaManagerService.sendRequestKeyStatus(I)V
com.android.server.pm.PersonaManagerService.setAppSeparationDefaultPolicy(I)V
com.android.server.pm.PersonaManagerService.setAttributes(II)Z
com.android.server.pm.PersonaManagerService.setDualDARProfile(Landroid/os/Bundle;)I
com.android.server.pm.PersonaManagerService.setFocusedLauncherId(I)V
com.android.server.pm.PersonaManagerService.setPackageSettingInstalled(Ljava/lang/String;ZI)Z
com.android.server.pm.PersonaManagerService.setPersonalModeName(ILjava/lang/String;)Z
com.android.server.pm.PersonaManagerService.setProfileName(ILjava/lang/String;)Z
com.android.server.pm.PersonaManagerService.setRCPDataPolicy(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z
com.android.server.pm.PersonaManagerService.setSecureFolderPolicy(Ljava/lang/String;Ljava/util/List;I)Z
com.android.server.pm.PersonaManagerService.startActivityThroughPersona(Landroid/content/Intent;)Z
com.android.server.pm.PersonaManagerService.startCountrySelectionActivity(Z)V
com.android.server.pm.PersonaManagerService.startTermsActivity()V
com.android.server.pm.PersonaManagerService.updatePersonaCache(Ljava/lang/String;Ljava/lang/String;)Z
com.android.server.pm.PersonaManagerService.updateProfileActivityTimeFromKnox(IJ)V
com.android.server.desktopmode.DesktopModeService.getDesktopModeKillPolicy()Landroid/os/Bundle;
com.android.server.desktopmode.DesktopModeService.getDesktopModeState()Lcom/samsung/android/desktopmode/SemDesktopModeState;
com.android.server.desktopmode.DesktopModeService.isAllowed()Z
com.android.server.desktopmode.DesktopModeService.isDesktopDockConnected()Z
com.android.server.desktopmode.DesktopModeService.isDesktopMode()Z
com.android.server.desktopmode.DesktopModeService.isDeviceConnected()Z
com.android.server.desktopmode.DesktopModeService.onSecuredAppLaunched(Landroid/os/IBinder;Ljava/lang/String;)V
com.android.server.desktopmode.DesktopModeService.registerBlocker(Lcom/samsung/android/desktopmode/IDesktopModeBlocker;Ljava/lang/String;)Z
com.android.server.desktopmode.DesktopModeService.registerDesktopLauncher(Lcom/samsung/android/desktopmode/IDesktopModeLauncher;)V
com.android.server.desktopmode.DesktopModeService.registerDesktopModeListener(Lcom/samsung/android/desktopmode/IDesktopModeListener;Ljava/lang/String;)Z
com.android.server.desktopmode.DesktopModeService.scheduleUpdateDesktopMode(Z)V
com.android.server.desktopmode.DesktopModeService.sendMessage(Landroid/os/Bundle;)Landroid/os/Bundle;
com.android.server.desktopmode.DesktopModeService.unregisterBlocker(Lcom/samsung/android/desktopmode/IDesktopModeBlocker;)Z
com.android.server.desktopmode.DesktopModeService.unregisterDesktopModeListener(Lcom/samsung/android/desktopmode/IDesktopModeListener;)Z
com.android.server.am.ActivityManagerService$PermissionController.checkPermission(Ljava/lang/String;II)Z
com.android.server.am.ActivityManagerService$PermissionController.getPackageUid(Ljava/lang/String;I)I
com.android.server.am.ActivityManagerService$PermissionController.getPackagesForUid(I)[Ljava/lang/String;
com.android.server.am.ActivityManagerService$PermissionController.isRuntimePermission(Ljava/lang/String;)Z
com.android.server.am.ActivityManagerService$PermissionController.noteOp(Ljava/lang/String;ILjava/lang/String;)I
com.android.server.StorageManagerService.addUserKeyAuth(II[B[B)V
com.android.server.StorageManagerService.clearUserKeyAuth(II[B[B)V
com.android.server.StorageManagerService.cpFileAtData(Ljava/lang/String;Ljava/lang/String;)Z
com.android.server.StorageManagerService.createSecureContainer(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;IZ)I
com.android.server.StorageManagerService.destroySecureContainer(Ljava/lang/String;Z)I
com.android.server.StorageManagerService.encryptExternalStorage(Z)I
com.android.server.StorageManagerService.finalizeSecureContainer(Ljava/lang/String;)I
com.android.server.StorageManagerService.finishMediaUpdate()V
com.android.server.StorageManagerService.fixPermissionsSecureContainer(Ljava/lang/String;ILjava/lang/String;)I
com.android.server.StorageManagerService.formatBySecApp(Ljava/lang/String;Ljava/lang/String;)V
com.android.server.StorageManagerService.getSecureContainerFilesystemPath(Ljava/lang/String;)Ljava/lang/String;
com.android.server.StorageManagerService.getSecureContainerList()[Ljava/lang/String;
com.android.server.StorageManagerService.getSecureContainerPath(Ljava/lang/String;)Ljava/lang/String;
com.android.server.StorageManagerService.getUsedF2fsFileNode()J
com.android.server.StorageManagerService.getVolumeState(Ljava/lang/String;)Ljava/lang/String;
com.android.server.StorageManagerService.isFbeSecure(I)Z
com.android.server.StorageManagerService.isPackageForeground(Ljava/lang/String;)Z
com.android.server.StorageManagerService.isSecureContainerMounted(Ljava/lang/String;)Z
com.android.server.StorageManagerService.isSensitive(Ljava/lang/String;)Z
com.android.server.StorageManagerService.mountBySecApp(Ljava/lang/String;Ljava/lang/String;)V
com.android.server.StorageManagerService.mountSdpMediaStorageCmd(I)Z
com.android.server.StorageManagerService.mountSecureContainer(Ljava/lang/String;Ljava/lang/String;IZ)I
com.android.server.StorageManagerService.mountVolume(Ljava/lang/String;)I
com.android.server.StorageManagerService.mvFileAtData(Ljava/lang/String;Ljava/lang/String;)Z
com.android.server.StorageManagerService.renameSecureContainer(Ljava/lang/String;Ljava/lang/String;)I
com.android.server.StorageManagerService.resizeSecureContainer(Ljava/lang/String;ILjava/lang/String;)I
com.android.server.StorageManagerService.semGetExternalSdCardHealthState()I
com.android.server.StorageManagerService.semGetExternalSdCardId()Ljava/lang/String;
com.android.server.StorageManagerService.setDualDARPolicyCmd(II)Z
com.android.server.StorageManagerService.setSdpPolicyCmd(I)Z
com.android.server.StorageManagerService.setSdpPolicyToPathCmd(ILjava/lang/String;)Z
com.android.server.StorageManagerService.setSensitive(ILjava/lang/String;)Z
com.android.server.StorageManagerService.startServiceSns()V
com.android.server.StorageManagerService.stopServiceSns()V
com.android.server.StorageManagerService.unlockUserKey(II[B[B)V
com.android.server.StorageManagerService.unmountBySecApp(Ljava/lang/String;Ljava/lang/String;)V
com.android.server.StorageManagerService.unmountSecureContainer(Ljava/lang/String;Z)I
com.android.server.StorageManagerService.unmountVolume(Ljava/lang/String;ZZ)V
com.android.server.StorageManagerService.waitForAsecScan()V
com.android.server.PersistentDataBlockService$1.isEnabled()Z
com.android.server.SEAMService.activateDomain(Z)I
com.android.server.SEAMService.addAppToContainer(Ljava/lang/String;[Ljava/lang/String;II)I
com.android.server.SEAMService.changeAppDomain(Ljava/lang/String;Z)I
com.android.server.SEAMService.createSEContainer()I
com.android.server.SEAMService.deActivateDomain()I
com.android.server.SEAMService.getAMSLog(Lcom/samsung/android/knox/ContextInfo;)Ljava/lang/String;
com.android.server.SEAMService.getAMSLogLevel(Lcom/samsung/android/knox/ContextInfo;)I
com.android.server.SEAMService.getAMSMode(Lcom/samsung/android/knox/ContextInfo;)I
com.android.server.SEAMService.getAVCLog(Lcom/samsung/android/knox/ContextInfo;)Ljava/lang/String;
com.android.server.SEAMService.getActivationStatus()I
com.android.server.SEAMService.getDataType(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;I)Ljava/lang/String;
com.android.server.SEAMService.getDomain(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;I)Ljava/lang/String;
com.android.server.SEAMService.getPackageNamesFromSEContainer(II)[Ljava/lang/String;
com.android.server.SEAMService.getSEAMSLog(Lcom/samsung/android/knox/ContextInfo;)Ljava/lang/String;
com.android.server.SEAMService.getSEContainerIDs()[I
com.android.server.SEAMService.getSEContainerIDsFromPackageName(Ljava/lang/String;I)[I
com.android.server.SEAMService.getSELinuxMode(Lcom/samsung/android/knox/ContextInfo;)I
com.android.server.SEAMService.getSepolicyVersion(Lcom/samsung/android/knox/ContextInfo;)Ljava/lang/String;
com.android.server.SEAMService.getSignatureFromCertificate([B)Ljava/lang/String;
com.android.server.SEAMService.getSignatureFromPackage(Ljava/lang/String;)Ljava/lang/String;
com.android.server.SEAMService.hasKnoxContainers()I
com.android.server.SEAMService.hasSEContainers()I
com.android.server.SEAMService.isAuthorized(IILjava/lang/String;Ljava/lang/String;)I
com.android.server.SEAMService.isSEAndroidLogDumpStateInclude(Lcom/samsung/android/knox/ContextInfo;)I
com.android.server.SEAMService.isSEPolicyAutoUpdateEnabled(Lcom/samsung/android/knox/ContextInfo;)I
com.android.server.SEAMService.loadContainerSetting(Ljava/lang/String;)I
com.android.server.SEAMService.relabelAppDir(Ljava/lang/String;)I
com.android.server.SEAMService.relabelData(Lcom/samsung/android/knox/ContextInfo;)I
com.android.server.SEAMService.removeAppFromContainer(Ljava/lang/String;[Ljava/lang/String;II)I
com.android.server.SEAMService.removeSEContainer(I)I
com.android.server.SEAMService.setAMSLogLevel(Lcom/samsung/android/knox/ContextInfo;I)I
com.android.server.SEAMService.setSEAndroidLogDumpStateInclude(Lcom/samsung/android/knox/ContextInfo;Z)I
com.android.server.DualAppManagerService.getAllInstalledWhitelistedPackages()Ljava/util/List;
com.android.server.DualAppManagerService.getAllWhitelistedPackages()[Ljava/lang/String;
com.android.server.DualAppManagerService.isInstalledWhitelistedPackage(Ljava/lang/String;)Z
com.android.server.DualAppManagerService.updateDualAppData(Ljava/lang/String;ILandroid/os/Bundle;)Landroid/os/Bundle;
com.android.server.location.LocationManagerService.addGnssAntennaInfoListener(Landroid/location/IGnssAntennaInfoListener;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.server.location.LocationManagerService.addGnssMeasurementsListener(Landroid/location/GnssMeasurementRequest;Landroid/location/IGnssMeasurementsListener;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.server.location.LocationManagerService.addGnssNavigationMessageListener(Landroid/location/IGnssNavigationMessageListener;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.server.location.LocationManagerService.addProviderRequestListener(Landroid/location/provider/IProviderRequestListener;)V
com.android.server.location.LocationManagerService.addTestProvider(Ljava/lang/String;Landroid/location/provider/ProviderProperties;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;)V
com.android.server.location.LocationManagerService.flushGnssBatch()V
com.android.server.location.LocationManagerService.geocoderIsPresent()Z
com.android.server.location.LocationManagerService.getAllProviders()Ljava/util/List;
com.android.server.location.LocationManagerService.getBackgroundThrottlingWhitelist()[Ljava/lang/String;
com.android.server.location.LocationManagerService.getBestProvider(Landroid/location/Criteria;Z)Ljava/lang/String;
com.android.server.location.LocationManagerService.getCurrentLocation(Ljava/lang/String;Landroid/location/LocationRequest;Landroid/location/ILocationCallback;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/os/ICancellationSignal;
com.android.server.location.LocationManagerService.getExtraLocationControllerPackage()Ljava/lang/String;
com.android.server.location.LocationManagerService.getFromLocation(DDILandroid/location/GeocoderParams;Landroid/location/IGeocodeListener;)V
com.android.server.location.LocationManagerService.getFromLocationName(Ljava/lang/String;DDDDILandroid/location/GeocoderParams;Landroid/location/IGeocodeListener;)V
com.android.server.location.LocationManagerService.getGPSUsingApps()Ljava/util/Map;
com.android.server.location.LocationManagerService.getGnssAntennaInfos()Ljava/util/List;
com.android.server.location.LocationManagerService.getGnssBatchSize()I
com.android.server.location.LocationManagerService.getGnssCapabilities()Landroid/location/GnssCapabilities;
com.android.server.location.LocationManagerService.getGnssHardwareModelName()Ljava/lang/String;
com.android.server.location.LocationManagerService.getGnssTimeMillis()Landroid/location/LocationTime;
com.android.server.location.LocationManagerService.getGnssYearOfHardware()I
com.android.server.location.LocationManagerService.getIgnoreSettingsAllowlist()Landroid/os/PackageTagsList;
com.android.server.location.LocationManagerService.getLastLocation(Ljava/lang/String;Landroid/location/LastLocationRequest;Ljava/lang/String;Ljava/lang/String;)Landroid/location/Location;
com.android.server.location.LocationManagerService.getProviderPackages(Ljava/lang/String;)Ljava/util/List;
com.android.server.location.LocationManagerService.getProviderProperties(Ljava/lang/String;)Landroid/location/provider/ProviderProperties;
com.android.server.location.LocationManagerService.getProviders(Landroid/location/Criteria;Z)Ljava/util/List;
com.android.server.location.LocationManagerService.hasProvider(Ljava/lang/String;)Z
com.android.server.location.LocationManagerService.injectGnssMeasurementCorrections(Landroid/location/GnssMeasurementCorrections;)V
com.android.server.location.LocationManagerService.injectLocation(Landroid/location/Location;)V
com.android.server.location.LocationManagerService.isAdasGnssLocationEnabledForUser(I)Z
com.android.server.location.LocationManagerService.isAutomotiveGnssSuspended()Z
com.android.server.location.LocationManagerService.isExtraLocationControllerPackageEnabled()Z
com.android.server.location.LocationManagerService.isLocationEnabledForUser(I)Z
com.android.server.location.LocationManagerService.isProviderEnabledForUser(Ljava/lang/String;I)Z
com.android.server.location.LocationManagerService.isProviderPackage(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z
com.android.server.location.LocationManagerService.notifyNSFLP(Landroid/os/Message;)V
com.android.server.location.LocationManagerService.onFreezeStateChanged(ZI)V
com.android.server.location.LocationManagerService.registerGnssNmeaCallback(Landroid/location/IGnssNmeaListener;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.server.location.LocationManagerService.registerGnssStatusCallback(Landroid/location/IGnssStatusListener;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.server.location.LocationManagerService.registerLocationListener(Ljava/lang/String;Landroid/location/LocationRequest;Landroid/location/ILocationListener;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.server.location.LocationManagerService.registerLocationPendingIntent(Ljava/lang/String;Landroid/location/LocationRequest;Landroid/app/PendingIntent;Ljava/lang/String;Ljava/lang/String;)V
com.android.server.location.LocationManagerService.removeGeofence(Landroid/app/PendingIntent;)V
com.android.server.location.LocationManagerService.removeGnssAntennaInfoListener(Landroid/location/IGnssAntennaInfoListener;)V
com.android.server.location.LocationManagerService.removeGnssMeasurementsListener(Landroid/location/IGnssMeasurementsListener;)V
com.android.server.location.LocationManagerService.removeGnssNavigationMessageListener(Landroid/location/IGnssNavigationMessageListener;)V
com.android.server.location.LocationManagerService.removeProviderRequestListener(Landroid/location/provider/IProviderRequestListener;)V
com.android.server.location.LocationManagerService.removeTestProvider(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.server.location.LocationManagerService.requestGeofence(Landroid/location/Geofence;Landroid/app/PendingIntent;Ljava/lang/String;Ljava/lang/String;)V
com.android.server.location.LocationManagerService.requestListenerFlush(Ljava/lang/String;Landroid/location/ILocationListener;I)V
com.android.server.location.LocationManagerService.requestPendingIntentFlush(Ljava/lang/String;Landroid/app/PendingIntent;I)V
com.android.server.location.LocationManagerService.sendExtraCommand(Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;)V
com.android.server.location.LocationManagerService.setAdasGnssLocationEnabledForUser(ZI)V
com.android.server.location.LocationManagerService.setAutomotiveGnssSuspended(Z)V
com.android.server.location.LocationManagerService.setExtraLocationControllerPackage(Ljava/lang/String;)V
com.android.server.location.LocationManagerService.setExtraLocationControllerPackageEnabled(Z)V
com.android.server.location.LocationManagerService.setLocationEnabledForUser(ZI)V
com.android.server.location.LocationManagerService.setTestProviderEnabled(Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;)V
com.android.server.location.LocationManagerService.setTestProviderLocation(Ljava/lang/String;Landroid/location/Location;Ljava/lang/String;Ljava/lang/String;)V
com.android.server.location.LocationManagerService.startGnssBatch(JLandroid/location/ILocationListener;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.server.location.LocationManagerService.stopGnssBatch()V
com.android.server.location.LocationManagerService.unregisterGnssNmeaCallback(Landroid/location/IGnssNmeaListener;)V
com.android.server.location.LocationManagerService.unregisterGnssStatusCallback(Landroid/location/IGnssStatusListener;)V
com.android.server.location.LocationManagerService.unregisterLocationListener(Landroid/location/ILocationListener;)V
com.android.server.location.LocationManagerService.unregisterLocationPendingIntent(Landroid/app/PendingIntent;)V
com.android.server.ssrm.CustomFrequencyManagerService.acquire(IILjava/lang/String;I[I)V
com.android.server.ssrm.CustomFrequencyManagerService.addDvfsLockAllowedUid(I)I
com.android.server.ssrm.CustomFrequencyManagerService.checkHintExist(I)Z
com.android.server.ssrm.CustomFrequencyManagerService.checkResourceExist(I)Z
com.android.server.ssrm.CustomFrequencyManagerService.checkSysfsIdExist(I)Z
com.android.server.ssrm.CustomFrequencyManagerService.disableGpisHint()V
com.android.server.ssrm.CustomFrequencyManagerService.enableInteractionHint(Z)V
com.android.server.ssrm.CustomFrequencyManagerService.getBatteryRemainingUsageTime(I)I
com.android.server.ssrm.CustomFrequencyManagerService.getGameThrottlingLevel()I
com.android.server.ssrm.CustomFrequencyManagerService.getProcessCpuUsage([I)Landroid/os/CpuTrackerInfo;
com.android.server.ssrm.CustomFrequencyManagerService.getSsrmStatus(I)I
com.android.server.ssrm.CustomFrequencyManagerService.getSupportedFrequency(II)[I
com.android.server.ssrm.CustomFrequencyManagerService.mpdUpdate(I)V
com.android.server.ssrm.CustomFrequencyManagerService.readFile(Ljava/lang/String;C)Ljava/lang/String;
com.android.server.ssrm.CustomFrequencyManagerService.readSysfs(I)Ljava/lang/String;
com.android.server.ssrm.CustomFrequencyManagerService.release(II)V
com.android.server.ssrm.CustomFrequencyManagerService.removeDvfsLockAllowedUid(I)Z
com.android.server.ssrm.CustomFrequencyManagerService.requestCPUUpdate(II)V
com.android.server.ssrm.CustomFrequencyManagerService.requestFreezeSlowdown(IZLjava/lang/String;)I
com.android.server.ssrm.CustomFrequencyManagerService.requestGpis(III)V
com.android.server.ssrm.CustomFrequencyManagerService.requestMpParameterUpdate(Ljava/lang/String;)V
com.android.server.ssrm.CustomFrequencyManagerService.restrictApp(Ljava/lang/String;II)V
com.android.server.ssrm.CustomFrequencyManagerService.sendCommandToSSRM(Ljava/lang/String;Ljava/lang/String;)V
com.android.server.ssrm.CustomFrequencyManagerService.sendDrawingTid(III)V
com.android.server.ssrm.CustomFrequencyManagerService.sendDrawingTime(IIJ)V
com.android.server.ssrm.CustomFrequencyManagerService.setFrozenTime(I)V
com.android.server.ssrm.CustomFrequencyManagerService.setGameFps(I)V
com.android.server.ssrm.CustomFrequencyManagerService.setGamePowerSaving(Z)V
com.android.server.ssrm.CustomFrequencyManagerService.setGameTouchParam(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.server.ssrm.CustomFrequencyManagerService.setGameTurboMode(Z)V
com.android.server.ssrm.CustomFrequencyManagerService.setGpisHint(Z)V
com.android.server.ssrm.CustomFrequencyManagerService.supportVRTemperaturesInformation(Ljava/lang/String;II)[F
com.android.server.ssrm.CustomFrequencyManagerService.unsetGameTouchParam()V
com.android.server.ssrm.CustomFrequencyManagerService.writeSysfs(ILjava/lang/String;)V
com.android.server.clipboard.ClipboardService$ClipboardImpl.addPrimaryClipChangedListener(Landroid/content/IOnPrimaryClipChangedListener;Ljava/lang/String;I)V
com.android.server.clipboard.ClipboardService$ClipboardImpl.clearPrimaryClip(Ljava/lang/String;I)V
com.android.server.clipboard.ClipboardService$ClipboardImpl.getPrimaryClip(Ljava/lang/String;I)Landroid/content/ClipData;
com.android.server.clipboard.ClipboardService$ClipboardImpl.getPrimaryClipDescription(Ljava/lang/String;I)Landroid/content/ClipDescription;
com.android.server.clipboard.ClipboardService$ClipboardImpl.getPrimaryClipSource(Ljava/lang/String;I)Ljava/lang/String;
com.android.server.clipboard.ClipboardService$ClipboardImpl.hasClipboardText(Ljava/lang/String;I)Z
com.android.server.clipboard.ClipboardService$ClipboardImpl.hasPrimaryClip(Ljava/lang/String;I)Z
com.android.server.clipboard.ClipboardService$ClipboardImpl.removePrimaryClipChangedListener(Landroid/content/IOnPrimaryClipChangedListener;Ljava/lang/String;I)V
com.android.server.clipboard.ClipboardService$ClipboardImpl.setPrimaryClip(Landroid/content/ClipData;Ljava/lang/String;I)V
com.android.server.clipboard.ClipboardService$ClipboardImpl.setPrimaryClipAsPackage(Landroid/content/ClipData;Ljava/lang/String;ILjava/lang/String;)V
com.android.server.ReactiveService.getErrorCode()I
com.android.server.ReactiveService.getFlag(I)I
com.android.server.ReactiveService.getRandom()[B
com.android.server.ReactiveService.getServiceSupport()I
com.android.server.ReactiveService.getString()Ljava/lang/String;
com.android.server.ReactiveService.removeString()I
com.android.server.ReactiveService.sessionAccept([B)[B
com.android.server.ReactiveService.sessionComplete([B)I
com.android.server.ReactiveService.setFlag(IILjava/lang/String;)I
com.android.server.ReactiveService.setString(Ljava/lang/String;)I
com.android.server.ReactiveService.verify(Ljava/lang/String;I)I
com.android.server.asks.ASKSManagerService.applyScpmPolicyFromApp()V
com.android.server.asks.ASKSManagerService.checkASKSTarget(I)[Ljava/lang/String;
com.android.server.asks.ASKSManagerService.checkDeletableListForASKS()V
com.android.server.asks.ASKSManagerService.checkFollowingLegitimateWay(Ljava/lang/String;I)Z
com.android.server.asks.ASKSManagerService.checkRestrictedPermission(Ljava/lang/String;Ljava/lang/String;)I
com.android.server.asks.ASKSManagerService.checkUnknownSourcePackage(Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Landroid/content/pm/Signature;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;)I
com.android.server.asks.ASKSManagerService.clearASKSruleForRemovedPackage(Ljava/lang/String;)V
com.android.server.asks.ASKSManagerService.getIMEIList()Ljava/util/List;
com.android.server.asks.ASKSManagerService.getSEInfo(Ljava/lang/String;)[B
com.android.server.asks.ASKSManagerService.getUNvalueForASKS()Ljava/lang/String;
com.android.server.asks.ASKSManagerService.getUnknownAppList()Ljava/util/List;
com.android.server.asks.ASKSManagerService.isTrustedStore(Ljava/lang/String;)Z
com.android.server.asks.ASKSManagerService.isUnknownApps(Ljava/lang/String;[Landroid/content/pm/Signature;)Z
com.android.server.asks.ASKSManagerService.postASKSsetup(Ljava/lang/String;Ljava/lang/String;I)V
com.android.server.asks.ASKSManagerService.readASKSFiles(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
com.android.server.asks.ASKSManagerService.setTrustTimebyStatusChanged()V
com.android.server.asks.ASKSManagerService.systemReady()V
com.android.server.asks.ASKSManagerService.verifyASKStokenForPackage(Ljava/lang/String;Ljava/lang/String;J[Landroid/content/pm/Signature;Ljava/lang/String;Ljava/lang/String;Z)I
com.android.server.wm.WindowManagerService.addKeyguardLockedStateListener(Lcom/android/internal/policy/IKeyguardLockedStateListener;)V
com.android.server.wm.WindowManagerService.addShellRoot(ILandroid/view/IWindow;I)Landroid/view/SurfaceControl;
com.android.server.wm.WindowManagerService.addWindowToken(Landroid/os/IBinder;IILandroid/os/Bundle;)V
com.android.server.wm.WindowManagerService.attachToDisplayContent(Landroid/os/IBinder;I)Landroid/content/res/Configuration;
com.android.server.wm.WindowManagerService.attachWindowContextToDisplayArea(Landroid/os/IBinder;IILandroid/os/Bundle;)Landroid/content/res/Configuration;
com.android.server.wm.WindowManagerService.attachWindowContextToWindowToken(Landroid/os/IBinder;Landroid/os/IBinder;)V
com.android.server.wm.WindowManagerService.changeDisplayScale(Landroid/view/MagnificationSpec;ZLandroid/view/IInputFilter;)V
com.android.server.wm.WindowManagerService.clearForcedDisplayDensityForUser(II)V
com.android.server.wm.WindowManagerService.clearForcedDisplaySize(I)V
com.android.server.wm.WindowManagerService.clearForcedDisplaySizeDensity(I)V
com.android.server.wm.WindowManagerService.clearKeyCustomizationInfoByAction(III)V
com.android.server.wm.WindowManagerService.clearKeyCustomizationInfoByKeyCode(II)V
com.android.server.wm.WindowManagerService.clearTaskTransitionSpec()V
com.android.server.wm.WindowManagerService.clearWindowContentFrameStats(Landroid/os/IBinder;)Z
com.android.server.wm.WindowManagerService.closeSystemDialogs(Ljava/lang/String;)V
com.android.server.wm.WindowManagerService.closeSystemDialogsInDisplay(Ljava/lang/String;I)V
com.android.server.wm.WindowManagerService.createInputConsumer(Landroid/os/IBinder;Ljava/lang/String;ILandroid/view/InputChannel;)V
com.android.server.wm.WindowManagerService.destroyInputConsumer(Ljava/lang/String;I)Z
com.android.server.wm.WindowManagerService.detachWindowContextFromWindowContainer(Landroid/os/IBinder;)V
com.android.server.wm.WindowManagerService.disableKeyguard(Landroid/os/IBinder;Ljava/lang/String;I)V
com.android.server.wm.WindowManagerService.dismissKeyguard(Lcom/android/internal/policy/IKeyguardDismissCallback;Ljava/lang/CharSequence;)V
com.android.server.wm.WindowManagerService.dispatchSPenGestureEvent(II[Landroid/view/InputEvent;Landroid/os/IBinder;)V
com.android.server.wm.WindowManagerService.dispatchSmartClipRemoteRequest(IILcom/samsung/android/content/smartclip/SmartClipRemoteRequestInfo;Landroid/os/IBinder;)V
com.android.server.wm.WindowManagerService.enableScreenIfNeeded()V
com.android.server.wm.WindowManagerService.endProlongedAnimations()V
com.android.server.wm.WindowManagerService.exitKeyguardSecurely(Landroid/view/IOnKeyguardExitResult;)V
com.android.server.wm.WindowManagerService.freezeDisplayRotation(II)V
com.android.server.wm.WindowManagerService.freezeRotation(I)V
com.android.server.wm.WindowManagerService.getAnimationScale(I)F
com.android.server.wm.WindowManagerService.getAnimationScales()[F
com.android.server.wm.WindowManagerService.getAppContinuityMode(ILjava/lang/String;Landroid/content/pm/ActivityInfo;)I
com.android.server.wm.WindowManagerService.getBackupKeyCustomizationInfoList()Ljava/util/List;
com.android.server.wm.WindowManagerService.getBaseDisplayDensity(I)I
com.android.server.wm.WindowManagerService.getBaseDisplaySize(ILandroid/graphics/Point;)V
com.android.server.wm.WindowManagerService.getCurrentAnimatorScale()F
com.android.server.wm.WindowManagerService.getCurrentImeTouchRegion()Landroid/graphics/Region;
com.android.server.wm.WindowManagerService.getDefaultDisplayRotation()I
com.android.server.wm.WindowManagerService.getDisplayImePolicy(I)I
com.android.server.wm.WindowManagerService.getDockedStackSide()I
com.android.server.wm.WindowManagerService.getFullScreenAppsSupportMode()I
com.android.server.wm.WindowManagerService.getImeDisplayId()I
com.android.server.wm.WindowManagerService.getInitialDisplayDensity(I)I
com.android.server.wm.WindowManagerService.getInitialDisplaySize(ILandroid/graphics/Point;)V
com.android.server.wm.WindowManagerService.getKeyCustomizationInfo(III)Lcom/samsung/android/view/SemWindowManager$KeyCustomizationInfo;
com.android.server.wm.WindowManagerService.getKeyCustomizationInfoByPackage(Ljava/lang/String;II)Lcom/samsung/android/view/SemWindowManager$KeyCustomizationInfo;
com.android.server.wm.WindowManagerService.getLastKeyCustomizationInfo(II)Lcom/samsung/android/view/SemWindowManager$KeyCustomizationInfo;
com.android.server.wm.WindowManagerService.getMaxAspectRatioPolicy(Ljava/lang/String;I)I
com.android.server.wm.WindowManagerService.getMaxAspectRatioPolicyByComponent(Landroid/content/ComponentName;I)I
com.android.server.wm.WindowManagerService.getNavBarPosition(I)I
com.android.server.wm.WindowManagerService.getPossibleDisplayInfo(ILjava/lang/String;)Ljava/util/List;
com.android.server.wm.WindowManagerService.getPreferredOptionsPanelGravity(I)I
com.android.server.wm.WindowManagerService.getRemoveContentMode(I)I
com.android.server.wm.WindowManagerService.getRotationLockOrientation(I)I
com.android.server.wm.WindowManagerService.getStableInsets(ILandroid/graphics/Rect;)V
com.android.server.wm.WindowManagerService.getSupportedDisplayHashAlgorithms()[Ljava/lang/String;
com.android.server.wm.WindowManagerService.getSupportsFlexPanel(ILjava/lang/String;)I
com.android.server.wm.WindowManagerService.getTopFocusedDisplayId()I
com.android.server.wm.WindowManagerService.getUserDisplayDensity()I
com.android.server.wm.WindowManagerService.getUserDisplaySize(Landroid/graphics/Point;)V
com.android.server.wm.WindowManagerService.getVisibleWindowInfo()Ljava/util/List;
com.android.server.wm.WindowManagerService.getVisibleWindowInfoList()Ljava/util/List;
com.android.server.wm.WindowManagerService.getWindowContentFrameStats(Landroid/os/IBinder;)Landroid/view/WindowContentFrameStats;
com.android.server.wm.WindowManagerService.getWindowInsets(Landroid/view/WindowManager$LayoutParams;ILandroid/view/InsetsState;)Z
com.android.server.wm.WindowManagerService.getWindowingMode(I)I
com.android.server.wm.WindowManagerService.hasNavigationBar(I)Z
com.android.server.wm.WindowManagerService.hideTransientBars(I)V
com.android.server.wm.WindowManagerService.holdLock(Landroid/os/IBinder;I)V
com.android.server.wm.WindowManagerService.isDisplayRotationFrozen(I)Z
com.android.server.wm.WindowManagerService.isFolded()Z
com.android.server.wm.WindowManagerService.isKeyguardLocked()Z
com.android.server.wm.WindowManagerService.isKeyguardSecure(I)Z
com.android.server.wm.WindowManagerService.isKeyguardShowingAndNotOccluded()Z
com.android.server.wm.WindowManagerService.isLayerTracing()Z
com.android.server.wm.WindowManagerService.isMetaKeyEventRequested(Landroid/content/ComponentName;)Z
com.android.server.wm.WindowManagerService.isRotationFrozen()Z
com.android.server.wm.WindowManagerService.isSafeModeEnabled()Z
com.android.server.wm.WindowManagerService.isSystemKeyEventRequested(ILandroid/content/ComponentName;)Z
com.android.server.wm.WindowManagerService.isTableMode()Z
com.android.server.wm.WindowManagerService.isTaskSnapshotSupported()Z
com.android.server.wm.WindowManagerService.isViewServerRunning()Z
com.android.server.wm.WindowManagerService.isWindowToken(Landroid/os/IBinder;)Z
com.android.server.wm.WindowManagerService.isWindowTraceEnabled()Z
com.android.server.wm.WindowManagerService.lockNow(Landroid/os/Bundle;)V
com.android.server.wm.WindowManagerService.mirrorDisplay(ILandroid/view/SurfaceControl;)Z
com.android.server.wm.WindowManagerService.mirrorWallpaperSurface(I)Landroid/view/SurfaceControl;
com.android.server.wm.WindowManagerService.moveDisplayToTop(ILjava/lang/String;)V
com.android.server.wm.WindowManagerService.openSession(Landroid/view/IWindowSessionCallback;)Landroid/view/IWindowSession;
com.android.server.wm.WindowManagerService.overridePendingAppTransitionMultiThumbFuture(Landroid/view/IAppTransitionAnimationSpecsFuture;Landroid/os/IRemoteCallback;ZI)V
com.android.server.wm.WindowManagerService.overridePendingAppTransitionRemote(Landroid/view/RemoteAnimationAdapter;I)V
com.android.server.wm.WindowManagerService.putKeyCustomizationInfo(Lcom/samsung/android/view/SemWindowManager$KeyCustomizationInfo;)V
com.android.server.wm.WindowManagerService.reenableKeyguard(Landroid/os/IBinder;I)V
com.android.server.wm.WindowManagerService.refreshScreenCaptureDisabled()V
com.android.server.wm.WindowManagerService.registerCrossWindowBlurEnabledListener(Landroid/view/ICrossWindowBlurEnabledListener;)Z
com.android.server.wm.WindowManagerService.registerDisplayFoldListener(Landroid/view/IDisplayFoldListener;)V
com.android.server.wm.WindowManagerService.registerDisplayWindowListener(Landroid/view/IDisplayWindowListener;)[I
com.android.server.wm.WindowManagerService.registerOneHandOpWatcher(Lcom/samsung/android/onehandop/IOneHandOpWatcher;)V
com.android.server.wm.WindowManagerService.registerPinnedTaskListener(ILandroid/view/IPinnedTaskListener;)V
com.android.server.wm.WindowManagerService.registerShortcutKey(JLcom/android/internal/policy/IShortcutService;)V
com.android.server.wm.WindowManagerService.registerSystemGestureExclusionListener(Landroid/view/ISystemGestureExclusionListener;I)V
com.android.server.wm.WindowManagerService.registerTaskFpsCallback(ILandroid/window/ITaskFpsCallback;)V
com.android.server.wm.WindowManagerService.registerWallpaperVisibilityListener(Landroid/view/IWallpaperVisibilityListener;I)Z
com.android.server.wm.WindowManagerService.removeKeyCustomizationInfo(III)V
com.android.server.wm.WindowManagerService.removeKeyCustomizationInfoByPackage(Ljava/lang/String;II)V
com.android.server.wm.WindowManagerService.removeKeyguardLockedStateListener(Lcom/android/internal/policy/IKeyguardLockedStateListener;)V
com.android.server.wm.WindowManagerService.removeRotationWatcher(Landroid/view/IRotationWatcher;)V
com.android.server.wm.WindowManagerService.removeWindowToken(Landroid/os/IBinder;I)V
com.android.server.wm.WindowManagerService.requestAppKeyboardShortcuts(Lcom/android/internal/os/IResultReceiver;I)V
com.android.server.wm.WindowManagerService.requestAssistScreenshot(Landroid/app/IAssistDataReceiver;)Z
com.android.server.wm.WindowManagerService.requestDeviceFolded(Z)V
com.android.server.wm.WindowManagerService.requestMetaKeyEvent(Landroid/content/ComponentName;Z)V
com.android.server.wm.WindowManagerService.requestScrollCapture(ILandroid/os/IBinder;ILandroid/view/IScrollCaptureResponseListener;)V
com.android.server.wm.WindowManagerService.requestSystemKeyEvent(ILandroid/content/ComponentName;Z)Z
com.android.server.wm.WindowManagerService.restoreKeyCustomizationInfo(Ljava/util/List;)V
com.android.server.wm.WindowManagerService.saveWindowTraceToFile()V
com.android.server.wm.WindowManagerService.screenshotWallpaper()Landroid/graphics/Bitmap;
com.android.server.wm.WindowManagerService.setAnimationScale(IF)V
com.android.server.wm.WindowManagerService.setAnimationScales([F)V
com.android.server.wm.WindowManagerService.setAppContinuityMode(ILjava/lang/String;Z)V
com.android.server.wm.WindowManagerService.setDeadzoneHole(Landroid/os/Bundle;)V
com.android.server.wm.WindowManagerService.setDisplayColorToSystemProperties(I)V
com.android.server.wm.WindowManagerService.setDisplayHashThrottlingEnabled(Z)V
com.android.server.wm.WindowManagerService.setDisplayImePolicy(II)V
com.android.server.wm.WindowManagerService.setDisplayWindowInsetsController(ILandroid/view/IDisplayWindowInsetsController;)V
com.android.server.wm.WindowManagerService.setDisplayWindowRotationController(Landroid/view/IDisplayWindowRotationController;)V
com.android.server.wm.WindowManagerService.setDockedTaskDividerTouchRegion(Landroid/graphics/Rect;)V
com.android.server.wm.WindowManagerService.setDragSurfaceToOverlay(Z)V
com.android.server.wm.WindowManagerService.setEventDispatching(Z)V
com.android.server.wm.WindowManagerService.setFixedToUserRotation(II)V
com.android.server.wm.WindowManagerService.setForcedDisplayDensityForUser(III)V
com.android.server.wm.WindowManagerService.setForcedDisplayScalingMode(II)V
com.android.server.wm.WindowManagerService.setForcedDisplaySize(III)V
com.android.server.wm.WindowManagerService.setForcedDisplaySizeDensity(IIIIZI)V
com.android.server.wm.WindowManagerService.setForcedDisplaySizeDensityWithInfo(Lcom/samsung/android/view/MultiResolutionChangeRequestInfo;)V
com.android.server.wm.WindowManagerService.setIgnoreOrientationRequest(IZ)V
com.android.server.wm.WindowManagerService.setInTouchMode(Z)V
com.android.server.wm.WindowManagerService.setLayerTracing(Z)V
com.android.server.wm.WindowManagerService.setLayerTracingFlags(I)V
com.android.server.wm.WindowManagerService.setMaxAspectRatioPolicy(Ljava/lang/String;IZI)V
com.android.server.wm.WindowManagerService.setNavBarVirtualKeyHapticFeedbackEnabled(Z)V
com.android.server.wm.WindowManagerService.setPendingIntentAfterUnlock(Landroid/app/PendingIntent;Landroid/content/Intent;)V
com.android.server.wm.WindowManagerService.setRecentsAppBehindSystemBars(Z)V
com.android.server.wm.WindowManagerService.setRecentsVisibility(Z)V
com.android.server.wm.WindowManagerService.setRemoveContentMode(II)V
com.android.server.wm.WindowManagerService.setShellRootAccessibilityWindow(IILandroid/view/IWindow;)V
com.android.server.wm.WindowManagerService.setShouldShowSystemDecors(IZ)V
com.android.server.wm.WindowManagerService.setShouldShowWithInsecureKeyguard(IZ)V
com.android.server.wm.WindowManagerService.setStrictModeVisualIndicatorPreference(Ljava/lang/String;)V
com.android.server.wm.WindowManagerService.setSupportsFlexPanel(ILjava/lang/String;Z)V
com.android.server.wm.WindowManagerService.setSwitchingUser(Z)V
com.android.server.wm.WindowManagerService.setTableModeEnabled(Z)V
com.android.server.wm.WindowManagerService.setTaskSnapshotEnabled(Z)V
com.android.server.wm.WindowManagerService.setTaskTransitionSpec(Landroid/view/TaskTransitionSpec;)V
com.android.server.wm.WindowManagerService.setWindowingMode(II)V
com.android.server.wm.WindowManagerService.shouldShowSystemDecors(I)Z
com.android.server.wm.WindowManagerService.shouldShowWithInsecureKeyguard(I)Z
com.android.server.wm.WindowManagerService.showGlobalActions()V
com.android.server.wm.WindowManagerService.showStrictModeViolation(Z)V
com.android.server.wm.WindowManagerService.snapshotTaskForRecents(I)Landroid/graphics/Bitmap;
com.android.server.wm.WindowManagerService.startFreezingScreen(II)V
com.android.server.wm.WindowManagerService.startLockscreenFingerprintAuth()V
com.android.server.wm.WindowManagerService.startSurfaceAnimation(Landroid/os/IBinder;Ljava/lang/String;)V
com.android.server.wm.WindowManagerService.startViewServer(I)Z
com.android.server.wm.WindowManagerService.startWindowTrace()V
com.android.server.wm.WindowManagerService.stopFreezingScreen()V
com.android.server.wm.WindowManagerService.stopViewServer()Z
com.android.server.wm.WindowManagerService.stopWindowTrace()V
com.android.server.wm.WindowManagerService.syncInputTransactions(Z)V
com.android.server.wm.WindowManagerService.takeScreenshotToTargetWindow(IIZLandroid/graphics/Rect;IIZZ)Lcom/samsung/android/view/ScreenshotResult;
com.android.server.wm.WindowManagerService.thawDisplayRotation(I)V
com.android.server.wm.WindowManagerService.thawRotation()V
com.android.server.wm.WindowManagerService.unregisterCrossWindowBlurEnabledListener(Landroid/view/ICrossWindowBlurEnabledListener;)V
com.android.server.wm.WindowManagerService.unregisterDisplayFoldListener(Landroid/view/IDisplayFoldListener;)V
com.android.server.wm.WindowManagerService.unregisterDisplayWindowListener(Landroid/view/IDisplayWindowListener;)V
com.android.server.wm.WindowManagerService.unregisterOneHandOpWatcher(Lcom/samsung/android/onehandop/IOneHandOpWatcher;)V
com.android.server.wm.WindowManagerService.unregisterSystemGestureExclusionListener(Landroid/view/ISystemGestureExclusionListener;I)V
com.android.server.wm.WindowManagerService.unregisterTaskFpsCallback(Landroid/window/ITaskFpsCallback;)V
com.android.server.wm.WindowManagerService.unregisterWallpaperVisibilityListener(Landroid/view/IWallpaperVisibilityListener;I)V
com.android.server.wm.WindowManagerService.updateDisplayWindowRequestedVisibilities(ILandroid/view/InsetsVisibilities;)V
com.android.server.wm.WindowManagerService.updateRotation(ZZ)V
com.android.server.wm.WindowManagerService.updateStaticPrivacyIndicatorBounds(I[Landroid/graphics/Rect;)V
com.android.server.wm.WindowManagerService.useBLAST()Z
com.android.server.wm.WindowManagerService.verifyDisplayHash(Landroid/view/displayhash/DisplayHash;)Landroid/view/displayhash/VerifiedDisplayHash;
com.android.server.wm.WindowManagerService.watchRotation(Landroid/view/IRotationWatcher;I)I
com.android.server.content.ContentService.addPeriodicSync(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;J)V
com.android.server.content.ContentService.addStatusChangeListener(ILandroid/content/ISyncStatusObserver;)V
com.android.server.content.ContentService.cancelRequest(Landroid/content/SyncRequest;)V
com.android.server.content.ContentService.cancelSync(Landroid/accounts/Account;Ljava/lang/String;Landroid/content/ComponentName;)V
com.android.server.content.ContentService.cancelSyncAsUser(Landroid/accounts/Account;Ljava/lang/String;Landroid/content/ComponentName;I)V
com.android.server.content.ContentService.getCache(Ljava/lang/String;Landroid/net/Uri;I)Landroid/os/Bundle;
com.android.server.content.ContentService.getCurrentSyncs()Ljava/util/List;
com.android.server.content.ContentService.getCurrentSyncsAsUser(I)Ljava/util/List;
com.android.server.content.ContentService.getIsSyncable(Landroid/accounts/Account;Ljava/lang/String;)I
com.android.server.content.ContentService.getIsSyncableAsUser(Landroid/accounts/Account;Ljava/lang/String;I)I
com.android.server.content.ContentService.getMasterSyncAutomatically()Z
com.android.server.content.ContentService.getMasterSyncAutomaticallyAsUser(I)Z
com.android.server.content.ContentService.getPeriodicSyncs(Landroid/accounts/Account;Ljava/lang/String;Landroid/content/ComponentName;)Ljava/util/List;
com.android.server.content.ContentService.getSyncAdapterPackageAsUser(Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String;
com.android.server.content.ContentService.getSyncAdapterPackagesForAuthorityAsUser(Ljava/lang/String;I)[Ljava/lang/String;
com.android.server.content.ContentService.getSyncAdapterTypes()[Landroid/content/SyncAdapterType;
com.android.server.content.ContentService.getSyncAdapterTypesAsUser(I)[Landroid/content/SyncAdapterType;
com.android.server.content.ContentService.getSyncAutomatically(Landroid/accounts/Account;Ljava/lang/String;)Z
com.android.server.content.ContentService.getSyncAutomaticallyAsUser(Landroid/accounts/Account;Ljava/lang/String;I)Z
com.android.server.content.ContentService.getSyncStatus(Landroid/accounts/Account;Ljava/lang/String;Landroid/content/ComponentName;)Landroid/content/SyncStatusInfo;
com.android.server.content.ContentService.getSyncStatusAsUser(Landroid/accounts/Account;Ljava/lang/String;Landroid/content/ComponentName;I)Landroid/content/SyncStatusInfo;
com.android.server.content.ContentService.isSyncActive(Landroid/accounts/Account;Ljava/lang/String;Landroid/content/ComponentName;)Z
com.android.server.content.ContentService.isSyncPending(Landroid/accounts/Account;Ljava/lang/String;Landroid/content/ComponentName;)Z
com.android.server.content.ContentService.isSyncPendingAsUser(Landroid/accounts/Account;Ljava/lang/String;Landroid/content/ComponentName;I)Z
com.android.server.content.ContentService.notifyChange([Landroid/net/Uri;Landroid/database/IContentObserver;ZIIILjava/lang/String;)V
com.android.server.content.ContentService.onDbCorruption(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.server.content.ContentService.putCache(Ljava/lang/String;Landroid/net/Uri;Landroid/os/Bundle;I)V
com.android.server.content.ContentService.registerContentObserver(Landroid/net/Uri;ZLandroid/database/IContentObserver;II)V
com.android.server.content.ContentService.removePeriodicSync(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;)V
com.android.server.content.ContentService.removeStatusChangeListener(Landroid/content/ISyncStatusObserver;)V
com.android.server.content.ContentService.requestSync(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Ljava/lang/String;)V
com.android.server.content.ContentService.resetTodayStats()V
com.android.server.content.ContentService.semSetMasterSyncAutomaticallyAsUser(ZILjava/lang/String;)V
com.android.server.content.ContentService.setIsSyncable(Landroid/accounts/Account;Ljava/lang/String;I)V
com.android.server.content.ContentService.setIsSyncableAsUser(Landroid/accounts/Account;Ljava/lang/String;II)V
com.android.server.content.ContentService.setMasterSyncAutomatically(Z)V
com.android.server.content.ContentService.setMasterSyncAutomaticallyAsUser(ZI)V
com.android.server.content.ContentService.setSyncAutomatically(Landroid/accounts/Account;Ljava/lang/String;Z)V
com.android.server.content.ContentService.setSyncAutomaticallyAsUser(Landroid/accounts/Account;Ljava/lang/String;ZI)V
com.android.server.content.ContentService.sync(Landroid/content/SyncRequest;Ljava/lang/String;)V
com.android.server.content.ContentService.syncAsUser(Landroid/content/SyncRequest;ILjava/lang/String;)V
com.android.server.content.ContentService.unregisterContentObserver(Landroid/database/IContentObserver;)V
android.app.IWallpaperManager.addOnLocalColorsChangedListener(Landroid/app/ILocalWallpaperColorConsumer;Ljava/util/List;III)V
android.app.IWallpaperManager.applyWallpaperColors(Ljava/util/List;IIILjava/lang/String;)V
android.app.IWallpaperManager.clearWallpaper(Ljava/lang/String;II)V
android.app.IWallpaperManager.copyFileToWallpaperFile(ILjava/lang/String;)V
android.app.IWallpaperManager.copyPreloadedFileToWallpaperFile(ILjava/lang/String;)V
android.app.IWallpaperManager.forceRebindWallpaper(II)V
android.app.IWallpaperManager.getAnimatedPkgName(I)Ljava/lang/String;
android.app.IWallpaperManager.getDesktopMode()I
android.app.IWallpaperManager.getDeviceColor()Ljava/lang/String;
android.app.IWallpaperManager.getDisplayId(I)I
android.app.IWallpaperManager.getHeightHint(I)I
android.app.IWallpaperManager.getHighlightFilterState(I)I
android.app.IWallpaperManager.getLastCallingPackage(I)Ljava/lang/String;
android.app.IWallpaperManager.getLegacyDeviceColor()Ljava/lang/String;
android.app.IWallpaperManager.getLidState()I
android.app.IWallpaperManager.getLockWallpaper(Landroid/app/IWallpaperManagerCallback;Landroid/os/Bundle;II)Landroid/os/ParcelFileDescriptor;
android.app.IWallpaperManager.getLockWallpaperType()I
android.app.IWallpaperManager.getMotionWallpaperPkgName(I)Ljava/lang/String;
android.app.IWallpaperManager.getName()Ljava/lang/String;
android.app.IWallpaperManager.getSnapshotCount(I)I
android.app.IWallpaperManager.getVideoColor()Ljava/lang/String;
android.app.IWallpaperManager.getVideoFileName(I)Ljava/lang/String;
android.app.IWallpaperManager.getVideoFilePath(I)Ljava/lang/String;
android.app.IWallpaperManager.getVideoPackage(I)Ljava/lang/String;
android.app.IWallpaperManager.getWallpaper(Ljava/lang/String;Landroid/app/IWallpaperManagerCallback;ILandroid/os/Bundle;I)Landroid/os/ParcelFileDescriptor;
android.app.IWallpaperManager.getWallpaperColors(III)Landroid/app/WallpaperColors;
android.app.IWallpaperManager.getWallpaperComponentExtras(II)Landroid/os/Bundle;
android.app.IWallpaperManager.getWallpaperDimAmount()F
android.app.IWallpaperManager.getWallpaperExtras(II)Landroid/os/Bundle;
android.app.IWallpaperManager.getWallpaperIdForUser(II)I
android.app.IWallpaperManager.getWallpaperInfo(II)Landroid/app/WallpaperInfo;
android.app.IWallpaperManager.getWallpaperOrientation(II)I
android.app.IWallpaperManager.getWallpaperThumbnailFileDescriptor(IIII)Landroid/os/ParcelFileDescriptor;
android.app.IWallpaperManager.getWallpaperWithFeature(Ljava/lang/String;Ljava/lang/String;Landroid/app/IWallpaperManagerCallback;ILandroid/os/Bundle;IIZ)Landroid/os/ParcelFileDescriptor;
android.app.IWallpaperManager.getWidthHint(I)I
android.app.IWallpaperManager.hasNamedWallpaper(Ljava/lang/String;)Z
android.app.IWallpaperManager.hasVideoWallpaper()Z
android.app.IWallpaperManager.isDefaultWallpaperState(I)Z
android.app.IWallpaperManager.isDesktopMode()Z
android.app.IWallpaperManager.isDesktopModeEnabled(I)Z
android.app.IWallpaperManager.isDesktopStandAloneMode()Z
android.app.IWallpaperManager.isHomeAndLockPaired(I)Z
android.app.IWallpaperManager.isSetWallpaperAllowed(Ljava/lang/String;)Z
android.app.IWallpaperManager.isSnapshotTestMode()Z
android.app.IWallpaperManager.isValidSnapshot(I)Z
android.app.IWallpaperManager.isVideoWallpaper()Z
android.app.IWallpaperManager.isVirtualWallpaperDisplay(I)Z
android.app.IWallpaperManager.isWaitingForUnlockUser(II)Z
android.app.IWallpaperManager.isWallpaperBackupAllowed(II)Z
android.app.IWallpaperManager.isWallpaperBackupEligible(II)Z
android.app.IWallpaperManager.isWallpaperDataExists(II)Z
android.app.IWallpaperManager.isWallpaperSupported(Ljava/lang/String;)Z
android.app.IWallpaperManager.lockScreenWallpaperExists()Z
android.app.IWallpaperManager.makeSnapshot(II)I
android.app.IWallpaperManager.notifyGoingToSleep(IILandroid/os/Bundle;)V
android.app.IWallpaperManager.notifyPid(IILjava/lang/String;Z)V
android.app.IWallpaperManager.notifyWakingUp(IILandroid/os/Bundle;)V
android.app.IWallpaperManager.registerWallpaperColorsCallback(Landroid/app/IWallpaperManagerCallback;II)V
android.app.IWallpaperManager.removeOnLocalColorsChangedListener(Landroid/app/ILocalWallpaperColorConsumer;Ljava/util/List;III)V
android.app.IWallpaperManager.removeSnapshotByKey(I)V
android.app.IWallpaperManager.removeSnapshotBySource(Ljava/lang/String;)V
android.app.IWallpaperManager.removeSnapshotByWhich(I)V
android.app.IWallpaperManager.restoreSnapshot(ILjava/lang/String;)Z
android.app.IWallpaperManager.semGetPrimaryWallpaperColors(I)Landroid/app/SemWallpaperColors;
android.app.IWallpaperManager.semGetSmartCropRect(I)Landroid/graphics/Rect;
android.app.IWallpaperManager.semGetUri(ILjava/lang/String;)Ljava/lang/String;
android.app.IWallpaperManager.semGetWallpaperColors(I)Landroid/app/SemWallpaperColors;
android.app.IWallpaperManager.semGetWallpaperCropHint(I)Landroid/graphics/Rect;
android.app.IWallpaperManager.semGetWallpaperType(I)I
android.app.IWallpaperManager.semRequestWallpaperColorsAnalysis(ILjava/lang/String;)V
android.app.IWallpaperManager.semSendWallpaperCommand(ILjava/lang/String;Landroid/os/Bundle;)V
android.app.IWallpaperManager.semSetDLSWallpaperColors(Landroid/app/SemWallpaperColors;I)V
android.app.IWallpaperManager.semSetSmartCropRect(ILandroid/graphics/Rect;Landroid/graphics/Rect;)V
android.app.IWallpaperManager.semSetUri(Ljava/lang/String;ZIILjava/lang/String;ILandroid/os/Bundle;)V
android.app.IWallpaperManager.setAnimatedWallpaper(Ljava/lang/String;Ljava/lang/String;IZ)V
android.app.IWallpaperManager.setCoverWallpaperCallback(Landroid/app/IWallpaperManagerCallback;)Z
android.app.IWallpaperManager.setDimensionHints(IILjava/lang/String;I)V
android.app.IWallpaperManager.setDisplayPadding(Landroid/graphics/Rect;Ljava/lang/String;I)V
android.app.IWallpaperManager.setInAmbientMode(ZJ)V
android.app.IWallpaperManager.setKWPTypeLiveWallpaper(I)V
android.app.IWallpaperManager.setKWPTypeLiveWallpaperWithMode(II)V
android.app.IWallpaperManager.setLockWallpaperCallback(Landroid/app/IWallpaperManagerCallback;)Z
android.app.IWallpaperManager.setMotionWallpaper(Ljava/lang/String;Ljava/lang/String;IZ)V
android.app.IWallpaperManager.setSnapshotSource(ILjava/lang/String;)Z
android.app.IWallpaperManager.setSnapshotTestMode(Z)V
android.app.IWallpaperManager.setVideoWallpaper(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIZLandroid/os/Bundle;)V
android.app.IWallpaperManager.setWallpaper(Ljava/lang/String;Ljava/lang/String;Landroid/graphics/Rect;ZLandroid/os/Bundle;ILandroid/app/IWallpaperManagerCallback;II)Landroid/os/ParcelFileDescriptor;
android.app.IWallpaperManager.setWallpaperComponent(Landroid/content/ComponentName;)V
android.app.IWallpaperManager.setWallpaperComponentChecked(Landroid/content/ComponentName;Ljava/lang/String;I)V
android.app.IWallpaperManager.setWallpaperComponentWithExtras(ILandroid/content/ComponentName;Ljava/lang/String;ILandroid/os/Bundle;)V
android.app.IWallpaperManager.setWallpaperDimAmount(F)V
android.app.IWallpaperManager.setWallpaperWithExtras(Ljava/lang/String;Ljava/lang/String;Landroid/graphics/Rect;ZLandroid/os/Bundle;ILandroid/app/IWallpaperManagerCallback;IIZLandroid/os/Bundle;)Landroid/os/ParcelFileDescriptor;
android.app.IWallpaperManager.settingsRestored()V
android.app.IWallpaperManager.unregisterWallpaperColorsCallback(Landroid/app/IWallpaperManagerCallback;II)V
com.android.server.enterprise.restriction.SPDControlPolicy.getAutoSecurityPolicyUpdateMode()I
com.android.server.enterprise.restriction.SPDControlPolicy.setAutoSecurityPolicyUpdateMode(Lcom/samsung/android/knox/ContextInfo;I)Z
com.android.server.sensorprivacy.SensorPrivacyService$SensorPrivacyServiceImpl.setToggleSensorPrivacyForProfileGroupWithConfirmPopup(IIIZ)V
com.samsung.android.camera.ICameraServiceWorker.<clinit>()V
com.android.server.ibs.IntelligentBatterySaverService.addSqdBlockList(ILjava/lang/String;)Z
com.android.server.ibs.IntelligentBatterySaverService.getGain()[J
com.android.server.ibs.IntelligentBatterySaverService.getOperationHistory()Landroid/os/Bundle;
com.android.server.ibs.IntelligentBatterySaverService.getSleepTime()Landroid/os/Bundle;
com.android.server.ibs.IntelligentBatterySaverService.getSqdBlockList()Ljava/util/Map;
com.android.server.ibs.IntelligentBatterySaverService.isEnableSerive()Z
com.android.server.ibs.IntelligentBatterySaverService.isSqdUiControlEnabled()Z
com.android.server.ibs.IntelligentBatterySaverService.removeSqdBlockList(ILjava/lang/String;)Z
com.android.server.ibs.IntelligentBatterySaverService.setRubinEvent(Ljava/lang/String;)V
com.android.server.ibs.IntelligentBatterySaverService.setSarrUiControlEnable(Z)V
com.android.server.ibs.IntelligentBatterySaverService.setSleepModeEnabled(Z)V
com.android.server.ibs.IntelligentBatterySaverService.setSleepTime(JJ)V
com.android.server.ibs.IntelligentBatterySaverService.setSqdUiControlEnabled(Z)V
com.android.server.enterprise.smartcard.SmartCardEmailPolicy.getSMIMEEncryptionCertificate(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)Ljava/lang/String;
com.android.server.enterprise.smartcard.SmartCardEmailPolicy.getSMIMESignatureCertificate(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)Ljava/lang/String;
com.android.server.enterprise.smartcard.SmartCardEmailPolicy.isAuthenticationEnabled(Lcom/samsung/android/knox/ContextInfo;)Z
com.android.server.enterprise.smartcard.SmartCardEmailPolicy.isCredentialRequired(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)Z
com.android.server.enterprise.smartcard.SmartCardEmailPolicy.removeSMIMEEncryptionCertificate(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)Z
com.android.server.enterprise.smartcard.SmartCardEmailPolicy.removeSMIMESignatureCertificate(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)Z
com.android.server.enterprise.smartcard.SmartCardEmailPolicy.requireCredentials(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;Z)Z
com.android.server.enterprise.smartcard.SmartCardEmailPolicy.setForceSMIMEEncryptionCertificate(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;Ljava/lang/String;)Z
com.android.server.enterprise.smartcard.SmartCardEmailPolicy.setForceSMIMESignatureCertificate(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;Ljava/lang/String;)Z
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.activateVpnProfile(Lcom/samsung/android/knox/net/vpn/KnoxVpnContext;Ljava/lang/String;Z)Lcom/samsung/android/knox/net/vpn/EnterpriseResponseData;
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.addAllContainerPackagesToVpn(Lcom/samsung/android/knox/net/vpn/KnoxVpnContext;ILjava/lang/String;)Lcom/samsung/android/knox/net/vpn/EnterpriseResponseData;
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.addAllPackagesToVpn(Lcom/samsung/android/knox/net/vpn/KnoxVpnContext;Ljava/lang/String;)Lcom/samsung/android/knox/net/vpn/EnterpriseResponseData;
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.addContainerPackagesToVpn(Lcom/samsung/android/knox/net/vpn/KnoxVpnContext;I[Ljava/lang/String;Ljava/lang/String;)Lcom/samsung/android/knox/net/vpn/EnterpriseResponseData;
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.addPackagesToVpn(Lcom/samsung/android/knox/net/vpn/KnoxVpnContext;[Ljava/lang/String;Ljava/lang/String;)Lcom/samsung/android/knox/net/vpn/EnterpriseResponseData;
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.addVpnUidRanges(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.allowAuthUsbTetheringOverVpn(Lcom/samsung/android/knox/net/vpn/KnoxVpnContext;Ljava/lang/String;Landroid/os/Bundle;)I
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.allowNoAuthUsbTetheringOverVpn(Lcom/samsung/android/knox/net/vpn/KnoxVpnContext;Ljava/lang/String;)I
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.bindKnoxVpnInterface(Lcom/samsung/android/knox/net/vpn/KnoxVpnContext;)Z
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.checkIfCallerIsVpnVendor(I)Z
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.checkIfLocalProxyPortExists(I)Z
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.checkIfUidIsExempted(I)Z
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.checkIfVendorCreatedKnoxProfile(Ljava/lang/String;II)Z
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.createVpnProfile(Lcom/samsung/android/knox/net/vpn/KnoxVpnContext;Ljava/lang/String;)Lcom/samsung/android/knox/net/vpn/EnterpriseResponseData;
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.disallowUsbTetheringOverVpn(Lcom/samsung/android/knox/net/vpn/KnoxVpnContext;Ljava/lang/String;)I
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.getAllContainerPackagesInVpnProfile(Lcom/samsung/android/knox/net/vpn/KnoxVpnContext;ILjava/lang/String;)Lcom/samsung/android/knox/net/vpn/EnterpriseResponseData;
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.getAllPackagesInVpnProfile(Lcom/samsung/android/knox/net/vpn/KnoxVpnContext;Ljava/lang/String;)Lcom/samsung/android/knox/net/vpn/EnterpriseResponseData;
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.getAllVpnProfiles(Lcom/samsung/android/knox/net/vpn/KnoxVpnContext;)Lcom/samsung/android/knox/net/vpn/EnterpriseResponseData;
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.getCACertificate(Lcom/samsung/android/knox/net/vpn/KnoxVpnContext;Ljava/lang/String;)Lcom/samsung/android/knox/net/vpn/EnterpriseResponseData;
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.getChainingEnabledForProfile(I)I
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.getDomainsByProfileName(Ljava/lang/String;)Ljava/util/List;
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.getErrorString(Lcom/samsung/android/knox/net/vpn/KnoxVpnContext;Ljava/lang/String;)Lcom/samsung/android/knox/net/vpn/EnterpriseResponseData;
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.getInterfaceNameForUid(I)Ljava/lang/String;
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.getKnoxVpnProfileType(Ljava/lang/String;)I
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.getProfilesByDomain(Ljava/lang/String;)Ljava/util/List;
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.getProxyInfoForUid(I)[Ljava/lang/String;
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.getState(Lcom/samsung/android/knox/net/vpn/KnoxVpnContext;Ljava/lang/String;)Lcom/samsung/android/knox/net/vpn/EnterpriseResponseData;
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.getUidPidEnabled(ILjava/lang/String;)I
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.getUserCertificate(Lcom/samsung/android/knox/net/vpn/KnoxVpnContext;Ljava/lang/String;)Lcom/samsung/android/knox/net/vpn/EnterpriseResponseData;
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.getVendorNameForProfile(Ljava/lang/String;)Ljava/lang/String;
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.getVpnModeOfOperation(Lcom/samsung/android/knox/net/vpn/KnoxVpnContext;Ljava/lang/String;)Lcom/samsung/android/knox/net/vpn/EnterpriseResponseData;
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.getVpnProfile(Lcom/samsung/android/knox/net/vpn/KnoxVpnContext;Ljava/lang/String;)Lcom/samsung/android/knox/net/vpn/EnterpriseResponseData;
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.isProxyConfiguredForKnoxVpn(I)Z
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.isUsbTetheringOverVpnEnabled(Lcom/samsung/android/knox/net/vpn/KnoxVpnContext;Ljava/lang/String;)I
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.removeAllContainerPackagesFromVpn(Lcom/samsung/android/knox/net/vpn/KnoxVpnContext;ILjava/lang/String;)Lcom/samsung/android/knox/net/vpn/EnterpriseResponseData;
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.removeAllPackagesFromVpn(Lcom/samsung/android/knox/net/vpn/KnoxVpnContext;Ljava/lang/String;)Lcom/samsung/android/knox/net/vpn/EnterpriseResponseData;
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.removeContainerPackagesFromVpn(Lcom/samsung/android/knox/net/vpn/KnoxVpnContext;I[Ljava/lang/String;Ljava/lang/String;)Lcom/samsung/android/knox/net/vpn/EnterpriseResponseData;
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.removePackagesFromVpn(Lcom/samsung/android/knox/net/vpn/KnoxVpnContext;[Ljava/lang/String;Ljava/lang/String;)Lcom/samsung/android/knox/net/vpn/EnterpriseResponseData;
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.removeVpnProfile(Lcom/samsung/android/knox/net/vpn/KnoxVpnContext;Ljava/lang/String;)Lcom/samsung/android/knox/net/vpn/EnterpriseResponseData;
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.removeVpnUidRanges(Ljava/lang/String;)V
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.setAutoRetryOnConnectionError(Lcom/samsung/android/knox/net/vpn/KnoxVpnContext;Ljava/lang/String;Z)Lcom/samsung/android/knox/net/vpn/EnterpriseResponseData;
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.setCACertificate(Lcom/samsung/android/knox/net/vpn/KnoxVpnContext;Ljava/lang/String;[B)Lcom/samsung/android/knox/net/vpn/EnterpriseResponseData;
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.setInitialTimeToTunnelEstablishment(Ljava/lang/String;J)V
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.setServerCertValidationUserAcceptanceCriteria(Lcom/samsung/android/knox/net/vpn/KnoxVpnContext;Ljava/lang/String;ZLjava/util/List;I)Lcom/samsung/android/knox/net/vpn/EnterpriseResponseData;
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.setUserCertificate(Lcom/samsung/android/knox/net/vpn/KnoxVpnContext;Ljava/lang/String;[BLjava/lang/String;)Lcom/samsung/android/knox/net/vpn/EnterpriseResponseData;
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.setVpnModeOfOperation(Lcom/samsung/android/knox/net/vpn/KnoxVpnContext;Ljava/lang/String;I)Lcom/samsung/android/knox/net/vpn/EnterpriseResponseData;
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.showToastVpnEULA()V
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.startConnection(Lcom/samsung/android/knox/net/vpn/KnoxVpnContext;Ljava/lang/String;)Lcom/samsung/android/knox/net/vpn/EnterpriseResponseData;
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.stopConnection(Lcom/samsung/android/knox/net/vpn/KnoxVpnContext;Ljava/lang/String;)Lcom/samsung/android/knox/net/vpn/EnterpriseResponseData;
com.android.server.accessibility.AccessibilityManagerService.OnStartGestureWakeup()Z
com.android.server.accessibility.AccessibilityManagerService.OnStopGestureWakeup()Z
com.android.server.accessibility.AccessibilityManagerService.addAccessibilityInteractionConnection(Landroid/view/IWindow;Landroid/os/IBinder;Landroid/view/accessibility/IAccessibilityInteractionConnection;Ljava/lang/String;I)I
com.android.server.accessibility.AccessibilityManagerService.addClient(Landroid/view/accessibility/IAccessibilityManagerClient;I)J
com.android.server.accessibility.AccessibilityManagerService.associateEmbeddedHierarchy(Landroid/os/IBinder;Landroid/os/IBinder;)V
com.android.server.accessibility.AccessibilityManagerService.convertPixelToDpi(F)I
com.android.server.accessibility.AccessibilityManagerService.disassociateEmbeddedHierarchy(Landroid/os/IBinder;)V
com.android.server.accessibility.AccessibilityManagerService.getAccessibilityShortcutTargets(I)Ljava/util/List;
com.android.server.accessibility.AccessibilityManagerService.getAccessibilityWindowId(Landroid/os/IBinder;)I
com.android.server.accessibility.AccessibilityManagerService.getEnabledAccessibilityServiceList(II)Ljava/util/List;
com.android.server.accessibility.AccessibilityManagerService.getFocusColor()I
com.android.server.accessibility.AccessibilityManagerService.getFocusStrokeWidth()I
com.android.server.accessibility.AccessibilityManagerService.getInstalledAccessibilityServiceList(I)Ljava/util/List;
com.android.server.accessibility.AccessibilityManagerService.getRecommendedTimeoutMillis()J
com.android.server.accessibility.AccessibilityManagerService.getScreenReaderName()Ljava/lang/String;
com.android.server.accessibility.AccessibilityManagerService.getWindowToken(II)Landroid/os/IBinder;
com.android.server.accessibility.AccessibilityManagerService.interrupt(I)V
com.android.server.accessibility.AccessibilityManagerService.isActivatedMagnification()Z
com.android.server.accessibility.AccessibilityManagerService.isAudioDescriptionByDefaultEnabled()Z
com.android.server.accessibility.AccessibilityManagerService.isScreenReaderEnabled()Z
com.android.server.accessibility.AccessibilityManagerService.isSystemAudioCaptioningUiEnabled(I)Z
com.android.server.accessibility.AccessibilityManagerService.isTwoFingerGestureRecognitionEnabled()Z
com.android.server.accessibility.AccessibilityManagerService.notifyAccessibilityButtonClicked(ILjava/lang/String;)V
com.android.server.accessibility.AccessibilityManagerService.notifyAccessibilityButtonVisibilityChanged(Z)V
com.android.server.accessibility.AccessibilityManagerService.performAccessibilityDirectAccess(Ljava/lang/String;)V
com.android.server.accessibility.AccessibilityManagerService.performAccessibilityShortcut(Ljava/lang/String;)V
com.android.server.accessibility.AccessibilityManagerService.registerSystemAction(Landroid/app/RemoteAction;I)V
com.android.server.accessibility.AccessibilityManagerService.registerUiTestAutomationService(Landroid/os/IBinder;Landroid/accessibilityservice/IAccessibilityServiceClient;Landroid/accessibilityservice/AccessibilityServiceInfo;I)V
com.android.server.accessibility.AccessibilityManagerService.removeAccessibilityInteractionConnection(Landroid/view/IWindow;)V
com.android.server.accessibility.AccessibilityManagerService.removeClient(Landroid/view/accessibility/IAccessibilityManagerClient;I)Z
com.android.server.accessibility.AccessibilityManagerService.semCheckMdnieColorBlind([I)Z
com.android.server.accessibility.AccessibilityManagerService.semDisableMdnieColorFilter()Z
com.android.server.accessibility.AccessibilityManagerService.semDisableWindowMagnification()V
com.android.server.accessibility.AccessibilityManagerService.semDumpCallStack(Ljava/lang/String;)V
com.android.server.accessibility.AccessibilityManagerService.semEnableMdnieColorFilter(II)Z
com.android.server.accessibility.AccessibilityManagerService.semEnableWindowMagnification(II)V
com.android.server.accessibility.AccessibilityManagerService.semGetWindowMagnificationBounds()Landroid/graphics/Rect;
com.android.server.accessibility.AccessibilityManagerService.semGetWindowMagnificationScale()F
com.android.server.accessibility.AccessibilityManagerService.semIsAccessibilityButtonShown()Z
com.android.server.accessibility.AccessibilityManagerService.semIsAccessibilityServiceEnabled(I)Z
com.android.server.accessibility.AccessibilityManagerService.semIsDarkScreenMode()Z
com.android.server.accessibility.AccessibilityManagerService.semIsWindowMagnificationEnabled()Z
com.android.server.accessibility.AccessibilityManagerService.semLockNow()V
com.android.server.accessibility.AccessibilityManagerService.semMoveWindowMagnification(FF)V
com.android.server.accessibility.AccessibilityManagerService.semOnLightNotification(Ljava/lang/String;)Z
com.android.server.accessibility.AccessibilityManagerService.semOpenDeviceOptions()V
com.android.server.accessibility.AccessibilityManagerService.semPerformAccessibilityButtonClick(IILjava/lang/String;)V
com.android.server.accessibility.AccessibilityManagerService.semRegisterAssistantMenu(Landroid/os/IBinder;)V
com.android.server.accessibility.AccessibilityManagerService.semSetColorBlind(ZF)Z
com.android.server.accessibility.AccessibilityManagerService.semSetMdnieAccessibilityMode(IZ)Z
com.android.server.accessibility.AccessibilityManagerService.semSetTwoFingerGestureRecognitionEnabled(Z)V
com.android.server.accessibility.AccessibilityManagerService.semStartFlashNotification(Ljava/lang/String;Landroid/os/IBinder;ILjava/lang/String;)Z
com.android.server.accessibility.AccessibilityManagerService.semStopFlashNotification(Ljava/lang/String;)Z
com.android.server.accessibility.AccessibilityManagerService.semToggleDarkScreenMode()V
com.android.server.accessibility.AccessibilityManagerService.semTurnOffAccessibilityService(I)V
com.android.server.accessibility.AccessibilityManagerService.semTurnOnAccessibilityService(I)V
com.android.server.accessibility.AccessibilityManagerService.semUpdateAssitantMenu(Landroid/os/Bundle;)V
com.android.server.accessibility.AccessibilityManagerService.sendAccessibilityEvent(Landroid/view/accessibility/AccessibilityEvent;I)V
com.android.server.accessibility.AccessibilityManagerService.sendFingerprintGesture(I)Z
com.android.server.accessibility.AccessibilityManagerService.setMagnificationDisactivate()V
com.android.server.accessibility.AccessibilityManagerService.setPictureInPictureActionReplacingConnection(Landroid/view/accessibility/IAccessibilityInteractionConnection;)V
com.android.server.accessibility.AccessibilityManagerService.setScreenReaderEnabled(Z)V
com.android.server.accessibility.AccessibilityManagerService.setSystemAudioCaptioningEnabled(ZI)V
com.android.server.accessibility.AccessibilityManagerService.setSystemAudioCaptioningUiEnabled(ZI)V
com.android.server.accessibility.AccessibilityManagerService.setTalkbackMode()V
com.android.server.accessibility.AccessibilityManagerService.setWindowMagnificationConnection(Landroid/view/accessibility/IWindowMagnificationConnection;)V
com.android.server.accessibility.AccessibilityManagerService.temporaryEnableAccessibilityStateUntilKeyguardRemoved(Landroid/content/ComponentName;Z)V
com.android.server.accessibility.AccessibilityManagerService.unregisterSystemAction(I)V
com.android.server.accessibility.AccessibilityManagerService.unregisterUiTestAutomationService(Landroid/accessibilityservice/IAccessibilityServiceClient;)V
com.samsung.android.game.GameManagerService.disableVrrControl(Ljava/lang/String;)Z
com.samsung.android.game.GameManagerService.enableVrrControl(Ljava/lang/String;)Z
com.samsung.android.game.GameManagerService.getForegroundApp()Ljava/lang/String;
com.samsung.android.game.GameManagerService.getGameList()Ljava/util/List;
com.samsung.android.game.GameManagerService.getGamePkgDataIncServer(Ljava/lang/String;)Lcom/samsung/android/game/PkgData;
com.samsung.android.game.GameManagerService.getSosPolicy(Ljava/lang/String;)Ljava/lang/String;
com.samsung.android.game.GameManagerService.getTopActivityName()Ljava/lang/String;
com.samsung.android.game.GameManagerService.getVersion()Ljava/lang/String;
com.samsung.android.game.GameManagerService.identifyForegroundApp()I
com.samsung.android.game.GameManagerService.identifyGamePackage(Ljava/lang/String;)I
com.samsung.android.game.GameManagerService.initGameManager(ILjava/util/Map;)Z
com.samsung.android.game.GameManagerService.registerCallback(Lcom/samsung/android/game/IGameManagerCallback;)Z
com.samsung.android.game.GameManagerService.requestWithJson(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
com.samsung.android.game.GameManagerService.setPackageConfigurations(Ljava/util/List;)Z
com.samsung.android.game.GameManagerService.setPerformanceMode(ILjava/lang/String;)Z
com.samsung.android.game.GameManagerService.setTargetFrameRate(Landroid/os/IBinder;I)Z
com.samsung.android.game.GameManagerService.syncGameList(Ljava/util/Map;)V
com.samsung.android.game.GameManagerService.unregisterCallback(Lcom/samsung/android/game/IGameManagerCallback;)Z
com.android.server.power.PowerManagerService$BinderService.acquireWakeLock(Landroid/os/IBinder;ILjava/lang/String;Ljava/lang/String;Landroid/os/WorkSource;Ljava/lang/String;ILandroid/os/IWakeLockCallback;)V
com.android.server.power.PowerManagerService$BinderService.acquireWakeLockAsync(Landroid/os/IBinder;ILjava/lang/String;Ljava/lang/String;Landroid/os/WorkSource;Ljava/lang/String;)V
com.android.server.power.PowerManagerService$BinderService.acquireWakeLockWithUid(Landroid/os/IBinder;ILjava/lang/String;Ljava/lang/String;IILandroid/os/IWakeLockCallback;)V
com.android.server.power.PowerManagerService$BinderService.boostScreenBrightness(J)V
com.android.server.power.PowerManagerService$BinderService.crash(Ljava/lang/String;)V
com.android.server.power.PowerManagerService$BinderService.forceLowPowerStandbyActive(Z)V
com.android.server.power.PowerManagerService$BinderService.forceSuspend()Z
com.android.server.power.PowerManagerService$BinderService.getBatteryDischargePrediction()Landroid/os/ParcelDuration;
com.android.server.power.PowerManagerService$BinderService.getBrightnessConstraint(I)F
com.android.server.power.PowerManagerService$BinderService.getCurrentBrightness(Z)F
com.android.server.power.PowerManagerService$BinderService.getFullPowerSavePolicy()Landroid/os/BatterySaverPolicyConfig;
com.android.server.power.PowerManagerService$BinderService.getLastShutdownReason()I
com.android.server.power.PowerManagerService$BinderService.getLastSleepReason()I
com.android.server.power.PowerManagerService$BinderService.getLastUserActivityTime(I)J
com.android.server.power.PowerManagerService$BinderService.getPowerSaveModeTrigger()I
com.android.server.power.PowerManagerService$BinderService.getPowerSaveState(I)Landroid/os/PowerSaveState;
com.android.server.power.PowerManagerService$BinderService.getWakeLockPackageList()[Ljava/lang/String;
com.android.server.power.PowerManagerService$BinderService.goToSleep(JII)V
com.android.server.power.PowerManagerService$BinderService.isAmbientDisplayAvailable()Z
com.android.server.power.PowerManagerService$BinderService.isAmbientDisplaySuppressed()Z
com.android.server.power.PowerManagerService$BinderService.isAmbientDisplaySuppressedForToken(Ljava/lang/String;)Z
com.android.server.power.PowerManagerService$BinderService.isAmbientDisplaySuppressedForTokenByApp(Ljava/lang/String;I)Z
com.android.server.power.PowerManagerService$BinderService.isBatteryDischargePredictionPersonalized()Z
com.android.server.power.PowerManagerService$BinderService.isDeviceIdleMode()Z
com.android.server.power.PowerManagerService$BinderService.isInteractive()Z
com.android.server.power.PowerManagerService$BinderService.isInteractiveForDisplay(I)Z
com.android.server.power.PowerManagerService$BinderService.isLightDeviceIdleMode()Z
com.android.server.power.PowerManagerService$BinderService.isLowPowerStandbyEnabled()Z
com.android.server.power.PowerManagerService$BinderService.isLowPowerStandbySupported()Z
com.android.server.power.PowerManagerService$BinderService.isPowerSaveMode()Z
com.android.server.power.PowerManagerService$BinderService.isScreenBrightnessBoosted()Z
com.android.server.power.PowerManagerService$BinderService.isWakeLockLevelSupported(I)Z
com.android.server.power.PowerManagerService$BinderService.nap(J)V
com.android.server.power.PowerManagerService$BinderService.reboot(ZLjava/lang/String;Z)V
com.android.server.power.PowerManagerService$BinderService.rebootSafeMode(ZZ)V
com.android.server.power.PowerManagerService$BinderService.releaseWakeLock(Landroid/os/IBinder;I)V
com.android.server.power.PowerManagerService$BinderService.releaseWakeLockAsync(Landroid/os/IBinder;I)V
com.android.server.power.PowerManagerService$BinderService.semWakeUp(JILjava/lang/String;ILjava/lang/String;)V
com.android.server.power.PowerManagerService$BinderService.setAdaptivePowerSaveEnabled(Z)Z
com.android.server.power.PowerManagerService$BinderService.setAdaptivePowerSavePolicy(Landroid/os/BatterySaverPolicyConfig;)Z
com.android.server.power.PowerManagerService$BinderService.setAttentionLight(ZI)V
com.android.server.power.PowerManagerService$BinderService.setAutoBrightnessLimit(IIZ)V
com.android.server.power.PowerManagerService$BinderService.setBatteryDischargePrediction(Landroid/os/ParcelDuration;Z)V
com.android.server.power.PowerManagerService$BinderService.setCoverType(I)V
com.android.server.power.PowerManagerService$BinderService.setDozeAfterScreenOff(Z)V
com.android.server.power.PowerManagerService$BinderService.setDynamicPowerSaveHint(ZI)Z
com.android.server.power.PowerManagerService$BinderService.setEarlyWakeUp(Z)V
com.android.server.power.PowerManagerService$BinderService.setFreezingScreenBrightness(Z)V
com.android.server.power.PowerManagerService$BinderService.setFullPowerSavePolicy(Landroid/os/BatterySaverPolicyConfig;)Z
com.android.server.power.PowerManagerService$BinderService.setLCDFlashMode(ZLandroid/os/IBinder;)V
com.android.server.power.PowerManagerService$BinderService.setLowPowerStandbyActiveDuringMaintenance(Z)V
com.android.server.power.PowerManagerService$BinderService.setLowPowerStandbyEnabled(Z)V
com.android.server.power.PowerManagerService$BinderService.setMasterBrightnessLimit(III)V
com.android.server.power.PowerManagerService$BinderService.setPowerBoost(II)V
com.android.server.power.PowerManagerService$BinderService.setPowerMode(IZ)V
com.android.server.power.PowerManagerService$BinderService.setPowerModeChecked(IZ)Z
com.android.server.power.PowerManagerService$BinderService.setPowerSaveModeEnabled(Z)Z
com.android.server.power.PowerManagerService$BinderService.setProximityDebounceTime(Landroid/os/IBinder;II)V
com.android.server.power.PowerManagerService$BinderService.setScreenBrightnessScaleFactor(FLandroid/os/IBinder;)V
com.android.server.power.PowerManagerService$BinderService.setStayOnSetting(I)V
com.android.server.power.PowerManagerService$BinderService.shutdown(ZLjava/lang/String;Z)V
com.android.server.power.PowerManagerService$BinderService.suppressAmbientDisplay(Ljava/lang/String;Z)V
com.android.server.power.PowerManagerService$BinderService.switchForceLcdBacklightOffState()V
com.android.server.power.PowerManagerService$BinderService.systemReboot(Ljava/lang/String;)V
com.android.server.power.PowerManagerService$BinderService.updateCoverState(Z)V
com.android.server.power.PowerManagerService$BinderService.updateWakeLockCallback(Landroid/os/IBinder;Landroid/os/IWakeLockCallback;)V
com.android.server.power.PowerManagerService$BinderService.updateWakeLockUids(Landroid/os/IBinder;[I)V
com.android.server.power.PowerManagerService$BinderService.updateWakeLockUidsAsync(Landroid/os/IBinder;[I)V
com.android.server.power.PowerManagerService$BinderService.updateWakeLockWorkSource(Landroid/os/IBinder;Landroid/os/WorkSource;Ljava/lang/String;)V
com.android.server.power.PowerManagerService$BinderService.userActivity(IJII)V
com.android.server.power.PowerManagerService$BinderService.wakeUp(JILjava/lang/String;Ljava/lang/String;)V
com.android.server.DeviceIdleController$BinderService.addPowerSaveTempWhitelistApp(Ljava/lang/String;JIILjava/lang/String;)V
com.android.server.DeviceIdleController$BinderService.addPowerSaveTempWhitelistAppForMms(Ljava/lang/String;IILjava/lang/String;)J
com.android.server.DeviceIdleController$BinderService.addPowerSaveTempWhitelistAppForSms(Ljava/lang/String;IILjava/lang/String;)J
com.android.server.DeviceIdleController$BinderService.addPowerSaveWhitelistApp(Ljava/lang/String;)V
com.android.server.DeviceIdleController$BinderService.addPowerSaveWhitelistApps(Ljava/util/List;)I
com.android.server.DeviceIdleController$BinderService.exitIdle(Ljava/lang/String;)V
com.android.server.DeviceIdleController$BinderService.getAppIdTempWhitelist()[I
com.android.server.DeviceIdleController$BinderService.getAppIdUserWhitelist()[I
com.android.server.DeviceIdleController$BinderService.getAppIdWhitelist()[I
com.android.server.DeviceIdleController$BinderService.getAppIdWhitelistExceptIdle()[I
com.android.server.DeviceIdleController$BinderService.getFullPowerWhitelist()[Ljava/lang/String;
com.android.server.DeviceIdleController$BinderService.getFullPowerWhitelistExceptIdle()[Ljava/lang/String;
com.android.server.DeviceIdleController$BinderService.getRemovedSystemPowerWhitelistApps()[Ljava/lang/String;
com.android.server.DeviceIdleController$BinderService.getSystemPowerWhitelist()[Ljava/lang/String;
com.android.server.DeviceIdleController$BinderService.getSystemPowerWhitelistExceptIdle()[Ljava/lang/String;
com.android.server.DeviceIdleController$BinderService.getUserPowerWhitelist()[Ljava/lang/String;
com.android.server.DeviceIdleController$BinderService.isPowerSaveWhitelistApp(Ljava/lang/String;)Z
com.android.server.DeviceIdleController$BinderService.isPowerSaveWhitelistExceptIdleApp(Ljava/lang/String;)Z
com.android.server.DeviceIdleController$BinderService.removePowerSaveWhitelistApp(Ljava/lang/String;)V
com.android.server.DeviceIdleController$BinderService.removeSystemPowerWhitelistApp(Ljava/lang/String;)V
com.android.server.DeviceIdleController$BinderService.resetPreIdleTimeoutMode()V
com.android.server.DeviceIdleController$BinderService.restoreSystemPowerWhitelistApp(Ljava/lang/String;)V
com.android.server.DeviceIdleController$BinderService.setPreIdleTimeoutMode(I)I
com.android.server.DeviceIdleController$BinderService.whitelistAppTemporarily(Ljava/lang/String;IILjava/lang/String;)J
com.android.server.VpnManagerService.applyBlockingRulesToUidRange(Ljava/lang/String;IZLjava/lang/String;)V
com.android.server.VpnManagerService.checkIfLocalProxyPortExists(I)Z
com.android.server.VpnManagerService.checkIfUidIsExempted(I)Z
com.android.server.VpnManagerService.createEnterpriseVpnInstance(Ljava/lang/String;Ljava/lang/String;II)V
com.android.server.VpnManagerService.disconnectKnoxVpn(Ljava/lang/String;I)Z
com.android.server.VpnManagerService.getActiveDefaultInterface()Ljava/lang/String;
com.android.server.VpnManagerService.getActiveDefaultNetwork()Landroid/net/Network;
com.android.server.VpnManagerService.getChainingEnabledForProfile(I)Z
com.android.server.VpnManagerService.getDnsServerListForInterface(Ljava/lang/String;)[Ljava/lang/String;
com.android.server.VpnManagerService.getLegacyKnoxVpnInfo(I)Lcom/android/internal/net/LegacyVpnInfo;
com.android.server.VpnManagerService.getNetIdforActiveDefaultInterface()I
com.android.server.VpnManagerService.getProxyInfoForUid(I)[Ljava/lang/String;
com.android.server.VpnManagerService.isProxyConfiguredForKnoxVpn(I)Z
com.android.server.VpnManagerService.knoxVpnProfileType(Ljava/lang/String;)I
com.android.server.VpnManagerService.prepareEnterpriseVpnExt(Ljava/lang/String;Z)Z
com.android.server.VpnManagerService.registerSystemDefaultNetworkCallback()V
com.android.server.VpnManagerService.removeEnterpriseVpnInstance(Ljava/lang/String;Ljava/lang/String;I)V
com.android.server.VpnManagerService.resetUidListInNetworkCapabilities(Ljava/lang/String;ILjava/lang/String;)V
com.android.server.VpnManagerService.startLegacyKnoxVpn(ILcom/android/internal/net/KnoxVpnProfile;)V
com.android.server.VpnManagerService.stopLegacyKnoxVpn(ILjava/lang/String;Ljava/lang/String;)V
com.android.server.VpnManagerService.unregisterSystemDefaultNetworkCallback()V
com.android.server.VpnManagerService.updateEnterpriseVpn(Ljava/lang/String;IZ)V
com.android.server.VpnManagerService.updateLocalProxyInfo(Ljava/lang/String;ILjava/lang/String;Landroid/net/ProxyInfo;)V
com.android.server.VpnManagerService.updateUidRangesToPerAppVpn(Ljava/lang/String;IZ[ILjava/lang/String;)V
com.android.server.VpnManagerService.updateUidRangesToUserVpn(Ljava/lang/String;IZILjava/lang/String;)V
com.android.server.VpnManagerService.updateUidRangesToUserVpnWithBlackList(Ljava/lang/String;II[ILjava/lang/String;)V
com.android.server.companion.CompanionDeviceManagerService$CompanionDeviceManagerImpl.attachSystemDataTransport(Ljava/lang/String;IILandroid/os/ParcelFileDescriptor;)V
com.android.server.companion.CompanionDeviceManagerService$CompanionDeviceManagerImpl.buildPermissionTransferUserConsentIntent(Ljava/lang/String;II)Landroid/app/PendingIntent;
com.android.server.companion.CompanionDeviceManagerService$CompanionDeviceManagerImpl.detachSystemDataTransport(Ljava/lang/String;II)V
com.android.server.companion.CompanionDeviceManagerService$CompanionDeviceManagerImpl.startSystemDataTransfer(Ljava/lang/String;IILandroid/companion/ISystemDataTransferCallback;)V
com.android.server.pm.permission.PermissionManagerService.startOneTimePermissionSession(Ljava/lang/String;IJJ)V
com.android.server.remoteappmode.RemoteAppModeService.clearAll()V
com.android.server.remoteappmode.RemoteAppModeService.createVirtualDisplay(Ljava/lang/String;IIILandroid/view/Surface;Lcom/samsung/android/remoteappmode/IVirtualDisplayAliveChecker;)I
com.android.server.remoteappmode.RemoteAppModeService.disableSendingUserPresentIntent()V
com.android.server.remoteappmode.RemoteAppModeService.enableSendingUserPresentIntent(Ljava/lang/String;)V
com.android.server.remoteappmode.RemoteAppModeService.forceStopPackage(Ljava/lang/String;)V
com.android.server.remoteappmode.RemoteAppModeService.getLastAnr(Ljava/lang/String;Landroid/os/ParcelFileDescriptor;)V
com.android.server.remoteappmode.RemoteAppModeService.getProtocolVersion()I
com.android.server.remoteappmode.RemoteAppModeService.getSendingUserPresentExpiredTime()J
com.android.server.remoteappmode.RemoteAppModeService.isAllowed()Z
com.android.server.remoteappmode.RemoteAppModeService.isSendingUserPresentEnabled()Z
com.android.server.remoteappmode.RemoteAppModeService.launchApplication(ILjava/lang/String;Landroid/content/Intent;Landroid/os/Bundle;)V
com.android.server.remoteappmode.RemoteAppModeService.moveDisplayToTop(I)V
com.android.server.remoteappmode.RemoteAppModeService.registerRemoteAppModeListener(Lcom/samsung/android/remoteappmode/IRemoteAppModeListener;Ljava/lang/String;)Z
com.android.server.remoteappmode.RemoteAppModeService.registerRotationChangeListener(Lcom/samsung/android/remoteappmode/IRotationChangeListener;Ljava/lang/String;I)Z
com.android.server.remoteappmode.RemoteAppModeService.registerSecureAppChangedListener(Lcom/samsung/android/remoteappmode/ISecureAppChangedListener;Ljava/lang/String;)Z
com.android.server.remoteappmode.RemoteAppModeService.registerStartActivityInterceptListener(Lcom/samsung/android/remoteappmode/IStartActivityInterceptListener;Ljava/lang/String;)Z
com.android.server.remoteappmode.RemoteAppModeService.registerTaskChangeListener(Lcom/samsung/android/remoteappmode/ITaskChangeListener;Ljava/lang/String;)Z
com.android.server.remoteappmode.RemoteAppModeService.releaseVirtualDisplay(I)V
com.android.server.remoteappmode.RemoteAppModeService.resizeVirtualDisplay(IIIILandroid/view/Surface;)V
com.android.server.remoteappmode.RemoteAppModeService.sendNotificationAction(Landroid/service/notification/StatusBarNotification;ILandroid/content/Intent;)Z
com.android.server.remoteappmode.RemoteAppModeService.sendNotificationContent(Landroid/service/notification/StatusBarNotification;)Z
com.android.server.remoteappmode.RemoteAppModeService.sendPendingIntent(Landroid/app/PendingIntent;)V
com.android.server.remoteappmode.RemoteAppModeService.setLTWProtocolVersion(I)V
com.android.server.remoteappmode.RemoteAppModeService.setSendingUserPresentExpiredTime(J)V
com.android.server.remoteappmode.RemoteAppModeService.startRFCommService()V
com.android.server.remoteappmode.RemoteAppModeService.stopRFCommService()V
com.android.server.remoteappmode.RemoteAppModeService.transferTaskWithoutIntercept(IILandroid/os/Bundle;)V
com.android.server.remoteappmode.RemoteAppModeService.unregisterRemoteAppModeListener(Lcom/samsung/android/remoteappmode/IRemoteAppModeListener;)Z
com.android.server.remoteappmode.RemoteAppModeService.unregisterRotationChangeListener(Lcom/samsung/android/remoteappmode/IRotationChangeListener;)Z
com.android.server.remoteappmode.RemoteAppModeService.unregisterSecureAppChangedListener(Lcom/samsung/android/remoteappmode/ISecureAppChangedListener;)Z
com.android.server.remoteappmode.RemoteAppModeService.unregisterStartActivityInterceptListener(Lcom/samsung/android/remoteappmode/IStartActivityInterceptListener;)Z
com.android.server.remoteappmode.RemoteAppModeService.unregisterTaskChangeListener(Lcom/samsung/android/remoteappmode/ITaskChangeListener;)Z
com.android.server.notification.NotificationManagerService$14.addAutomaticZenRule(Landroid/app/AutomaticZenRule;Ljava/lang/String;)Ljava/lang/String;
com.android.server.notification.NotificationManagerService$14.addReplyHistory(ILjava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;)V
com.android.server.notification.NotificationManagerService$14.addWearableAppToList(ILjava/lang/String;)Z
com.android.server.notification.NotificationManagerService$14.allowAssistantAdjustment(Ljava/lang/String;)V
com.android.server.notification.NotificationManagerService$14.applyAdjustmentFromAssistant(Landroid/service/notification/INotificationListener;Landroid/service/notification/Adjustment;)V
com.android.server.notification.NotificationManagerService$14.applyAdjustmentsFromAssistant(Landroid/service/notification/INotificationListener;Ljava/util/List;)V
com.android.server.notification.NotificationManagerService$14.applyEnqueuedAdjustmentFromAssistant(Landroid/service/notification/INotificationListener;Landroid/service/notification/Adjustment;)V
com.android.server.notification.NotificationManagerService$14.applyRestore([BI)V
com.android.server.notification.NotificationManagerService$14.areBubblesAllowed(Ljava/lang/String;)Z
com.android.server.notification.NotificationManagerService$14.areBubblesEnabled(Landroid/os/UserHandle;)Z
com.android.server.notification.NotificationManagerService$14.areChannelsBypassingDnd()Z
com.android.server.notification.NotificationManagerService$14.areNotificationsEnabled(Ljava/lang/String;)Z
com.android.server.notification.NotificationManagerService$14.areNotificationsEnabledForPackage(Ljava/lang/String;I)Z
com.android.server.notification.NotificationManagerService$14.bindEdgeLightingService(Landroid/os/IBinder;ILandroid/content/ComponentName;)V
com.android.server.notification.NotificationManagerService$14.canAppBypassDnd(Ljava/lang/String;I)Z
com.android.server.notification.NotificationManagerService$14.canNotifyAsPackage(Ljava/lang/String;Ljava/lang/String;I)Z
com.android.server.notification.NotificationManagerService$14.canShowBadge(Ljava/lang/String;I)Z
com.android.server.notification.NotificationManagerService$14.cancelAllNotifications(Ljava/lang/String;I)V
com.android.server.notification.NotificationManagerService$14.cancelNotificationByEdge(Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;)V
com.android.server.notification.NotificationManagerService$14.cancelNotificationByGroupKey(Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;)V
com.android.server.notification.NotificationManagerService$14.cancelNotificationFromListener(Landroid/service/notification/INotificationListener;Ljava/lang/String;Ljava/lang/String;I)V
com.android.server.notification.NotificationManagerService$14.cancelNotificationWithTag(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;II)V
com.android.server.notification.NotificationManagerService$14.cancelNotificationsFromListener(Landroid/service/notification/INotificationListener;[Ljava/lang/String;)V
com.android.server.notification.NotificationManagerService$14.cancelToast(Ljava/lang/String;Landroid/os/IBinder;)V
com.android.server.notification.NotificationManagerService$14.cleanUpCallersAfter(J)V
com.android.server.notification.NotificationManagerService$14.clearData(Ljava/lang/String;IZ)V
com.android.server.notification.NotificationManagerService$14.clearRequestedListenerHints(Landroid/service/notification/INotificationListener;)V
com.android.server.notification.NotificationManagerService$14.createConversationNotificationChannelForPackage(Ljava/lang/String;ILandroid/app/NotificationChannel;Ljava/lang/String;)V
com.android.server.notification.NotificationManagerService$14.createNotificationChannelGroups(Ljava/lang/String;Landroid/content/pm/ParceledListSlice;)V
com.android.server.notification.NotificationManagerService$14.createNotificationChannels(Ljava/lang/String;Landroid/content/pm/ParceledListSlice;)V
com.android.server.notification.NotificationManagerService$14.createNotificationChannelsForPackage(Ljava/lang/String;ILandroid/content/pm/ParceledListSlice;)V
com.android.server.notification.NotificationManagerService$14.deleteNotificationChannel(Ljava/lang/String;Ljava/lang/String;)V
com.android.server.notification.NotificationManagerService$14.deleteNotificationChannelGroup(Ljava/lang/String;Ljava/lang/String;)V
com.android.server.notification.NotificationManagerService$14.deleteNotificationHistoryItem(Ljava/lang/String;IJ)V
com.android.server.notification.NotificationManagerService$14.disable(ILjava/lang/String;Landroid/os/IBinder;)V
com.android.server.notification.NotificationManagerService$14.disableEdgeLightingNotification(Ljava/lang/String;Z)V
com.android.server.notification.NotificationManagerService$14.disallowAssistantAdjustment(Ljava/lang/String;)V
com.android.server.notification.NotificationManagerService$14.dispatchDelayedWakeUpAndBlocked(ILjava/lang/String;Ljava/lang/String;)Z
com.android.server.notification.NotificationManagerService$14.dispatchDelayedWakelockAndBlocked(ILjava/lang/String;Ljava/lang/String;I)Z
com.android.server.notification.NotificationManagerService$14.enqueueEdgeNotification(Ljava/lang/String;Ljava/lang/String;ILandroid/os/Bundle;I)V
com.android.server.notification.NotificationManagerService$14.enqueueNotificationWithTag(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILandroid/app/Notification;I)V
com.android.server.notification.NotificationManagerService$14.enqueueTextToast(Ljava/lang/String;Landroid/os/IBinder;Ljava/lang/CharSequence;IILandroid/app/ITransientNotificationCallback;)V
com.android.server.notification.NotificationManagerService$14.enqueueTextToastForDex(Ljava/lang/String;Landroid/os/IBinder;Ljava/lang/CharSequence;IILandroid/app/ITransientNotificationCallback;Ljava/lang/String;I)V
com.android.server.notification.NotificationManagerService$14.enqueueToast(Ljava/lang/String;Landroid/os/IBinder;Landroid/app/ITransientNotification;II)V
com.android.server.notification.NotificationManagerService$14.enqueueToastForDex(Ljava/lang/String;Landroid/os/IBinder;Landroid/app/ITransientNotification;IILjava/lang/String;I)V
com.android.server.notification.NotificationManagerService$14.finishToken(Ljava/lang/String;Landroid/os/IBinder;)V
com.android.server.notification.NotificationManagerService$14.getActiveNotifications(Ljava/lang/String;)[Landroid/service/notification/StatusBarNotification;
com.android.server.notification.NotificationManagerService$14.getActiveNotificationsFromListener(Landroid/service/notification/INotificationListener;[Ljava/lang/String;I)Landroid/content/pm/ParceledListSlice;
com.android.server.notification.NotificationManagerService$14.getActiveNotificationsWithAttribution(Ljava/lang/String;Ljava/lang/String;)[Landroid/service/notification/StatusBarNotification;
com.android.server.notification.NotificationManagerService$14.getAllowedAssistantAdjustments(Ljava/lang/String;)Ljava/util/List;
com.android.server.notification.NotificationManagerService$14.getAllowedNotificationAssistant()Landroid/content/ComponentName;
com.android.server.notification.NotificationManagerService$14.getAllowedNotificationAssistantForUser(I)Landroid/content/ComponentName;
com.android.server.notification.NotificationManagerService$14.getAppActiveNotifications(Ljava/lang/String;I)Landroid/content/pm/ParceledListSlice;
com.android.server.notification.NotificationManagerService$14.getAppsBypassingDndCount(I)I
com.android.server.notification.NotificationManagerService$14.getAutomaticZenRule(Ljava/lang/String;)Landroid/app/AutomaticZenRule;
com.android.server.notification.NotificationManagerService$14.getBackupPayload(I)[B
com.android.server.notification.NotificationManagerService$14.getBlockedAppCount(I)I
com.android.server.notification.NotificationManagerService$14.getBlockedChannelCount(Ljava/lang/String;I)I
com.android.server.notification.NotificationManagerService$14.getBubblePreferenceForPackage(Ljava/lang/String;I)I
com.android.server.notification.NotificationManagerService$14.getConsolidatedNotificationPolicy()Landroid/app/NotificationManager$Policy;
com.android.server.notification.NotificationManagerService$14.getConversationNotificationChannel(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;ZLjava/lang/String;)Landroid/app/NotificationChannel;
com.android.server.notification.NotificationManagerService$14.getConversationPackageList()Ljava/util/List;
com.android.server.notification.NotificationManagerService$14.getConversations(Z)Landroid/content/pm/ParceledListSlice;
com.android.server.notification.NotificationManagerService$14.getConversationsForPackage(Ljava/lang/String;I)Landroid/content/pm/ParceledListSlice;
com.android.server.notification.NotificationManagerService$14.getDefaultNotificationAssistant()Landroid/content/ComponentName;
com.android.server.notification.NotificationManagerService$14.getDeletedChannelCount(Ljava/lang/String;I)I
com.android.server.notification.NotificationManagerService$14.getEdgeLightingState()I
com.android.server.notification.NotificationManagerService$14.getEffectsSuppressor()Landroid/content/ComponentName;
com.android.server.notification.NotificationManagerService$14.getEnabledNotificationListenerPackages()Ljava/util/List;
com.android.server.notification.NotificationManagerService$14.getEnabledNotificationListeners(I)Ljava/util/List;
com.android.server.notification.NotificationManagerService$14.getHintsFromListener(Landroid/service/notification/INotificationListener;)I
com.android.server.notification.NotificationManagerService$14.getHistoricalNotifications(Ljava/lang/String;IZ)[Landroid/service/notification/StatusBarNotification;
com.android.server.notification.NotificationManagerService$14.getHistoricalNotificationsWithAttribution(Ljava/lang/String;Ljava/lang/String;IZ)[Landroid/service/notification/StatusBarNotification;
com.android.server.notification.NotificationManagerService$14.getInterruptionFilterFromListener(Landroid/service/notification/INotificationListener;)I
com.android.server.notification.NotificationManagerService$14.getListenerFilter(Landroid/content/ComponentName;I)Landroid/service/notification/NotificationListenerFilter;
com.android.server.notification.NotificationManagerService$14.getLockScreenNotificationVisibilityForPackage(Ljava/lang/String;I)I
com.android.server.notification.NotificationManagerService$14.getNotificationAlertsEnabledForPackage(Ljava/lang/String;I)Z
com.android.server.notification.NotificationManagerService$14.getNotificationChannel(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;)Landroid/app/NotificationChannel;
com.android.server.notification.NotificationManagerService$14.getNotificationChannelForPackage(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Z)Landroid/app/NotificationChannel;
com.android.server.notification.NotificationManagerService$14.getNotificationChannelGroup(Ljava/lang/String;Ljava/lang/String;)Landroid/app/NotificationChannelGroup;
com.android.server.notification.NotificationManagerService$14.getNotificationChannelGroupForPackage(Ljava/lang/String;Ljava/lang/String;I)Landroid/app/NotificationChannelGroup;
com.android.server.notification.NotificationManagerService$14.getNotificationChannelGroups(Ljava/lang/String;)Landroid/content/pm/ParceledListSlice;
com.android.server.notification.NotificationManagerService$14.getNotificationChannelGroupsForPackage(Ljava/lang/String;IZ)Landroid/content/pm/ParceledListSlice;
com.android.server.notification.NotificationManagerService$14.getNotificationChannelGroupsFromPrivilegedListener(Landroid/service/notification/INotificationListener;Ljava/lang/String;Landroid/os/UserHandle;)Landroid/content/pm/ParceledListSlice;
com.android.server.notification.NotificationManagerService$14.getNotificationChannels(Ljava/lang/String;Ljava/lang/String;I)Landroid/content/pm/ParceledListSlice;
com.android.server.notification.NotificationManagerService$14.getNotificationChannelsBypassingDnd(Ljava/lang/String;I)Landroid/content/pm/ParceledListSlice;
com.android.server.notification.NotificationManagerService$14.getNotificationChannelsForPackage(Ljava/lang/String;IZ)Landroid/content/pm/ParceledListSlice;
com.android.server.notification.NotificationManagerService$14.getNotificationChannelsFromPrivilegedListener(Landroid/service/notification/INotificationListener;Ljava/lang/String;Landroid/os/UserHandle;)Landroid/content/pm/ParceledListSlice;
com.android.server.notification.NotificationManagerService$14.getNotificationDelegate(Ljava/lang/String;)Ljava/lang/String;
com.android.server.notification.NotificationManagerService$14.getNotificationHistory(Ljava/lang/String;Ljava/lang/String;)Landroid/app/NotificationHistory;
com.android.server.notification.NotificationManagerService$14.getNotificationHistoryDataForPackage(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;I)Ljava/util/List;
com.android.server.notification.NotificationManagerService$14.getNotificationHistoryForPackage(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;I)Landroid/app/NotificationHistory;
com.android.server.notification.NotificationManagerService$14.getNotificationPolicy(Ljava/lang/String;)Landroid/app/NotificationManager$Policy;
com.android.server.notification.NotificationManagerService$14.getNumNotificationChannelsForPackage(Ljava/lang/String;IZ)I
com.android.server.notification.NotificationManagerService$14.getPackageImportance(Ljava/lang/String;)I
com.android.server.notification.NotificationManagerService$14.getPopulatedNotificationChannelGroupForPackage(Ljava/lang/String;ILjava/lang/String;Z)Landroid/app/NotificationChannelGroup;
com.android.server.notification.NotificationManagerService$14.getPrivateNotificationsAllowed()Z
com.android.server.notification.NotificationManagerService$14.getRuleInstanceCount(Landroid/content/ComponentName;)I
com.android.server.notification.NotificationManagerService$14.getSnoozedNotificationsFromListener(Landroid/service/notification/INotificationListener;I)Landroid/content/pm/ParceledListSlice;
com.android.server.notification.NotificationManagerService$14.getWearableAppList(I)Ljava/util/List;
com.android.server.notification.NotificationManagerService$14.getZenMode()I
com.android.server.notification.NotificationManagerService$14.getZenModeConfig()Landroid/service/notification/ZenModeConfig;
com.android.server.notification.NotificationManagerService$14.getZenRules()Ljava/util/List;
com.android.server.notification.NotificationManagerService$14.hasEnabledNotificationListener(Ljava/lang/String;I)Z
com.android.server.notification.NotificationManagerService$14.hasSentValidBubble(Ljava/lang/String;I)Z
com.android.server.notification.NotificationManagerService$14.hasSentValidMsg(Ljava/lang/String;I)Z
com.android.server.notification.NotificationManagerService$14.hasUserDemotedInvalidMsgApp(Ljava/lang/String;I)Z
com.android.server.notification.NotificationManagerService$14.isAlertsAllowed(Ljava/lang/String;ILjava/lang/String;I)Z
com.android.server.notification.NotificationManagerService$14.isAllowNotificationPopUpForPackage(Ljava/lang/String;I)Z
com.android.server.notification.NotificationManagerService$14.isEdgeLightingAllowed(Ljava/lang/String;I)Z
com.android.server.notification.NotificationManagerService$14.isEdgeLightingNotificationAllowed(Ljava/lang/String;)Z
com.android.server.notification.NotificationManagerService$14.isImportanceLocked(Ljava/lang/String;I)Z
com.android.server.notification.NotificationManagerService$14.isInCall(Ljava/lang/String;I)Z
com.android.server.notification.NotificationManagerService$14.isInInvalidMsgState(Ljava/lang/String;I)Z
com.android.server.notification.NotificationManagerService$14.isNotificationAssistantAccessGranted(Landroid/content/ComponentName;)Z
com.android.server.notification.NotificationManagerService$14.isNotificationListenerAccessGranted(Landroid/content/ComponentName;)Z
com.android.server.notification.NotificationManagerService$14.isNotificationListenerAccessGrantedForUser(Landroid/content/ComponentName;I)Z
com.android.server.notification.NotificationManagerService$14.isNotificationPolicyAccessGranted(Ljava/lang/String;)Z
com.android.server.notification.NotificationManagerService$14.isNotificationPolicyAccessGrantedForPackage(Ljava/lang/String;)Z
com.android.server.notification.NotificationManagerService$14.isPackageEnabled(Ljava/lang/String;I)Z
com.android.server.notification.NotificationManagerService$14.isPackagePaused(Ljava/lang/String;)Z
com.android.server.notification.NotificationManagerService$14.isPermissionFixed(Ljava/lang/String;I)Z
com.android.server.notification.NotificationManagerService$14.isReminderEnabled(Ljava/lang/String;I)Z
com.android.server.notification.NotificationManagerService$14.isSubDisplayNotificationAllowed(Ljava/lang/String;I)Z
com.android.server.notification.NotificationManagerService$14.isSystemConditionProviderEnabled(Ljava/lang/String;)Z
com.android.server.notification.NotificationManagerService$14.matchesCallFilter(Landroid/os/Bundle;)Z
com.android.server.notification.NotificationManagerService$14.migrateNotificationFilter(Landroid/service/notification/INotificationListener;ILjava/util/List;)V
com.android.server.notification.NotificationManagerService$14.notifyConditions(Ljava/lang/String;Landroid/service/notification/IConditionProvider;[Landroid/service/notification/Condition;)V
com.android.server.notification.NotificationManagerService$14.onlyHasDefaultChannel(Ljava/lang/String;I)Z
com.android.server.notification.NotificationManagerService$14.pullStats(JIZLjava/util/List;)J
com.android.server.notification.NotificationManagerService$14.registerEdgeLightingListener(Landroid/os/IBinder;Landroid/content/ComponentName;)V
com.android.server.notification.NotificationManagerService$14.registerListener(Landroid/service/notification/INotificationListener;Landroid/content/ComponentName;I)V
com.android.server.notification.NotificationManagerService$14.registerNotificationListener(Landroid/content/ComponentName;IZ)V
com.android.server.notification.NotificationManagerService$14.removeAutomaticZenRule(Ljava/lang/String;)Z
com.android.server.notification.NotificationManagerService$14.removeAutomaticZenRules(Ljava/lang/String;)Z
com.android.server.notification.NotificationManagerService$14.removeEdgeNotification(Ljava/lang/String;ILandroid/os/Bundle;I)V
com.android.server.notification.NotificationManagerService$14.removeWearableAppFromList(ILjava/lang/String;)Z
com.android.server.notification.NotificationManagerService$14.requestBindListener(Landroid/content/ComponentName;)V
com.android.server.notification.NotificationManagerService$14.requestBindProvider(Landroid/content/ComponentName;)V
com.android.server.notification.NotificationManagerService$14.requestHintsFromListener(Landroid/service/notification/INotificationListener;I)V
com.android.server.notification.NotificationManagerService$14.requestInterruptionFilterFromListener(Landroid/service/notification/INotificationListener;I)V
com.android.server.notification.NotificationManagerService$14.requestListenerHintsForWearable(I)Z
com.android.server.notification.NotificationManagerService$14.requestUnbindListener(Landroid/service/notification/INotificationListener;)V
com.android.server.notification.NotificationManagerService$14.requestUnbindProvider(Landroid/service/notification/IConditionProvider;)V
com.android.server.notification.NotificationManagerService$14.resetDefaultAllowEdgeLighting()V
com.android.server.notification.NotificationManagerService$14.setAllowEdgeLighting(Ljava/lang/String;IZ)V
com.android.server.notification.NotificationManagerService$14.setAllowNotificationPopUpForPackage(Ljava/lang/String;IZ)V
com.android.server.notification.NotificationManagerService$14.setAllowSubDisplayNotification(Ljava/lang/String;IZ)V
com.android.server.notification.NotificationManagerService$14.setAppBypassDnd(Ljava/lang/String;IZ)V
com.android.server.notification.NotificationManagerService$14.setAutomaticZenRuleState(Ljava/lang/String;Landroid/service/notification/Condition;)V
com.android.server.notification.NotificationManagerService$14.setBubblesAllowed(Ljava/lang/String;II)V
com.android.server.notification.NotificationManagerService$14.setHideSilentStatusIcons(Z)V
com.android.server.notification.NotificationManagerService$14.setInterruptionFilter(Ljava/lang/String;I)V
com.android.server.notification.NotificationManagerService$14.setInvalidMsgAppDemoted(Ljava/lang/String;IZ)V
com.android.server.notification.NotificationManagerService$14.setListenerFilter(Landroid/content/ComponentName;ILandroid/service/notification/NotificationListenerFilter;)V
com.android.server.notification.NotificationManagerService$14.setLockScreenNotificationVisibilityForPackage(Ljava/lang/String;II)V
com.android.server.notification.NotificationManagerService$14.setNASMigrationDoneAndResetDefault(IZ)V
com.android.server.notification.NotificationManagerService$14.setNotificationAlertsEnabledForPackage(Ljava/lang/String;IZ)V
com.android.server.notification.NotificationManagerService$14.setNotificationAssistantAccessGranted(Landroid/content/ComponentName;Z)V
com.android.server.notification.NotificationManagerService$14.setNotificationAssistantAccessGrantedForUser(Landroid/content/ComponentName;IZ)V
com.android.server.notification.NotificationManagerService$14.setNotificationDelegate(Ljava/lang/String;Ljava/lang/String;)V
com.android.server.notification.NotificationManagerService$14.setNotificationListenerAccessGranted(Landroid/content/ComponentName;ZZ)V
com.android.server.notification.NotificationManagerService$14.setNotificationListenerAccessGrantedForUser(Landroid/content/ComponentName;IZZ)V
com.android.server.notification.NotificationManagerService$14.setNotificationPolicy(Ljava/lang/String;Landroid/app/NotificationManager$Policy;)V
com.android.server.notification.NotificationManagerService$14.setNotificationPolicyAccessGranted(Ljava/lang/String;Z)V
com.android.server.notification.NotificationManagerService$14.setNotificationPolicyAccessGrantedForUser(Ljava/lang/String;IZ)V
com.android.server.notification.NotificationManagerService$14.setNotificationsEnabledForPackage(Ljava/lang/String;IZ)V
com.android.server.notification.NotificationManagerService$14.setNotificationsEnabledWithImportanceLockForPackage(Ljava/lang/String;IZ)V
com.android.server.notification.NotificationManagerService$14.setNotificationsShownFromListener(Landroid/service/notification/INotificationListener;[Ljava/lang/String;)V
com.android.server.notification.NotificationManagerService$14.setOnNotificationPostedTrimFromListener(Landroid/service/notification/INotificationListener;I)V
com.android.server.notification.NotificationManagerService$14.setPrivateNotificationsAllowed(Z)V
com.android.server.notification.NotificationManagerService$14.setReminderEnabled(IZLjava/util/List;)V
com.android.server.notification.NotificationManagerService$14.setReminderEnabledForPackage(Ljava/lang/String;IZ)V
com.android.server.notification.NotificationManagerService$14.setShowBadge(Ljava/lang/String;IZ)V
com.android.server.notification.NotificationManagerService$14.setToastRateLimitingEnabled(Z)V
com.android.server.notification.NotificationManagerService$14.setWearableAppList(ILjava/util/List;)Z
com.android.server.notification.NotificationManagerService$14.setZenMode(ILandroid/net/Uri;Ljava/lang/String;)V
com.android.server.notification.NotificationManagerService$14.shouldHideSilentStatusIcons(Ljava/lang/String;)Z
com.android.server.notification.NotificationManagerService$14.silenceNotificationSound()V
com.android.server.notification.NotificationManagerService$14.snoozeNotificationUntilContextFromListener(Landroid/service/notification/INotificationListener;Ljava/lang/String;Ljava/lang/String;)V
com.android.server.notification.NotificationManagerService$14.snoozeNotificationUntilFromListener(Landroid/service/notification/INotificationListener;Ljava/lang/String;J)V
com.android.server.notification.NotificationManagerService$14.startEdgeLighting(Ljava/lang/String;Lcom/samsung/android/edge/SemEdgeLightingInfo;Landroid/os/IBinder;)V
com.android.server.notification.NotificationManagerService$14.stopEdgeLighting(Ljava/lang/String;Landroid/os/IBinder;)V
com.android.server.notification.NotificationManagerService$14.unbindEdgeLightingService(Landroid/os/IBinder;Ljava/lang/String;)V
com.android.server.notification.NotificationManagerService$14.unlockAllNotificationChannels()V
com.android.server.notification.NotificationManagerService$14.unlockNotificationChannel(Ljava/lang/String;ILjava/lang/String;)V
com.android.server.notification.NotificationManagerService$14.unregisterEdgeLightingListener(Landroid/os/IBinder;Ljava/lang/String;)V
com.android.server.notification.NotificationManagerService$14.unregisterListener(Landroid/service/notification/INotificationListener;I)V
com.android.server.notification.NotificationManagerService$14.unsnoozeNotificationFromAssistant(Landroid/service/notification/INotificationListener;Ljava/lang/String;)V
com.android.server.notification.NotificationManagerService$14.unsnoozeNotificationFromSystemListener(Landroid/service/notification/INotificationListener;Ljava/lang/String;)V
com.android.server.notification.NotificationManagerService$14.updateAutomaticZenRule(Ljava/lang/String;Landroid/app/AutomaticZenRule;)Z
com.android.server.notification.NotificationManagerService$14.updateCancelEvent(ILjava/lang/String;Z)V
com.android.server.notification.NotificationManagerService$14.updateEdgeLightingPackageList(Ljava/lang/String;Ljava/util/List;)V
com.android.server.notification.NotificationManagerService$14.updateEdgeLightingPolicy(Ljava/lang/String;Lcom/samsung/android/edge/EdgeLightingPolicy;)V
com.android.server.notification.NotificationManagerService$14.updateNotificationChannelForPackage(Ljava/lang/String;ILandroid/app/NotificationChannel;)V
com.android.server.notification.NotificationManagerService$14.updateNotificationChannelFromPrivilegedListener(Landroid/service/notification/INotificationListener;Ljava/lang/String;Landroid/os/UserHandle;Landroid/app/NotificationChannel;)V
com.android.server.notification.NotificationManagerService$14.updateNotificationChannelGroupForPackage(Ljava/lang/String;ILandroid/app/NotificationChannelGroup;)V
com.android.server.notification.NotificationManagerService$14.updateNotificationChannelGroupFromPrivilegedListener(Landroid/service/notification/INotificationListener;Ljava/lang/String;Landroid/os/UserHandle;Landroid/app/NotificationChannelGroup;)V
com.android.server.notification.NotificationManagerService$14.updateNotificationChannels(Ljava/lang/String;Landroid/content/pm/ParceledListSlice;)V
com.android.internal.telephony.SemPhoneSubInfoController.changeDRX(III)Z
com.android.internal.telephony.SemPhoneSubInfoController.changeDRXForKodiak(II)Z
com.android.internal.telephony.SemPhoneSubInfoController.getCurrentCycle(I)I
com.android.internal.telephony.SemPhoneSubInfoController.getCurrentModeForKodiak()I
com.android.internal.telephony.SemPhoneSubInfoController.getDataServiceState()I
com.android.internal.telephony.SemPhoneSubInfoController.getDataServiceStateUsingSubId(I)I
com.android.internal.telephony.SemPhoneSubInfoController.getDefaultCycle(I)I
com.android.internal.telephony.SemPhoneSubInfoController.getDefaultCycleForKodiak()I
com.android.internal.telephony.SemPhoneSubInfoController.getDrxMode()I
com.android.internal.telephony.SemPhoneSubInfoController.getSupportedCycles(I)[I
com.android.internal.telephony.SemPhoneSubInfoController.getSupportedModesForKodiak()[I
com.android.internal.telephony.SemPhoneSubInfoController.getUwbTimers()[I
com.android.internal.telephony.SemPhoneSubInfoController.hasCall(Ljava/lang/String;)Z
com.android.internal.telephony.SemPhoneSubInfoController.setDrxMode(I)Z
com.android.internal.telephony.SemPhoneSubInfoController.setUwbTimers([I)Z
com.samsung.android.server.continuity.SemContinuityServiceImpl.cancelDownload(Ljava/lang/String;I)V
com.samsung.android.server.continuity.SemContinuityServiceImpl.clearLocalClip(I)V
com.samsung.android.server.continuity.SemContinuityServiceImpl.registerContinuityCopyListener(Lcom/samsung/android/continuity/ISemContinuitySimpleListener;I)V
com.samsung.android.server.continuity.SemContinuityServiceImpl.requestDownload(Ljava/lang/String;Lcom/samsung/android/continuity/ISemContinuitySimpleListener;I)Z
com.samsung.android.server.continuity.SemContinuityServiceImpl.setLocalClip(Landroid/os/Bundle;I)V
com.samsung.android.server.continuity.SemContinuityServiceImpl.unregisterContinuityCopyListener(I)V
com.samsung.android.server.continuity.AbstractSemContinuityServiceImpl.getNearbyDeviceCount(II)I
com.android.server.webkit.WebViewUpdateService$BinderService.changeProviderAndSetting(Ljava/lang/String;)Ljava/lang/String;
com.android.server.webkit.WebViewUpdateService$BinderService.enableMultiProcess(Z)V
com.android.server.webkit.WebViewUpdateService$BinderService.getAllWebViewPackages()[Landroid/webkit/WebViewProviderInfo;
com.android.server.webkit.WebViewUpdateService$BinderService.getCurrentWebViewPackage()Landroid/content/pm/PackageInfo;
com.android.server.webkit.WebViewUpdateService$BinderService.getCurrentWebViewPackageName()Ljava/lang/String;
com.android.server.webkit.WebViewUpdateService$BinderService.getValidWebViewPackages()[Landroid/webkit/WebViewProviderInfo;
com.android.server.webkit.WebViewUpdateService$BinderService.isMultiProcessEnabled()Z
com.android.server.webkit.WebViewUpdateService$BinderService.notifyRelroCreationCompleted()V
com.android.server.webkit.WebViewUpdateService$BinderService.waitForAndGetProvider()Landroid/webkit/WebViewProviderResponse;
com.android.server.enterprise.smartcard.SmartCardBrowserPolicy.disableAuthentication(Lcom/samsung/android/knox/ContextInfo;)Z
com.android.server.enterprise.smartcard.SmartCardBrowserPolicy.enableAuthentication(Lcom/samsung/android/knox/ContextInfo;)Z
com.android.server.enterprise.smartcard.SmartCardBrowserPolicy.getClientCertificateAlias(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;I)Ljava/lang/String;
com.android.server.enterprise.smartcard.SmartCardBrowserPolicy.isAuthenticationEnabled(Lcom/samsung/android/knox/ContextInfo;)Z
com.android.server.enterprise.smartcard.SmartCardBrowserPolicy.removeClientCertificateAlias(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;I)Z
com.android.server.enterprise.smartcard.SmartCardBrowserPolicy.setClientCertificateAlias(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;ILjava/lang/String;)Z
com.android.server.media.MediaResourceMonitorService$MediaResourceMonitorImpl.notifyMediaInfo(ILandroid/media/MediaMonitorEvent;)V
com.android.server.am.ActivityManagerService$ProcessInfoService.getProcessStatesAndOomScoresFromPids([I[I[I)V
com.android.server.am.ActivityManagerService$ProcessInfoService.getProcessStatesFromPids([I[I)V
com.android.server.locksettings.LockSettingsService.addLog(ILjava/lang/String;)V
com.android.server.locksettings.LockSettingsService.changeToken([BJ[BJI)Z
com.android.server.locksettings.LockSettingsService.checkAppLockBackupPin(Ljava/lang/String;I)Z
com.android.server.locksettings.LockSettingsService.checkAppLockFingerprintPassword(Ljava/lang/String;I)Z
com.android.server.locksettings.LockSettingsService.checkAppLockPassword(Ljava/lang/String;I)Z
com.android.server.locksettings.LockSettingsService.checkAppLockPatternWithHash(Ljava/lang/String;I[B)Z
com.android.server.locksettings.LockSettingsService.checkAppLockPin(Ljava/lang/String;I)Z
com.android.server.locksettings.LockSettingsService.checkCarrierPassword([BI)Z
com.android.server.locksettings.LockSettingsService.checkCredentialForDualDarDo(Lcom/android/internal/widget/LockscreenCredential;IILcom/samsung/android/knox/dar/ddar/IDualDarAuthProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse;
com.android.server.locksettings.LockSettingsService.checkFMMPassword([BI)Z
com.android.server.locksettings.LockSettingsService.checkRemoteLockPassword(I[BILandroid/os/IRemoteCallback;)V
com.android.server.locksettings.LockSettingsService.getCarrierLock(I)Z
com.android.server.locksettings.LockSettingsService.haveAppLockBackupPin(I)Z
com.android.server.locksettings.LockSettingsService.haveAppLockFingerprintPassword(I)Z
com.android.server.locksettings.LockSettingsService.haveAppLockPassword(I)Z
com.android.server.locksettings.LockSettingsService.haveAppLockPattern(I)Z
com.android.server.locksettings.LockSettingsService.haveAppLockPin(I)Z
com.android.server.locksettings.LockSettingsService.haveCarrierPassword(I)Z
com.android.server.locksettings.LockSettingsService.haveFMMPassword(I)Z
com.android.server.locksettings.LockSettingsService.isLockPasswordValid(I)Z
com.android.server.locksettings.LockSettingsService.notifyPasswordChangedForEnterpriseUser(Lcom/android/internal/widget/LockscreenCredential;I)V
com.android.server.locksettings.LockSettingsService.registerRemoteLockCallback(ILcom/android/internal/widget/IRemoteLockMonitorCallback;)V
com.android.server.locksettings.LockSettingsService.requestRemoteLockInfo(I)V
com.android.server.locksettings.LockSettingsService.sendLockTypeChangedInfo(I)V
com.android.server.locksettings.LockSettingsService.setAppLockBackupPin(Ljava/lang/String;I)V
com.android.server.locksettings.LockSettingsService.setAppLockFingerprintPassword(Ljava/lang/String;I)V
com.android.server.locksettings.LockSettingsService.setAppLockPassword(Ljava/lang/String;I)V
com.android.server.locksettings.LockSettingsService.setAppLockPattern(Ljava/lang/String;I)V
com.android.server.locksettings.LockSettingsService.setAppLockPin(Ljava/lang/String;I)V
com.android.server.locksettings.LockSettingsService.setCarrierLockEnabled(I)V
com.android.server.locksettings.LockSettingsService.setKnoxGuard(ILcom/android/internal/widget/RemoteLockInfo;)Z
com.android.server.locksettings.LockSettingsService.setLockCarrierPassword([BI)V
com.android.server.locksettings.LockSettingsService.setLockCredentialWithIgnoreNotifyIfNeeded(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/LockscreenCredential;IZ)Z
com.android.server.locksettings.LockSettingsService.setLockFMMPassword([BI)V
com.android.server.locksettings.LockSettingsService.setLockModeChangedCallback(Landroid/os/IRemoteCallback;)V
com.android.server.locksettings.LockSettingsService.setRemoteLock(ILcom/android/internal/widget/RemoteLockInfo;)V
com.android.server.locksettings.LockSettingsService.setSecurityDebugLevel(I)V
com.android.server.locksettings.LockSettingsService.setShellCommandCallback(Landroid/os/IRemoteCallback;)V
com.android.server.locksettings.LockSettingsService.unregisterRemoteLockCallback(ILcom/android/internal/widget/IRemoteLockMonitorCallback;)V
com.android.server.locksettings.LockSettingsService.updateCarrierLock(I)Z
com.android.server.locksettings.LockSettingsService.verifyToken([BJI)Lcom/android/internal/widget/VerifyCredentialResponse;
com.android.server.appwidget.AppWidgetServiceImpl.allocateAppWidgetId(Ljava/lang/String;I)I
com.android.server.appwidget.AppWidgetServiceImpl.bindAppWidgetId(Ljava/lang/String;IILandroid/content/ComponentName;Landroid/os/Bundle;)Z
com.android.server.appwidget.AppWidgetServiceImpl.bindRemoteViewsService(Ljava/lang/String;ILandroid/content/Intent;Landroid/app/IApplicationThread;Landroid/os/IBinder;Landroid/app/IServiceConnection;I)Z
com.android.server.appwidget.AppWidgetServiceImpl.changeHostIds(Ljava/lang/String;[II)V
com.android.server.appwidget.AppWidgetServiceImpl.createAppWidgetConfigIntentSender(Ljava/lang/String;II)Landroid/content/IntentSender;
com.android.server.appwidget.AppWidgetServiceImpl.deleteAllHosts()V
com.android.server.appwidget.AppWidgetServiceImpl.deleteAppWidgetId(Ljava/lang/String;I)V
com.android.server.appwidget.AppWidgetServiceImpl.deleteHost(Ljava/lang/String;I)V
com.android.server.appwidget.AppWidgetServiceImpl.getAllProvidersForProfile(IIZ)Ljava/util/List;
com.android.server.appwidget.AppWidgetServiceImpl.getAllWidgets(Ljava/lang/String;I)Ljava/util/Map;
com.android.server.appwidget.AppWidgetServiceImpl.getAppWidgetIds(Landroid/content/ComponentName;)[I
com.android.server.appwidget.AppWidgetServiceImpl.getAppWidgetIdsForHost(Ljava/lang/String;I)[I
com.android.server.appwidget.AppWidgetServiceImpl.getAppWidgetInfo(Ljava/lang/String;I)Landroid/appwidget/AppWidgetProviderInfo;
com.android.server.appwidget.AppWidgetServiceImpl.getAppWidgetOptions(Ljava/lang/String;I)Landroid/os/Bundle;
com.android.server.appwidget.AppWidgetServiceImpl.getAppWidgetViews(Ljava/lang/String;I)Landroid/widget/RemoteViews;
com.android.server.appwidget.AppWidgetServiceImpl.getInstalledProvidersForProfile(IILjava/lang/String;)Landroid/content/pm/ParceledListSlice;
com.android.server.appwidget.AppWidgetServiceImpl.hasBindAppWidgetPermission(Ljava/lang/String;I)Z
com.android.server.appwidget.AppWidgetServiceImpl.isBoundWidgetPackage(Ljava/lang/String;I)Z
com.android.server.appwidget.AppWidgetServiceImpl.isRequestPinAppWidgetSupported()Z
com.android.server.appwidget.AppWidgetServiceImpl.noteAppWidgetTapped(Ljava/lang/String;I)V
com.android.server.appwidget.AppWidgetServiceImpl.notifyAppWidgetViewDataChanged(Ljava/lang/String;[II)V
com.android.server.appwidget.AppWidgetServiceImpl.partiallyUpdateAppWidgetIds(Ljava/lang/String;[ILandroid/widget/RemoteViews;)V
com.android.server.appwidget.AppWidgetServiceImpl.requestPinAppWidget(Ljava/lang/String;Landroid/content/ComponentName;Landroid/os/Bundle;Landroid/content/IntentSender;)Z
com.android.server.appwidget.AppWidgetServiceImpl.semCreateAppWidgetConfigIntentSender(Ljava/lang/String;II)Landroid/content/IntentSender;
com.android.server.appwidget.AppWidgetServiceImpl.setBindAppWidgetPermission(Ljava/lang/String;IZ)V
com.android.server.appwidget.AppWidgetServiceImpl.startListening(Lcom/android/internal/appwidget/IAppWidgetHost;Ljava/lang/String;I[I)Landroid/content/pm/ParceledListSlice;
com.android.server.appwidget.AppWidgetServiceImpl.stopListening(Ljava/lang/String;I)V
com.android.server.appwidget.AppWidgetServiceImpl.updateAppWidgetIds(Ljava/lang/String;[ILandroid/widget/RemoteViews;)V
com.android.server.appwidget.AppWidgetServiceImpl.updateAppWidgetOptions(Ljava/lang/String;ILandroid/os/Bundle;)V
com.android.server.appwidget.AppWidgetServiceImpl.updateAppWidgetProvider(Landroid/content/ComponentName;Landroid/widget/RemoteViews;)V
com.android.server.appwidget.AppWidgetServiceImpl.updateAppWidgetProviderInfo(Landroid/content/ComponentName;Ljava/lang/String;)V
com.android.server.search.SearchManagerService.getSearchablesInInsightSearch(Z)Ljava/util/List;
com.samsung.android.knox.custom.KnoxCustomManagerService.addAutoCallNumber(Ljava/lang/String;II)I
com.samsung.android.knox.custom.KnoxCustomManagerService.addDexShortcut(IILandroid/content/ComponentName;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.addDexURLShortcut(IILjava/lang/String;Ljava/lang/String;Landroid/content/ComponentName;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.addDexURLShortcutExtend(IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/content/ComponentName;Landroid/os/ParcelFileDescriptor;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.addPackagesToUltraPowerSaving(Ljava/util/List;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.addRoleHolder(Ljava/lang/String;Ljava/lang/String;)Z
com.samsung.android.knox.custom.KnoxCustomManagerService.addShortcut(IIILjava/lang/String;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.addWidget(IIIIILjava/lang/String;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.allowDexAutoOpenLastApp(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.checkEnterprisePermission(Ljava/lang/String;)Z
com.samsung.android.knox.custom.KnoxCustomManagerService.clearAnimation(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.clearDexLoadingLogo()I
com.samsung.android.knox.custom.KnoxCustomManagerService.clearForcedDisplaySizeDensity()I
com.samsung.android.knox.custom.KnoxCustomManagerService.deleteHomeScreenPage(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.dialEmergencyNumber(Ljava/lang/String;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.getAccessibilitySettingsItems()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getAirGestureOptionState(I)Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getAppBlockDownloadNamespaces()Ljava/util/List;
com.samsung.android.knox.custom.KnoxCustomManagerService.getAppBlockDownloadState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getApplicationRestrictionsInternal(Ljava/lang/String;I)Landroid/os/Bundle;
com.samsung.android.knox.custom.KnoxCustomManagerService.getAppsButtonState()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getAsoc()Ljava/lang/String;
com.samsung.android.knox.custom.KnoxCustomManagerService.getAutoCallNumberAnswerMode(Ljava/lang/String;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.getAutoCallNumberDelay(Ljava/lang/String;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.getAutoCallNumberList()Ljava/util/List;
com.samsung.android.knox.custom.KnoxCustomManagerService.getAutoCallPickupState()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getAutoRotationState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getBackupRestoreState(I)Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getBatteryLevelColourItem()Lcom/samsung/android/knox/custom/StatusbarIconItem;
com.samsung.android.knox.custom.KnoxCustomManagerService.getBsoh()Ljava/lang/String;
com.samsung.android.knox.custom.KnoxCustomManagerService.getBsohUnbiased()Ljava/lang/String;
com.samsung.android.knox.custom.KnoxCustomManagerService.getCallScreenDisabledItems()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getChargerConnectionSoundEnabledState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getChargingLEDState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getDeviceSpeakerEnabledState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getDexForegroundModePackageList()Ljava/util/List;
com.samsung.android.knox.custom.KnoxCustomManagerService.getDexHDMIAutoEnterState()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getDexHomeAlignment()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getDexScreenTimeout()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getDisplayMirroringState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getExitUI(I)Ljava/lang/String;
com.samsung.android.knox.custom.KnoxCustomManagerService.getExtendedCallInfoState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getFavoriteApp(I)Ljava/lang/String;
com.samsung.android.knox.custom.KnoxCustomManagerService.getFavoriteAppsMaxCount()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getForceAutoShutDownState()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getForceAutoStartUpState()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getGearNotificationState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getHardKeyBlockState(II)I
com.samsung.android.knox.custom.KnoxCustomManagerService.getHardKeyIntentBroadcast(II)I
com.samsung.android.knox.custom.KnoxCustomManagerService.getHardKeyIntentMode()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getHardKeyIntentState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getHardKeyReportState(II)I
com.samsung.android.knox.custom.KnoxCustomManagerService.getHideNotificationMessages()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getHomeActivity()Ljava/lang/String;
com.samsung.android.knox.custom.KnoxCustomManagerService.getHomeScreenMode()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getInfraredState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getInputMethodRestrictionState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getKeyboardMode()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getKeyboardModeOverriden(I)Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getLTESettingState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getLcdBacklightState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getLoadingLogoPath()Ljava/lang/String;
com.samsung.android.knox.custom.KnoxCustomManagerService.getLockScreenHiddenItems()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getLockScreenOverrideMode()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getLockScreenShortcut(I)Ljava/lang/String;
com.samsung.android.knox.custom.KnoxCustomManagerService.getMacAddress()Ljava/lang/String;
com.samsung.android.knox.custom.KnoxCustomManagerService.getMobileNetworkType()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getMotionControlState(I)Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getPowerDialogCustomItems()Ljava/util/List;
com.samsung.android.knox.custom.KnoxCustomManagerService.getPowerDialogCustomItemsState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getPowerDialogItems()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getPowerDialogOptionMode()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getPowerMenuLockedState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getPowerSavingMode()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getProKioskNotificationMessagesState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getProKioskPowerDialogCustomItems()Ljava/util/List;
com.samsung.android.knox.custom.KnoxCustomManagerService.getProKioskPowerDialogCustomItemsState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getProKioskState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getProKioskStatusBarClockState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getProKioskStatusBarIconsState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getProKioskStatusBarMode()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getProKioskString(I)Ljava/lang/String;
com.samsung.android.knox.custom.KnoxCustomManagerService.getProKioskUsbMassStorageState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getProKioskUsbNetAddress(I)Ljava/lang/String;
com.samsung.android.knox.custom.KnoxCustomManagerService.getProKioskUsbNetState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getProtectBatteryState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getQuickPanelButtons()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getQuickPanelEditMode()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getQuickPanelItems()Ljava/lang/String;
com.samsung.android.knox.custom.KnoxCustomManagerService.getRecentLongPressActivity()Ljava/lang/String;
com.samsung.android.knox.custom.KnoxCustomManagerService.getRecentLongPressMode()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getRoleHolders(Ljava/lang/String;)Ljava/util/List;
com.samsung.android.knox.custom.KnoxCustomManagerService.getScreenOffOnHomeLongPressState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getScreenOffOnStatusBarDoubleTapState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getScreenTimeout()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getScreenWakeupOnPowerState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getSensorDisabled()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getSerialNumber()Ljava/lang/String;
com.samsung.android.knox.custom.KnoxCustomManagerService.getSettingsEnabledItems()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getSettingsHiddenState()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getShowIMEWithHardKeyboard()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getStatusBarClockState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getStatusBarIconsState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getStatusBarMode()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getStatusBarNotificationsState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getStatusBarText()Ljava/lang/String;
com.samsung.android.knox.custom.KnoxCustomManagerService.getStatusBarTextScrollWidth()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getStatusBarTextSize()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getStatusBarTextStyle()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getSystemSoundsEnabledState()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getTcpDump()Landroid/os/ParcelFileDescriptor;
com.samsung.android.knox.custom.KnoxCustomManagerService.getToastEnabledState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getToastGravity()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getToastGravityEnabledState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getToastGravityXOffset()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getToastGravityYOffset()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getToastShowPackageNameState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getTorchOnVolumeButtonsState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getUltraPowerSavingPackages()Ljava/util/List;
com.samsung.android.knox.custom.KnoxCustomManagerService.getUnlockSimOnBootState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getUnlockSimPin()Ljava/lang/String;
com.samsung.android.knox.custom.KnoxCustomManagerService.getUsbConnectionType()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getUsbConnectionTypeInternal()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getUsbMassStorageState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getUsbNetAddress(I)Ljava/lang/String;
com.samsung.android.knox.custom.KnoxCustomManagerService.getUsbNetState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getUsbNetStateInternal()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getUserInactivityTimeout()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getVibrationIntensity(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.getVolumeButtonRotationState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getVolumeControlStream()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getVolumeKeyAppState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getVolumeKeyAppsList()Ljava/util/List;
com.samsung.android.knox.custom.KnoxCustomManagerService.getVolumePanelEnabledState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getWifiConnectionMonitorState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getWifiFrequencyBand()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getWifiHotspotEnabledState()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getWifiState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getZeroPageState()I
com.samsung.android.knox.custom.KnoxCustomManagerService.isDexAutoOpenLastAppAllowed()I
com.samsung.android.knox.custom.KnoxCustomManagerService.isSupportedForceAutoStartUpState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.migrateApplicationRestrictions()V
com.samsung.android.knox.custom.KnoxCustomManagerService.powerOff()I
com.samsung.android.knox.custom.KnoxCustomManagerService.registerSystemUiCallback(Lcom/samsung/android/knox/custom/IKnoxCustomManagerSystemUiCallback;)Z
com.samsung.android.knox.custom.KnoxCustomManagerService.removeAutoCallNumber(Ljava/lang/String;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.removeDexShortcut(Landroid/content/ComponentName;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.removeDexURLShortcut(Ljava/lang/String;Landroid/content/ComponentName;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.removeFavoriteApp(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.removeLockScreen()I
com.samsung.android.knox.custom.KnoxCustomManagerService.removePackagesFromUltraPowerSaving(Ljava/util/List;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.removeRoleHolder(Ljava/lang/String;Ljava/lang/String;)Z
com.samsung.android.knox.custom.KnoxCustomManagerService.removeShortcut(Ljava/lang/String;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.removeWidget(Ljava/lang/String;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setAccessibilitySettingsItems(II)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setAdbState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setAirGestureOptionState(IZ)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setAppBlockDownloadNamespaces(Ljava/util/List;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setAppBlockDownloadState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setApplicationRestrictionsInternal(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;I)Landroid/os/Bundle;
com.samsung.android.knox.custom.KnoxCustomManagerService.setAppsButtonState(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setAsoc(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setAudioVolume(II)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setAutoCallPickupState(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setAutoRotationState(ZI)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setBackupRestoreState(IZ)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setBatteryLevelColourItem(Lcom/samsung/android/knox/custom/StatusbarIconItem;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setBluetoothState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setBootingAnimation(Landroid/os/ParcelFileDescriptor;Landroid/os/ParcelFileDescriptor;Landroid/os/ParcelFileDescriptor;I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setBrightness(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setBrowserHomepage(Ljava/lang/String;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setCallScreenDisabledItems(ZI)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setChargerConnectionSoundEnabledState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setChargingLEDState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setCpuPowerSavingState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setDeveloperOptionsHidden()I
com.samsung.android.knox.custom.KnoxCustomManagerService.setDeviceSpeakerEnabledState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setDexForegroundModePackageList(ILjava/util/List;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setDexHDMIAutoEnterState(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setDexHomeAlignment(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setDexLoadingLogo(Landroid/os/ParcelFileDescriptor;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setDexScreenTimeout(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setDisplayMirroringState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setExitUI(Ljava/lang/String;Ljava/lang/String;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setExtendedCallInfoState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setFavoriteApp(Ljava/lang/String;I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setFlightModeState(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setForceAutoShutDownState(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setForceAutoStartUpState(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setForcedDisplaySizeDensity(III)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setGearNotificationState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setHardKeyIntentBroadcast(ZILandroid/content/Intent;Ljava/lang/String;ZZ)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setHardKeyIntentBroadcastExternal(ZIILandroid/content/Intent;Ljava/lang/String;Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setHardKeyIntentBroadcastInternal(Ljava/lang/String;ZILandroid/content/Intent;Ljava/lang/String;ZZ)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setHardKeyIntentMode(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setHardKeyIntentState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setHardKeyReportState(IIII)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setHideNotificationMessages(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setHomeActivity(Ljava/lang/String;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setHomeScreenMode(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setInfraredState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setInputMethod(Ljava/lang/String;Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setInputMethodRestrictionState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setKeyboardMode(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setKeyedAppStatesReport(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;I)V
com.samsung.android.knox.custom.KnoxCustomManagerService.setKnoxNDALicenseActivated(Z)V
com.samsung.android.knox.custom.KnoxCustomManagerService.setLTESettingState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setLcdBacklightState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setLockScreenHiddenItems(ZI)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setLockScreenOverrideMode(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setLockScreenShortcut(ILjava/lang/String;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setLockscreenWallpaper(Ljava/lang/String;I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setMobileDataRoamingState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setMobileDataState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setMobileNetworkType(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setMotionControlState(IZ)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setMultiWindowState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setPassCode(Ljava/lang/String;Ljava/lang/String;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setPowerDialogCustomItems(Ljava/util/List;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setPowerDialogCustomItemsState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setPowerDialogItems(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setPowerDialogOptionMode(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setPowerMenuLockedState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setPowerSavingMode(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setProKioskNotificationMessagesState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setProKioskPowerDialogCustomItems(Ljava/util/List;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setProKioskPowerDialogCustomItemsState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setProKioskState(ZLjava/lang/String;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setProKioskStatusBarClockState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setProKioskStatusBarIconsState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setProKioskStatusBarMode(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setProKioskString(ILjava/lang/String;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setProKioskUsbMassStorageState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setProKioskUsbNetAddresses(Ljava/lang/String;Ljava/lang/String;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setProKioskUsbNetState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setProtectBatteryState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setQuickPanelButtons(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setQuickPanelEditMode(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setQuickPanelItems(Ljava/lang/String;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setQuickPanelItemsInternal(Landroid/os/Bundle;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setRecentLongPressActivity(Ljava/lang/String;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setRecentLongPressMode(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setScreenOffOnHomeLongPressState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setScreenOffOnStatusBarDoubleTapState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setScreenPowerSavingState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setScreenTimeout(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setScreenWakeupOnPowerState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setSensorDisabled(ZI)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setSettingsEnabledItems(ZI)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setSettingsHiddenState(ZI)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setShowIMEWithHardKeyboard(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setShuttingDownAnimation(Landroid/os/ParcelFileDescriptor;Landroid/os/ParcelFileDescriptor;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setStatusBarClockState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setStatusBarIconsState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setStatusBarMode(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setStatusBarNotificationsState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setStatusBarText(Ljava/lang/String;II)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setStatusBarTextScrollWidth(Ljava/lang/String;III)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setStayAwakeState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setSystemLocale(Ljava/lang/String;Ljava/lang/String;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setSystemRingtone(ILjava/lang/String;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setSystemSoundsEnabledState(II)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setSystemSoundsSilent()I
com.samsung.android.knox.custom.KnoxCustomManagerService.setToastEnabledState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setToastGravity(III)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setToastGravityEnabledState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setToastShowPackageNameState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setTorchOnVolumeButtonsState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setUnlockSimOnBootState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setUnlockSimPin(Ljava/lang/String;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setUsbConnectionType(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setUsbDeviceDefaultPackage(Landroid/hardware/usb/UsbDevice;Ljava/lang/String;I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setUsbMassStorageState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setUsbNetAddresses(Ljava/lang/String;Ljava/lang/String;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setUsbNetState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setUserInactivityTimeout(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setVibrationIntensity(II)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setVolumeButtonRotationState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setVolumeControlStream(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setVolumeKeyAppState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setVolumeKeyAppsList(Ljava/util/List;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setVolumePanelEnabledState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setWallpaper(Landroid/os/Bundle;Landroid/graphics/Rect;ZI)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setWifiConnectionMonitorState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setWifiFrequencyBand(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setWifiHotspotEnabledState(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setWifiState(ZLjava/lang/String;Ljava/lang/String;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setWifiStateEap(ZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setZeroPageState(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.startProKioskMode(Ljava/lang/String;Ljava/lang/String;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.startSmartView()I
com.samsung.android.knox.custom.KnoxCustomManagerService.startTcpDump(Ljava/lang/String;I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.stayInDexForegroundMode(Landroid/content/ComponentName;)Z
com.samsung.android.knox.custom.KnoxCustomManagerService.stopProKioskMode(Ljava/lang/String;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.stopTcpDump()I
com.android.server.display.DisplayManagerService$BinderService.acquireLowRefreshRateToken(Landroid/os/IBinder;Ljava/lang/String;)Lcom/samsung/android/hardware/display/IRefreshRateToken;
com.android.server.display.DisplayManagerService$BinderService.acquireRefreshRateMaxLimitToken(Landroid/os/IBinder;ILjava/lang/String;)Lcom/samsung/android/hardware/display/IRefreshRateToken;
com.android.server.display.DisplayManagerService$BinderService.acquireRefreshRateMinLimitToken(Landroid/os/IBinder;ILjava/lang/String;)Lcom/samsung/android/hardware/display/IRefreshRateToken;
com.android.server.display.DisplayManagerService$BinderService.connectWifiDisplayWithConfig(Landroid/hardware/display/SemWifiDisplayConfig;Landroid/hardware/display/IWifiDisplayConnectionCallback;)V
com.android.server.display.DisplayManagerService$BinderService.convertToBrightness(F)I
com.android.server.display.DisplayManagerService$BinderService.fitToActiveDisplay(Z)V
com.android.server.display.DisplayManagerService$BinderService.getBackupBrightnessConfiguration(I)Landroid/hardware/display/BrightnessConfiguration;
com.android.server.display.DisplayManagerService$BinderService.getDeviceMaxVolume()I
com.android.server.display.DisplayManagerService$BinderService.getDeviceMinVolume()I
com.android.server.display.DisplayManagerService$BinderService.getDisplayIds(Z)[I
com.android.server.display.DisplayManagerService$BinderService.getDlnaDevice()Landroid/hardware/display/SemDlnaDevice;
com.android.server.display.DisplayManagerService$BinderService.getPresentationOwner(I)Ljava/lang/String;
com.android.server.display.DisplayManagerService$BinderService.getPrimaryPhysicalDisplayId()J
com.android.server.display.DisplayManagerService$BinderService.getScreenSharingStatus()I
com.android.server.display.DisplayManagerService$BinderService.isDeviceVolumeMuted()Z
com.android.server.display.DisplayManagerService$BinderService.isFitToActiveDisplay()Z
com.android.server.display.DisplayManagerService$BinderService.isWifiDisplayWithPinSupported(Ljava/lang/String;)Z
com.android.server.display.DisplayManagerService$BinderService.requestSetWifiDisplayParameters(Ljava/util/List;)Z
com.android.server.display.DisplayManagerService$BinderService.requestWifiDisplayParameter(Ljava/lang/String;Landroid/hardware/display/SemWifiDisplayParameter;)Z
com.android.server.display.DisplayManagerService$BinderService.resetBrightnessConfigurationForUser(ILjava/lang/String;)V
com.android.server.display.DisplayManagerService$BinderService.rotateVirtualDisplay(Landroid/hardware/display/IVirtualDisplayCallback;I)V
com.android.server.display.DisplayManagerService$BinderService.setBackupBrightnessConfiguration(Landroid/hardware/display/BrightnessConfiguration;ILjava/lang/String;)V
com.android.server.display.DisplayManagerService$BinderService.setBrightnessConfigurationForUserWithStats(Landroid/hardware/display/BrightnessConfiguration;ILjava/lang/String;Ljava/util/List;Ljava/util/List;Ljava/util/List;)V
com.android.server.display.DisplayManagerService$BinderService.setDeviceVolume(I)V
com.android.server.display.DisplayManagerService$BinderService.setDeviceVolumeMuted(Z)V
com.android.server.display.DisplayManagerService$BinderService.setDisplayStateLimit(Landroid/os/IBinder;I)V
com.android.server.display.DisplayManagerService$BinderService.setDlnaDevice(Landroid/hardware/display/SemDlnaDevice;Landroid/os/IBinder;)V
com.android.server.display.DisplayManagerService$BinderService.setScreenSharingStatus(I)V
com.android.server.display.DisplayManagerService$BinderService.setTemporaryBrightnessForSlowChange(IFZ)V
com.android.server.display.DisplayManagerService$BinderService.setVolumeKeyEvent(I)V
com.android.server.display.DisplayManagerService$BinderService.setWifiDisplayParam(Ljava/lang/String;Ljava/lang/String;)V
com.android.server.display.DisplayManagerService$BinderService.startWifiDisplayChannelScan(I)V
com.android.server.display.DisplayManagerService$BinderService.startWifiDisplayChannelScanAndInterval(II)V
com.android.server.semclipboard.SemClipboardService.addClipboardEventListener(Lcom/samsung/android/content/clipboard/IOnClipboardEventListener;Ljava/lang/String;)V
com.android.server.semclipboard.SemClipboardService.dragPasteClipData(Landroid/content/ClipData;Ljava/lang/String;Ljava/lang/String;II)Z
com.android.server.semclipboard.SemClipboardService.getFilter()I
com.android.server.semclipboard.SemClipboardService.getPrimarySemClip(Ljava/lang/String;I)Lcom/samsung/android/content/clipboard/data/SemClipData;
com.android.server.semclipboard.SemClipboardService.hasPrimaryClip(Ljava/lang/String;I)Z
com.android.server.semclipboard.SemClipboardService.isEnabled(I)Z
com.android.server.semclipboard.SemClipboardService.pasteClipData(Landroid/content/ClipData;Ljava/lang/String;I)Z
com.android.server.semclipboard.SemClipboardService.removeClipboardEventListener(Lcom/samsung/android/content/clipboard/IOnClipboardEventListener;)V
com.android.server.semclipboard.SemClipboardService.setPrimaryClip(Landroid/content/ClipData;I)V
com.android.server.semclipboard.SemClipboardService.setPrimarySemClip(Lcom/samsung/android/content/clipboard/data/SemClipData;Ljava/lang/String;I)V
com.android.server.semclipboard.SemClipboardService.updateDragPasteListener(ILandroid/sec/clipboard/IClipboardDataDragPasteEvent;)V
com.android.server.semclipboard.SemClipboardService.updateFilter(ILandroid/sec/clipboard/IClipboardDataPasteEvent;)V
com.android.server.pm.LauncherAppsService$LauncherAppsImpl.changePackageIcon(Ljava/lang/String;I)V
com.android.server.smartclip.SpenGestureManagerService.getBleSpenAddress()Ljava/lang/String;
com.android.server.smartclip.SpenGestureManagerService.getBleSpenCmfCode()Ljava/lang/String;
com.android.server.smartclip.SpenGestureManagerService.getCurrentEditorInfo()Landroid/view/inputmethod/EditorInfo;
com.android.server.smartclip.SpenGestureManagerService.getCurrentInputContext()Lcom/android/internal/view/IInputContext;
com.android.server.smartclip.SpenGestureManagerService.getCurrentMissingMethodFlags()I
com.android.server.smartclip.SpenGestureManagerService.getScreenOffReason()I
com.android.server.smartclip.SpenGestureManagerService.getScrollableAreaInfo(Landroid/graphics/Rect;Landroid/os/IBinder;)Landroid/os/Bundle;
com.android.server.smartclip.SpenGestureManagerService.getScrollableViewInfo(Landroid/graphics/Rect;ILandroid/os/IBinder;)Landroid/os/Bundle;
com.android.server.smartclip.SpenGestureManagerService.getSmartClipDataByScreenRect(Landroid/graphics/Rect;Landroid/os/IBinder;II)Lcom/samsung/android/content/smartclip/SemSmartClipDataRepository;
com.android.server.smartclip.SpenGestureManagerService.injectInputEvent(II[Landroid/view/InputEvent;ZLandroid/os/IBinder;)V
com.android.server.smartclip.SpenGestureManagerService.isSpenInserted()Z
com.android.server.smartclip.SpenGestureManagerService.isSupportBleSpen()Z
com.android.server.smartclip.SpenGestureManagerService.notifyAirGesture(Ljava/lang/String;)V
com.android.server.smartclip.SpenGestureManagerService.notifyBleSpenChargeLockState(Z)V
com.android.server.smartclip.SpenGestureManagerService.notifyKeyboardClosed()V
com.android.server.smartclip.SpenGestureManagerService.registerAirGestureListener(Lcom/samsung/android/content/smartclip/IAirGestureListener;)V
com.android.server.smartclip.SpenGestureManagerService.registerBleSpenChargeLockStateChangedListener(Lcom/samsung/android/content/smartclip/IBleSpenChargeLockStateChangedListener;)V
com.android.server.smartclip.SpenGestureManagerService.registerHoverListener(Lcom/samsung/android/content/smartclip/ISpenGestureHoverListener;)V
com.android.server.smartclip.SpenGestureManagerService.registerInputMethodInfoChangeListener(Lcom/samsung/android/content/smartclip/IInputMethodInfoChangeListener;)V
com.android.server.smartclip.SpenGestureManagerService.resetPenAttachSound(Ljava/lang/String;)V
com.android.server.smartclip.SpenGestureManagerService.resetPenDetachSound(Ljava/lang/String;)V
com.android.server.smartclip.SpenGestureManagerService.resetPenHoverIcon(Ljava/lang/String;)V
com.android.server.smartclip.SpenGestureManagerService.saveBleSpenLogFile([B)V
com.android.server.smartclip.SpenGestureManagerService.screenshot(IIZLandroid/graphics/Rect;IIZ)Landroid/graphics/Bitmap;
com.android.server.smartclip.SpenGestureManagerService.sendSmartClipRemoteRequestResult(Lcom/samsung/android/content/smartclip/SmartClipRemoteRequestResult;)V
com.android.server.smartclip.SpenGestureManagerService.setBleSpenAddress(Ljava/lang/String;)V
com.android.server.smartclip.SpenGestureManagerService.setBleSpenCmfCode(Ljava/lang/String;)V
com.android.server.smartclip.SpenGestureManagerService.setCurrentInputInfo(Lcom/android/internal/view/IInputContext;Landroid/view/inputmethod/EditorInfo;I)V
com.android.server.smartclip.SpenGestureManagerService.setHoverStayDetectEnabled(Z)V
com.android.server.smartclip.SpenGestureManagerService.setHoverStayValues(III)V
com.android.server.smartclip.SpenGestureManagerService.setPenAttachSound(Ljava/lang/String;Ljava/io/FileDescriptor;)V
com.android.server.smartclip.SpenGestureManagerService.setPenDetachSound(Ljava/lang/String;Ljava/io/FileDescriptor;)V
com.android.server.smartclip.SpenGestureManagerService.setPenHoverIcon(Ljava/lang/String;Ljava/io/FileDescriptor;FF)V
com.android.server.smartclip.SpenGestureManagerService.setScreenOffReason(I)V
com.android.server.smartclip.SpenGestureManagerService.setSpenInsertionState(Z)V
com.android.server.smartclip.SpenGestureManagerService.setSpenPdctLowSensitivityEnable()V
com.android.server.smartclip.SpenGestureManagerService.setSpenPowerSavingModeEnabled(Z)V
com.android.server.smartclip.SpenGestureManagerService.showTouchPointer(Z)V
com.android.server.smartclip.SpenGestureManagerService.unregisterAirGestureListener(Lcom/samsung/android/content/smartclip/IAirGestureListener;)V
com.android.server.smartclip.SpenGestureManagerService.unregisterBleSpenChargeLockStateChangedListener(Lcom/samsung/android/content/smartclip/IBleSpenChargeLockStateChangedListener;)V
com.android.server.smartclip.SpenGestureManagerService.unregisterHoverListener(Lcom/samsung/android/content/smartclip/ISpenGestureHoverListener;)V
com.android.server.smartclip.SpenGestureManagerService.unregisterInputMethodInfoChangeListener(Lcom/samsung/android/content/smartclip/IInputMethodInfoChangeListener;)V
com.android.server.smartclip.SpenGestureManagerService.writeBleSpenCommand(Ljava/lang/String;)V
com.android.server.cover.CoverManagerServiceImpl.addLedNotification(Landroid/os/Bundle;)V
com.android.server.cover.CoverManagerServiceImpl.disableCoverManager(ZLandroid/os/IBinder;Ljava/lang/String;)V
com.android.server.cover.CoverManagerServiceImpl.disableLcdOffByCover(Landroid/os/IBinder;Landroid/content/ComponentName;)Z
com.android.server.cover.CoverManagerServiceImpl.enableLcdOffByCover(Landroid/os/IBinder;Landroid/content/ComponentName;)Z
com.android.server.cover.CoverManagerServiceImpl.getCoverState()Lcom/samsung/android/cover/CoverState;
com.android.server.cover.CoverManagerServiceImpl.getCoverStateForExternal()Lcom/samsung/android/cover/CoverState;
com.android.server.cover.CoverManagerServiceImpl.getCoverSwitchState()Z
com.android.server.cover.CoverManagerServiceImpl.getVersion()I
com.android.server.cover.CoverManagerServiceImpl.isCoverManagerDisabled()Z
com.android.server.cover.CoverManagerServiceImpl.onCoverAppCovered(Z)I
com.android.server.cover.CoverManagerServiceImpl.registerCallback(Landroid/os/IBinder;Landroid/content/ComponentName;)V
com.android.server.cover.CoverManagerServiceImpl.registerListenerCallback(Landroid/os/IBinder;Landroid/content/ComponentName;I)V
com.android.server.cover.CoverManagerServiceImpl.registerListenerCallbackForExternal(Landroid/os/IBinder;Landroid/content/ComponentName;I)V
com.android.server.cover.CoverManagerServiceImpl.registerNfcTouchListenerCallback(ILandroid/os/IBinder;Landroid/content/ComponentName;)V
com.android.server.cover.CoverManagerServiceImpl.removeLedNotification(Landroid/os/Bundle;)V
com.android.server.cover.CoverManagerServiceImpl.requestCoverAuthentication(Landroid/os/IBinder;Landroid/content/ComponentName;)Z
com.android.server.cover.CoverManagerServiceImpl.sendDataToCover(I[B)V
com.android.server.cover.CoverManagerServiceImpl.sendDataToNfcLedCover(I[B)V
com.android.server.cover.CoverManagerServiceImpl.sendPowerKeyToCover()V
com.android.server.cover.CoverManagerServiceImpl.sendSystemEvent(Landroid/os/Bundle;)V
com.android.server.cover.CoverManagerServiceImpl.setFotaInProgress(ZLandroid/os/IBinder;Landroid/content/ComponentName;)Z
com.android.server.cover.CoverManagerServiceImpl.unregisterCallback(Landroid/os/IBinder;)Z
com.android.server.cover.CoverManagerServiceImpl.unregisterCallbackForExternal(Landroid/os/IBinder;)Z
com.android.server.cover.CoverManagerServiceImpl.unregisterNfcTouchListenerCallback(Landroid/os/IBinder;)Z
com.samsung.android.knoxguard.service.KnoxGuardSeService.addPackagesToClearCacheBlockList(Ljava/util/List;)Z
com.samsung.android.knoxguard.service.KnoxGuardSeService.addPackagesToForceStopBlockList(Ljava/util/List;)Z
com.samsung.android.knoxguard.service.KnoxGuardSeService.allowFirmwareRecovery(Z)Z
com.samsung.android.knoxguard.service.KnoxGuardSeService.allowOTAUpgrade(Z)Z
com.samsung.android.knoxguard.service.KnoxGuardSeService.allowSafeMode(Z)Z
com.samsung.android.knoxguard.service.KnoxGuardSeService.bindToLockScreen()V
com.samsung.android.knoxguard.service.KnoxGuardSeService.callKGsv()V
com.samsung.android.knoxguard.service.KnoxGuardSeService.generateHotpDHRequest()Ljava/lang/String;
com.samsung.android.knoxguard.service.KnoxGuardSeService.getClientData()Ljava/lang/String;
com.samsung.android.knoxguard.service.KnoxGuardSeService.getHDMVersion()Ljava/lang/String;
com.samsung.android.knoxguard.service.KnoxGuardSeService.getHdmStatus()Ljava/lang/String;
com.samsung.android.knoxguard.service.KnoxGuardSeService.getHotpChallenge()Ljava/lang/String;
com.samsung.android.knoxguard.service.KnoxGuardSeService.getKGID()Ljava/lang/String;
com.samsung.android.knoxguard.service.KnoxGuardSeService.getKGPolicy()Ljava/lang/String;
com.samsung.android.knoxguard.service.KnoxGuardSeService.getKGServiceVersion()I
com.samsung.android.knoxguard.service.KnoxGuardSeService.getLockAction()Ljava/lang/String;
com.samsung.android.knoxguard.service.KnoxGuardSeService.getNonce(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
com.samsung.android.knoxguard.service.KnoxGuardSeService.getPBAUniqueNumber()Ljava/lang/String;
com.samsung.android.knoxguard.service.KnoxGuardSeService.getStringSystemProperty(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
com.samsung.android.knoxguard.service.KnoxGuardSeService.getTAError()I
com.samsung.android.knoxguard.service.KnoxGuardSeService.getTAInfo(I)Ljava/lang/String;
com.samsung.android.knoxguard.service.KnoxGuardSeService.getTAState()I
com.samsung.android.knoxguard.service.KnoxGuardSeService.getTAStateSetError(Z)I
com.samsung.android.knoxguard.service.KnoxGuardSeService.isSkipSupportContainerSupported()Z
com.samsung.android.knoxguard.service.KnoxGuardSeService.isVpnExceptionRequired()Z
com.samsung.android.knoxguard.service.KnoxGuardSeService.lockScreen(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZLandroid/os/Bundle;)I
com.samsung.android.knoxguard.service.KnoxGuardSeService.provisionCert(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
com.samsung.android.knoxguard.service.KnoxGuardSeService.registerIntent(Ljava/lang/String;Ljava/util/List;)V
com.samsung.android.knoxguard.service.KnoxGuardSeService.removeActiveAdmin(Landroid/content/ComponentName;)V
com.samsung.android.knoxguard.service.KnoxGuardSeService.resetRPMB()I
com.samsung.android.knoxguard.service.KnoxGuardSeService.resetRPMB2(Ljava/lang/String;)I
com.samsung.android.knoxguard.service.KnoxGuardSeService.revokeRuntimePermission(Ljava/lang/String;Ljava/lang/String;Landroid/os/UserHandle;)V
com.samsung.android.knoxguard.service.KnoxGuardSeService.setActiveAdmin(Landroid/content/ComponentName;)V
com.samsung.android.knoxguard.service.KnoxGuardSeService.setAdminRemovable(Z)Z
com.samsung.android.knoxguard.service.KnoxGuardSeService.setAirplaneMode(Z)V
com.samsung.android.knoxguard.service.KnoxGuardSeService.setApplicationUninstallationDisabled(Ljava/lang/String;)Z
com.samsung.android.knoxguard.service.KnoxGuardSeService.setCheckingState()I
com.samsung.android.knoxguard.service.KnoxGuardSeService.setClientData(Ljava/lang/String;)I
com.samsung.android.knoxguard.service.KnoxGuardSeService.setKnoxGuardExemptRule(Z)V
com.samsung.android.knoxguard.service.KnoxGuardSeService.setRemoteLockToLockscreen(IZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;IJIZLandroid/os/Bundle;)V
com.samsung.android.knoxguard.service.KnoxGuardSeService.setRemoteLockToLockscreenWithSkipSupport(IZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;IJIZLandroid/os/Bundle;Z)V
com.samsung.android.knoxguard.service.KnoxGuardSeService.setRuntimePermission(Ljava/lang/String;Ljava/lang/String;Landroid/os/UserHandle;)V
com.samsung.android.knoxguard.service.KnoxGuardSeService.shouldBlockCustomRom()Z
com.samsung.android.knoxguard.service.KnoxGuardSeService.showInstallmentStatus()Z
com.samsung.android.knoxguard.service.KnoxGuardSeService.unRegisterIntent()V
com.samsung.android.knoxguard.service.KnoxGuardSeService.unlockScreen()I
com.samsung.android.knoxguard.service.KnoxGuardSeService.verifyCompleteToken(Ljava/lang/String;)I
com.samsung.android.knoxguard.service.KnoxGuardSeService.verifyHOTPDHChallenge(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
com.samsung.android.knoxguard.service.KnoxGuardSeService.verifyHOTPPin(Ljava/lang/String;)I
com.samsung.android.knoxguard.service.KnoxGuardSeService.verifyHOTPsecret(Ljava/lang/String;)I
com.samsung.android.knoxguard.service.KnoxGuardSeService.verifyKgRot()Ljava/lang/String;
com.samsung.android.knoxguard.service.KnoxGuardSeService.verifyPolicy(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
com.samsung.android.knoxguard.service.KnoxGuardSeService.verifyRegistrationInfo(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
com.android.server.biometrics.sensors.fingerprint.FingerprintService$FingerprintServiceWrapper.semAddMaskView(Landroid/os/IBinder;Ljava/lang/String;)Landroid/os/IBinder;
com.android.server.biometrics.sensors.fingerprint.FingerprintService$FingerprintServiceWrapper.semAuthenticate(Landroid/os/IBinder;JIILandroid/hardware/fingerprint/IFingerprintServiceReceiver;ILjava/lang/String;Ljava/lang/String;Landroid/os/Bundle;)J
com.android.server.biometrics.sensors.fingerprint.FingerprintService$FingerprintServiceWrapper.semBioSysUiRequest(IIJLjava/lang/String;)I
com.android.server.biometrics.sensors.fingerprint.FingerprintService$FingerprintServiceWrapper.semForceCBGE()V
com.android.server.biometrics.sensors.fingerprint.FingerprintService$FingerprintServiceWrapper.semGetDaemonVersion()Ljava/lang/String;
com.android.server.biometrics.sensors.fingerprint.FingerprintService$FingerprintServiceWrapper.semGetIconBottomMargin()I
com.android.server.biometrics.sensors.fingerprint.FingerprintService$FingerprintServiceWrapper.semGetInDisplaySensorInfo(Landroid/os/Bundle;)V
com.android.server.biometrics.sensors.fingerprint.FingerprintService$FingerprintServiceWrapper.semGetMaxEnrollmentNumber()I
com.android.server.biometrics.sensors.fingerprint.FingerprintService$FingerprintServiceWrapper.semGetRemainingLockoutTime(I)I
com.android.server.biometrics.sensors.fingerprint.FingerprintService$FingerprintServiceWrapper.semGetSecurityLevel()I
com.android.server.biometrics.sensors.fingerprint.FingerprintService$FingerprintServiceWrapper.semGetSensorAreaInDisplay(IILandroid/graphics/Point;)Landroid/graphics/Rect;
com.android.server.biometrics.sensors.fingerprint.FingerprintService$FingerprintServiceWrapper.semGetSensorInfo()Ljava/lang/String;
com.android.server.biometrics.sensors.fingerprint.FingerprintService$FingerprintServiceWrapper.semGetSensorStatus()I
com.android.server.biometrics.sensors.fingerprint.FingerprintService$FingerprintServiceWrapper.semGetSensorTestResult([B)I
com.android.server.biometrics.sensors.fingerprint.FingerprintService$FingerprintServiceWrapper.semGetTrustAppVersion()Ljava/lang/String;
com.android.server.biometrics.sensors.fingerprint.FingerprintService$FingerprintServiceWrapper.semGetUserIdList()[Ljava/lang/String;
com.android.server.biometrics.sensors.fingerprint.FingerprintService$FingerprintServiceWrapper.semHasFeature(I)Z
com.android.server.biometrics.sensors.fingerprint.FingerprintService$FingerprintServiceWrapper.semIsEnrollSession()Z
com.android.server.biometrics.sensors.fingerprint.FingerprintService$FingerprintServiceWrapper.semIsTemplateDbCorrupted()Z
com.android.server.biometrics.sensors.fingerprint.FingerprintService$FingerprintServiceWrapper.semMoveSensorIconInDisplay(II)V
com.android.server.biometrics.sensors.fingerprint.FingerprintService$FingerprintServiceWrapper.semOpenSession()Z
com.android.server.biometrics.sensors.fingerprint.FingerprintService$FingerprintServiceWrapper.semPauseEnroll()Z
com.android.server.biometrics.sensors.fingerprint.FingerprintService$FingerprintServiceWrapper.semProcessFido(I[B[BLjava/lang/String;)I
com.android.server.biometrics.sensors.fingerprint.FingerprintService$FingerprintServiceWrapper.semRegisterAodController(Landroid/os/IBinder;Lcom/samsung/android/bio/fingerprint/ISemFingerprintAodController;)V
com.android.server.biometrics.sensors.fingerprint.FingerprintService$FingerprintServiceWrapper.semRegisterDisplayStateCallback(Lcom/samsung/android/biometrics/ISemBiometricSysUiDisplayStateCallback;)I
com.android.server.biometrics.sensors.fingerprint.FingerprintService$FingerprintServiceWrapper.semRemoveMaskView(Landroid/os/IBinder;Ljava/lang/String;)I
com.android.server.biometrics.sensors.fingerprint.FingerprintService$FingerprintServiceWrapper.semRequest(Landroid/os/IBinder;I[B[BIILjava/lang/String;Lcom/samsung/android/bio/fingerprint/ISemFingerprintRequestCallback;)I
com.android.server.biometrics.sensors.fingerprint.FingerprintService$FingerprintServiceWrapper.semResumeEnroll()Z
com.android.server.biometrics.sensors.fingerprint.FingerprintService$FingerprintServiceWrapper.semRunSensorTest(Landroid/os/IBinder;IILcom/samsung/android/bio/fingerprint/ISemFingerprintRequestCallback;)I
com.android.server.biometrics.sensors.fingerprint.FingerprintService$FingerprintServiceWrapper.semSetCalibrationMode(Landroid/os/IBinder;ILjava/lang/String;)I
com.android.server.biometrics.sensors.fingerprint.FingerprintService$FingerprintServiceWrapper.semSetFlagForIFAA(ILjava/lang/String;)V
com.android.server.biometrics.sensors.fingerprint.FingerprintService$FingerprintServiceWrapper.semSetFodStrictMode(Z)V
com.android.server.biometrics.sensors.fingerprint.FingerprintService$FingerprintServiceWrapper.semSetScreenStatus(I)I
com.android.server.biometrics.sensors.fingerprint.FingerprintService$FingerprintServiceWrapper.semShowBouncerScreen(I)I
com.android.server.biometrics.sensors.fingerprint.FingerprintService$FingerprintServiceWrapper.semUnregisterAodController(Landroid/os/IBinder;)V
com.android.server.biometrics.sensors.fingerprint.FingerprintService$FingerprintServiceWrapper.semUnregisterDisplayStateCallback()V
com.android.server.biometrics.sensors.fingerprint.FingerprintService$FingerprintServiceWrapper.semUpdateTrustApp(Ljava/lang/String;Lcom/samsung/android/bio/fingerprint/ISemFingerprintRequestCallback;Ljava/lang/String;)V
com.android.server.NetworkManagementService.addApeRule(ZLjava/lang/String;I)I
com.android.server.NetworkManagementService.addChain(Ljava/lang/String;Ljava/lang/String;)V
com.android.server.NetworkManagementService.addInterfaceToLocalNetwork(Ljava/lang/String;Ljava/util/List;)V
com.android.server.NetworkManagementService.addIpAcceptRule(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.server.NetworkManagementService.addLegacyRoute(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V
com.android.server.NetworkManagementService.addMptcpLink(Ljava/lang/String;)V
com.android.server.NetworkManagementService.addOrRemoveSystemAppFromDataSaverWhitelist(ZI)V
com.android.server.NetworkManagementService.addPortFwdRules(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V
com.android.server.NetworkManagementService.addRoute(ILandroid/net/RouteInfo;)V
com.android.server.NetworkManagementService.addSocksRule(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V
com.android.server.NetworkManagementService.addSocksSkipRule(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.server.NetworkManagementService.addSocksSkipRuleProto(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V
com.android.server.NetworkManagementService.addSourcePortAcceptRule(Ljava/lang/String;Ljava/lang/String;I)V
com.android.server.NetworkManagementService.addSourceRoute(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.server.NetworkManagementService.addUidSocksRule(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;)V
com.android.server.NetworkManagementService.addUidToChain(Ljava/lang/String;Ljava/lang/String;I)V
com.android.server.NetworkManagementService.allowProtect(I)V
com.android.server.NetworkManagementService.buildFirewall()V
com.android.server.NetworkManagementService.cleanAllBlock()V
com.android.server.NetworkManagementService.cleanBlockPorts()V
com.android.server.NetworkManagementService.clearEbpfMap(I)V
com.android.server.NetworkManagementService.clearInterfaceAddresses(Ljava/lang/String;)V
com.android.server.NetworkManagementService.closeSocketsForFreecess(ILjava/lang/String;)V
com.android.server.NetworkManagementService.closeSocketsForUid(I)V
com.android.server.NetworkManagementService.closeSocketsForUids([I)V
com.android.server.NetworkManagementService.createNetworkGuardChain()V
com.android.server.NetworkManagementService.delIpAcceptRule(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.server.NetworkManagementService.delSourcePortAcceptRule(Ljava/lang/String;Ljava/lang/String;I)V
com.android.server.NetworkManagementService.delSourceRoute(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.server.NetworkManagementService.deleteNetworkGuardChain()V
com.android.server.NetworkManagementService.deleteNetworkGuardWhiteListRule()V
com.android.server.NetworkManagementService.denyProtect(I)V
com.android.server.NetworkManagementService.disableEpdg(Ljava/lang/String;Ljava/lang/String;)V
com.android.server.NetworkManagementService.disableIpv6(Ljava/lang/String;)V
com.android.server.NetworkManagementService.disableMptcp()V
com.android.server.NetworkManagementService.disableNat(Ljava/lang/String;Ljava/lang/String;)V
com.android.server.NetworkManagementService.disableNetworkGuard()V
com.android.server.NetworkManagementService.enableEpdg(Ljava/lang/String;Ljava/lang/String;Z)V
com.android.server.NetworkManagementService.enableIpv6(Ljava/lang/String;)V
com.android.server.NetworkManagementService.enableKnoxVpnFlagForTether(Z)V
com.android.server.NetworkManagementService.enableMptcp(Ljava/lang/String;)V
com.android.server.NetworkManagementService.enableNat(Ljava/lang/String;Ljava/lang/String;)V
com.android.server.NetworkManagementService.enableNetworkGuard(Z)V
com.android.server.NetworkManagementService.getDnsForwarders()[Ljava/lang/String;
com.android.server.NetworkManagementService.getInterfaceConfig(Ljava/lang/String;)Landroid/net/InterfaceConfiguration;
com.android.server.NetworkManagementService.getIpForwardingEnabled()Z
com.android.server.NetworkManagementService.getNetworkStatsTethering(I)Landroid/net/NetworkStats;
com.android.server.NetworkManagementService.getNetworkStatsVideoCall(Ljava/lang/String;II)J
com.android.server.NetworkManagementService.isBandwidthControlEnabled()Z
com.android.server.NetworkManagementService.isFirewallEnabled()Z
com.android.server.NetworkManagementService.isNetworkRestricted(I)Z
com.android.server.NetworkManagementService.isTetheringStarted()Z
com.android.server.NetworkManagementService.listInterfaces()[Ljava/lang/String;
com.android.server.NetworkManagementService.listTetheredInterfaces()[Ljava/lang/String;
com.android.server.NetworkManagementService.prioritizeApp(ZI)I
com.android.server.NetworkManagementService.registerNetdTetherEventListener()V
com.android.server.NetworkManagementService.registerObserver(Landroid/net/INetworkManagementEventObserver;)V
com.android.server.NetworkManagementService.registerTetheringStatsProvider(Landroid/net/ITetheringStatsProvider;Ljava/lang/String;)V
com.android.server.NetworkManagementService.removeChain(Ljava/lang/String;Ljava/lang/String;)V
com.android.server.NetworkManagementService.removeInterfaceAlert(Ljava/lang/String;)V
com.android.server.NetworkManagementService.removeInterfaceFromLocalNetwork(Ljava/lang/String;)V
com.android.server.NetworkManagementService.removeInterfaceQuota(Ljava/lang/String;)V
com.android.server.NetworkManagementService.removeLegacyRoute(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V
com.android.server.NetworkManagementService.removeMptcpLink(Ljava/lang/String;)V
com.android.server.NetworkManagementService.removeRoute(ILandroid/net/RouteInfo;)V
com.android.server.NetworkManagementService.removeRoutesFromLocalNetwork(Ljava/util/List;)I
com.android.server.NetworkManagementService.removeSocksRule(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V
com.android.server.NetworkManagementService.removeSocksSkipRule(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.server.NetworkManagementService.removeSocksSkipRuleProto(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V
com.android.server.NetworkManagementService.removeUidFromChain(Ljava/lang/String;Ljava/lang/String;I)V
com.android.server.NetworkManagementService.removeUidSocksRule(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;)V
com.android.server.NetworkManagementService.replaceApeRule(Ljava/lang/String;II)I
com.android.server.NetworkManagementService.runKnoxFirewallRulesCommand(ILjava/lang/String;)Ljava/lang/String;
com.android.server.NetworkManagementService.runKnoxRulesCommand(I[Ljava/lang/String;)V
com.android.server.NetworkManagementService.setAllowListIPs(Ljava/lang/String;)V
com.android.server.NetworkManagementService.setBlockAllDNSPackets(Z)V
com.android.server.NetworkManagementService.setBlockAllPackets()V
com.android.server.NetworkManagementService.setBlockListIPs(Ljava/lang/String;)V
com.android.server.NetworkManagementService.setBlockPorts(Ljava/lang/String;ILjava/lang/String;)V
com.android.server.NetworkManagementService.setDataSaverModeEnabled(Z)Z
com.android.server.NetworkManagementService.setDestinationBasedMarkRule(ZLjava/lang/String;Ljava/lang/String;II)V
com.android.server.NetworkManagementService.setDnsForwardersForKnoxVpn(I[Ljava/lang/String;)V
com.android.server.NetworkManagementService.setEpdgInterfaceDropRule(Ljava/lang/String;Z)V
com.android.server.NetworkManagementService.setFirewallChainEnabled(IZ)V
com.android.server.NetworkManagementService.setFirewallEnabled(Z)V
com.android.server.NetworkManagementService.setFirewallInterfaceRule(Ljava/lang/String;Z)V
com.android.server.NetworkManagementService.setFirewallRuleMobileData(IZ)V
com.android.server.NetworkManagementService.setFirewallRuleWifi(IZ)V
com.android.server.NetworkManagementService.setFirewallUidRule(III)V
com.android.server.NetworkManagementService.setFirewallUidRules(I[I[I)V
com.android.server.NetworkManagementService.setGlobalAlert(J)V
com.android.server.NetworkManagementService.setIPv6AddrGenMode(Ljava/lang/String;I)V
com.android.server.NetworkManagementService.setInterfaceAlert(Ljava/lang/String;J)V
com.android.server.NetworkManagementService.setInterfaceConfig(Ljava/lang/String;Landroid/net/InterfaceConfiguration;)V
com.android.server.NetworkManagementService.setInterfaceDown(Ljava/lang/String;)V
com.android.server.NetworkManagementService.setInterfaceIpv6PrivacyExtensions(Ljava/lang/String;Z)V
com.android.server.NetworkManagementService.setInterfaceQuota(Ljava/lang/String;J)V
com.android.server.NetworkManagementService.setInterfaceUp(Ljava/lang/String;)V
com.android.server.NetworkManagementService.setIpForwardingEnabled(Z)V
com.android.server.NetworkManagementService.setKnoxGuardExemptRule(ZLjava/lang/String;I)V
com.android.server.NetworkManagementService.setKnoxVpn(IZ)V
com.android.server.NetworkManagementService.setMptcpMtuValue(Ljava/lang/String;I)V
com.android.server.NetworkManagementService.setNetworkGuardProtocolAcceptRule(I)V
com.android.server.NetworkManagementService.setNetworkGuardUidRangeAcceptRule(II)V
com.android.server.NetworkManagementService.setNetworkGuardUidRule(IZZ)V
com.android.server.NetworkManagementService.setNetworkInfo(IZI)V
com.android.server.NetworkManagementService.setPrivateIpRoute(ZLjava/lang/String;I)V
com.android.server.NetworkManagementService.setQboxUid(IZ)V
com.android.server.NetworkManagementService.setTcpBufferSize(Ljava/lang/String;Ljava/lang/String;)V
com.android.server.NetworkManagementService.setUIDRoute(ZLjava/lang/String;ILjava/lang/String;Ljava/lang/String;)V
com.android.server.NetworkManagementService.setUidCleartextNetworkPolicy(II)V
com.android.server.NetworkManagementService.setUidOnMeteredNetworkAllowlist(IZ)V
com.android.server.NetworkManagementService.setUidOnMeteredNetworkDenylist(IZ)V
com.android.server.NetworkManagementService.setUrlFirewallRuleMobileData(ILjava/lang/String;Z)V
com.android.server.NetworkManagementService.setUrlFirewallRuleWifi(ILjava/lang/String;Z)V
com.android.server.NetworkManagementService.shutdown()V
com.android.server.NetworkManagementService.spegRestrictNetworkConnection(IZ)V
com.android.server.NetworkManagementService.startInterfaceForwarding(Ljava/lang/String;Ljava/lang/String;)V
com.android.server.NetworkManagementService.startNetworkStatsOnPorts(Ljava/lang/String;II)V
com.android.server.NetworkManagementService.startQbox(Ljava/lang/String;)V
com.android.server.NetworkManagementService.startTethering([Ljava/lang/String;)V
com.android.server.NetworkManagementService.startTetheringWithConfiguration(Z[Ljava/lang/String;)V
com.android.server.NetworkManagementService.stopInterfaceForwarding(Ljava/lang/String;Ljava/lang/String;)V
com.android.server.NetworkManagementService.stopNetworkStatsOnPorts(Ljava/lang/String;II)V
com.android.server.NetworkManagementService.stopQbox()V
com.android.server.NetworkManagementService.stopTethering()V
com.android.server.NetworkManagementService.tetherInterface(Ljava/lang/String;)V
com.android.server.NetworkManagementService.tetherLimitReached(Landroid/net/ITetheringStatsProvider;)V
com.android.server.NetworkManagementService.unregisterNetdTetherEventListener()V
com.android.server.NetworkManagementService.unregisterObserver(Landroid/net/INetworkManagementEventObserver;)V
com.android.server.NetworkManagementService.unregisterTetheringStatsProvider(Landroid/net/ITetheringStatsProvider;)V
com.android.server.NetworkManagementService.untetherInterface(Ljava/lang/String;)V
com.android.server.NetworkManagementService.updateDefaultGatewayForEpdg(Landroid/net/Network;)V
com.android.server.NetworkManagementService.updateInputFilterAppWideRules([III)V
com.android.server.NetworkManagementService.updateInputFilterExemptRules(II)V
com.android.server.NetworkManagementService.updateInputFilterUserWideRules([III)V
com.android.server.NetworkManagementService.updateSourceRule(ZLjava/lang/String;Ljava/lang/String;)V
com.android.server.RCPManagerService.cancelCopyChunks(J)V
com.android.server.RCPManagerService.copyChunks(ILjava/lang/String;ILjava/lang/String;JIJZ)I
com.android.server.RCPManagerService.copyFile(ILjava/lang/String;ILjava/lang/String;)I
com.android.server.RCPManagerService.copyFileInternal(ILjava/lang/String;ILjava/lang/String;)I
com.android.server.RCPManagerService.deleteFile(Ljava/lang/String;I)Z
com.android.server.RCPManagerService.exchangeData(Ljava/lang/String;ILandroid/os/Bundle;)Landroid/os/Bundle;
com.android.server.RCPManagerService.getFileInfo(Ljava/lang/String;I)Landroid/os/Bundle;
com.android.server.RCPManagerService.getFiles(Ljava/lang/String;I)Ljava/util/List;
com.android.server.RCPManagerService.getRCPInterface()Landroid/content/IRCPInterface;
com.android.server.RCPManagerService.isFileExist(Ljava/lang/String;I)Z
com.android.server.RCPManagerService.moveFile(ILjava/lang/String;ILjava/lang/String;)I
com.android.server.RCPManagerService.moveFilesForApp(ILjava/util/List;Ljava/util/List;)J
com.android.server.RCPManagerService.moveFilesForAppEx(ILjava/util/List;Ljava/util/List;I)J
com.android.server.RCPManagerService.moveUnlimitedFiles(ILandroid/net/Uri;II)J
com.android.server.RCPManagerService.registerRCPInterface(Landroid/content/IRCPInterface;I)V
com.android.server.MdfService.initCCMode()I
com.samsung.ucm.ucmservice.CredentialManagerService.APDUCommand(Ljava/lang/String;[BLandroid/os/Bundle;)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.changePin(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.configureKeyguardSettings(ILjava/lang/String;)Z
com.samsung.ucm.ucmservice.CredentialManagerService.configureODESettings(Ljava/lang/String;Landroid/os/Bundle;Ljava/lang/String;)I
com.samsung.ucm.ucmservice.CredentialManagerService.containsAlias(Ljava/lang/String;I)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.createSecureChannel(ILandroid/os/Bundle;)Lcom/samsung/android/knox/ucm/core/ApduMessage;
com.samsung.ucm.ucmservice.CredentialManagerService.decrypt(Ljava/lang/String;[BLjava/lang/String;Landroid/os/Bundle;)Lcom/samsung/android/knox/ucm/core/ucmRetParcelable;
com.samsung.ucm.ucmservice.CredentialManagerService.delegateDeleteFile(Ljava/lang/String;)Z
com.samsung.ucm.ucmservice.CredentialManagerService.delegateGetTaProfile()Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.delegateLoadTa(Z)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.delegateProcessTACommand(Landroid/os/Bundle;)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.delegateReadFile(Ljava/lang/String;)[B
com.samsung.ucm.ucmservice.CredentialManagerService.delegateSaveFile(Ljava/lang/String;[B)Z
com.samsung.ucm.ucmservice.CredentialManagerService.delegateUnloadTa()Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.delegateWrapSessionKey([B)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.delete(Ljava/lang/String;)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.deleteCertificate(Ljava/lang/String;I)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.destroySecureChannel()I
com.samsung.ucm.ucmservice.CredentialManagerService.encrypt(Ljava/lang/String;[BLjava/lang/String;Landroid/os/Bundle;)Lcom/samsung/android/knox/ucm/core/ucmRetParcelable;
com.samsung.ucm.ucmservice.CredentialManagerService.generateDek(Ljava/lang/String;)Lcom/samsung/android/knox/ucm/core/ucmRetParcelable;
com.samsung.ucm.ucmservice.CredentialManagerService.generateKey(Ljava/lang/String;Ljava/lang/String;ILandroid/os/Bundle;)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.generateKeyPair(Ljava/lang/String;Ljava/lang/String;ILandroid/os/Bundle;)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.generateKeyPairInternal(Ljava/lang/String;Ljava/lang/String;ILandroid/os/Bundle;)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.generateKeyguardPassword(ILjava/lang/String;Landroid/os/Bundle;)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.generateSecureRandom(Ljava/lang/String;I[B)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.generateWrappedDek(Ljava/lang/String;)Lcom/samsung/android/knox/ucm/core/ucmRetParcelable;
com.samsung.ucm.ucmservice.CredentialManagerService.getAdminConfigureBundleFromCs(IILjava/lang/String;)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.getAgentInfo(Ljava/lang/String;)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.getCertificateChain(Ljava/lang/String;)Lcom/samsung/android/knox/ucm/core/ucmRetParcelable;
com.samsung.ucm.ucmservice.CredentialManagerService.getCredentialStorageProperty(ILjava/lang/String;Landroid/os/Bundle;I)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.getDek(Ljava/lang/String;)Lcom/samsung/android/knox/ucm/core/ucmRetParcelable;
com.samsung.ucm.ucmservice.CredentialManagerService.getDekForVold(Ljava/lang/String;[B)Lcom/samsung/android/knox/ucm/core/ucmRetParcelable;
com.samsung.ucm.ucmservice.CredentialManagerService.getDekForVoldInternalKey(Ljava/lang/String;[B)Lcom/samsung/android/knox/ucm/core/ucmRetParcelable;
com.samsung.ucm.ucmservice.CredentialManagerService.getDetailErrorMessage(Ljava/lang/String;I)Ljava/lang/String;
com.samsung.ucm.ucmservice.CredentialManagerService.getInfo(Ljava/lang/String;)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.getKeyType(Ljava/lang/String;)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.getKeyguardPinCurrentRetryCount(Ljava/lang/String;)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.getKeyguardPinMaximumLength(Ljava/lang/String;)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.getKeyguardPinMaximumRetryCount(Ljava/lang/String;)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.getKeyguardPinMinimumLength(Ljava/lang/String;)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.getKeyguardStorageForCurrentUser(I)Ljava/lang/String;
com.samsung.ucm.ucmservice.CredentialManagerService.getODEConfigurationForVold(Ljava/lang/String;)Lcom/samsung/android/knox/ucm/core/ucmRetParcelable;
com.samsung.ucm.ucmservice.CredentialManagerService.getODESettingsConfiguration()Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.getOdeKey(Ljava/lang/String;[B)Lcom/samsung/android/knox/ucm/core/ucmRetParcelable;
com.samsung.ucm.ucmservice.CredentialManagerService.getStatus(Ljava/lang/String;)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.grantKeyChainAccess(Ljava/lang/String;I)Z
com.samsung.ucm.ucmservice.CredentialManagerService.importKey(Ljava/lang/String;Landroid/os/Bundle;)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.importKeyPair(Ljava/lang/String;[B[BLandroid/os/Bundle;)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.initKeyguardPin(Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.installCertificate(Ljava/lang/String;[B[BLandroid/os/Bundle;)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.isKeyChainGranted(Ljava/lang/String;I)Z
com.samsung.ucm.ucmservice.CredentialManagerService.isUserCertificatesExistInUCS()Z
com.samsung.ucm.ucmservice.CredentialManagerService.listAllProviders()[Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.listProviders()[Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.notifyChangeToPlugin(Ljava/lang/String;ILandroid/os/Bundle;)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.notifyLicenseStatus(Ljava/lang/String;Ljava/lang/String;I)Z
com.samsung.ucm.ucmservice.CredentialManagerService.notifyPluginResult(Landroid/os/Bundle;)V
com.samsung.ucm.ucmservice.CredentialManagerService.notifyVoldComplete(Ljava/lang/String;[B)Lcom/samsung/android/knox/ucm/core/ucmRetParcelable;
com.samsung.ucm.ucmservice.CredentialManagerService.processMessage(I[B)Lcom/samsung/android/knox/ucm/core/ApduMessage;
com.samsung.ucm.ucmservice.CredentialManagerService.registerSystemUICallback(Lcom/samsung/android/knox/ucm/core/ICredentialManagerServiceSystemUICallback;)V
com.samsung.ucm.ucmservice.CredentialManagerService.removeEnforcedLockTypeNotification(I)V
com.samsung.ucm.ucmservice.CredentialManagerService.resetNonMdmCertificates()V
com.samsung.ucm.ucmservice.CredentialManagerService.resetUid(Ljava/lang/String;I)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.resetUser(Ljava/lang/String;I)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.saw(Ljava/lang/String;I)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.sawInternal(Ljava/lang/String;II)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.setAdminConfigureBundleForCs(IILjava/lang/String;Landroid/os/Bundle;I)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.setCertificateChain(Ljava/lang/String;[BLandroid/os/Bundle;)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.setCredentialStorageProperty(ILjava/lang/String;Landroid/os/Bundle;I)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.setKeyguardPinMaximumLength(Ljava/lang/String;I)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.setKeyguardPinMaximumRetryCount(Ljava/lang/String;I)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.setKeyguardPinMinimumLength(Ljava/lang/String;I)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.setState(Ljava/lang/String;I)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.showEnforcedLockTypeNotification(ILjava/lang/String;)V
com.samsung.ucm.ucmservice.CredentialManagerService.sign(Ljava/lang/String;[BLjava/lang/String;)Lcom/samsung/android/knox/ucm/core/ucmRetParcelable;
com.samsung.ucm.ucmservice.CredentialManagerService.unwrapDek(Ljava/lang/String;[B)Lcom/samsung/android/knox/ucm/core/ucmRetParcelable;
com.samsung.ucm.ucmservice.CredentialManagerService.updateAgentList()V
com.samsung.ucm.ucmservice.CredentialManagerService.verifyPin(ILjava/lang/String;Ljava/lang/String;Landroid/os/Bundle;)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.verifyPuk(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/os/Bundle;
com.android.server.DirEncryptService.encryptStorage(Ljava/lang/String;)I
com.android.server.DirEncryptService.getAdditionalSpaceRequired()I
com.android.server.DirEncryptService.getCurrentStatus()I
com.android.server.DirEncryptService.getLastError()I
com.android.server.DirEncryptService.getListener()Landroid/os/IVoldTaskListener;
com.android.server.DirEncryptService.isSdCardEncryped()Z
com.android.server.DirEncryptService.isStorageCardEncryptionPoliciesApplied()I
com.android.server.DirEncryptService.registerListener(Lcom/samsung/android/security/IDirEncryptServiceListener;)V
com.android.server.DirEncryptService.setMountSDcardToHelper(Z)V
com.android.server.DirEncryptService.setNeedToCreateKey(Z)V
com.android.server.DirEncryptService.setPassword(Ljava/lang/String;)I
com.android.server.DirEncryptService.setSdCardEncryptionPolicy(IILjava/lang/String;)I
com.android.server.DirEncryptService.setStorageCardEncryptionPolicy(III)I
com.android.server.DirEncryptService.unmountSDCardByAdmin()V
com.android.server.DirEncryptService.unregisterListener(Lcom/samsung/android/security/IDirEncryptServiceListener;)V
com.samsung.android.knoxguard.service.KnoxGuardService.addPackagesToClearCacheBlockList(Ljava/util/List;)Z
com.samsung.android.knoxguard.service.KnoxGuardService.addPackagesToForceStopBlockList(Ljava/util/List;)Z
com.samsung.android.knoxguard.service.KnoxGuardService.allowFirmwareRecovery(Z)Z
com.samsung.android.knoxguard.service.KnoxGuardService.allowOTAUpgrade(Z)Z
com.samsung.android.knoxguard.service.KnoxGuardService.allowSafeMode(Z)Z
com.samsung.android.knoxguard.service.KnoxGuardService.bindToLockScreen()V
com.samsung.android.knoxguard.service.KnoxGuardService.callKGsv()V
com.samsung.android.knoxguard.service.KnoxGuardService.generateHotpDHRequest()Ljava/lang/String;
com.samsung.android.knoxguard.service.KnoxGuardService.getClientData()Ljava/lang/String;
com.samsung.android.knoxguard.service.KnoxGuardService.getHDMVersion()Ljava/lang/String;
com.samsung.android.knoxguard.service.KnoxGuardService.getHdmStatus()Ljava/lang/String;
com.samsung.android.knoxguard.service.KnoxGuardService.getHotpChallenge()Ljava/lang/String;
com.samsung.android.knoxguard.service.KnoxGuardService.getKGID()Ljava/lang/String;
com.samsung.android.knoxguard.service.KnoxGuardService.getKGPolicy()Ljava/lang/String;
com.samsung.android.knoxguard.service.KnoxGuardService.getKGServiceVersion()I
com.samsung.android.knoxguard.service.KnoxGuardService.getLockAction()Ljava/lang/String;
com.samsung.android.knoxguard.service.KnoxGuardService.getNonce(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
com.samsung.android.knoxguard.service.KnoxGuardService.getPBAUniqueNumber()Ljava/lang/String;
com.samsung.android.knoxguard.service.KnoxGuardService.getStringSystemProperty(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
com.samsung.android.knoxguard.service.KnoxGuardService.getTAError()I
com.samsung.android.knoxguard.service.KnoxGuardService.getTAInfo(I)Ljava/lang/String;
com.samsung.android.knoxguard.service.KnoxGuardService.getTAState()I
com.samsung.android.knoxguard.service.KnoxGuardService.getTAStateSetError(Z)I
com.samsung.android.knoxguard.service.KnoxGuardService.isSkipSupportContainerSupported()Z
com.samsung.android.knoxguard.service.KnoxGuardService.isVpnExceptionRequired()Z
com.samsung.android.knoxguard.service.KnoxGuardService.lockScreen(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZLandroid/os/Bundle;)I
com.samsung.android.knoxguard.service.KnoxGuardService.provisionCert(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
com.samsung.android.knoxguard.service.KnoxGuardService.registerIntent(Ljava/lang/String;Ljava/util/List;)V
com.samsung.android.knoxguard.service.KnoxGuardService.removeActiveAdmin(Landroid/content/ComponentName;)V
com.samsung.android.knoxguard.service.KnoxGuardService.resetRPMB()I
com.samsung.android.knoxguard.service.KnoxGuardService.resetRPMB2(Ljava/lang/String;)I
com.samsung.android.knoxguard.service.KnoxGuardService.revokeRuntimePermission(Ljava/lang/String;Ljava/lang/String;Landroid/os/UserHandle;)V
com.samsung.android.knoxguard.service.KnoxGuardService.setActiveAdmin(Landroid/content/ComponentName;)V
com.samsung.android.knoxguard.service.KnoxGuardService.setAdminRemovable(Z)Z
com.samsung.android.knoxguard.service.KnoxGuardService.setAirplaneMode(Z)V
com.samsung.android.knoxguard.service.KnoxGuardService.setApplicationUninstallationDisabled(Ljava/lang/String;)Z
com.samsung.android.knoxguard.service.KnoxGuardService.setCheckingState()I
com.samsung.android.knoxguard.service.KnoxGuardService.setClientData(Ljava/lang/String;)I
com.samsung.android.knoxguard.service.KnoxGuardService.setKnoxGuardExemptRule(Z)V
com.samsung.android.knoxguard.service.KnoxGuardService.setRemoteLockToLockscreen(IZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;IJIZLandroid/os/Bundle;)V
com.samsung.android.knoxguard.service.KnoxGuardService.setRemoteLockToLockscreenWithSkipSupport(IZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;IJIZLandroid/os/Bundle;Z)V
com.samsung.android.knoxguard.service.KnoxGuardService.setRuntimePermission(Ljava/lang/String;Ljava/lang/String;Landroid/os/UserHandle;)V
com.samsung.android.knoxguard.service.KnoxGuardService.shouldBlockCustomRom()Z
com.samsung.android.knoxguard.service.KnoxGuardService.showInstallmentStatus()Z
com.samsung.android.knoxguard.service.KnoxGuardService.unRegisterIntent()V
com.samsung.android.knoxguard.service.KnoxGuardService.unlockScreen()I
com.samsung.android.knoxguard.service.KnoxGuardService.verifyCompleteToken(Ljava/lang/String;)I
com.samsung.android.knoxguard.service.KnoxGuardService.verifyHOTPDHChallenge(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
com.samsung.android.knoxguard.service.KnoxGuardService.verifyHOTPPin(Ljava/lang/String;)I
com.samsung.android.knoxguard.service.KnoxGuardService.verifyHOTPsecret(Ljava/lang/String;)I
com.samsung.android.knoxguard.service.KnoxGuardService.verifyKgRot()Ljava/lang/String;
com.samsung.android.knoxguard.service.KnoxGuardService.verifyPolicy(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
com.samsung.android.knoxguard.service.KnoxGuardService.verifyRegistrationInfo(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
com.android.server.usb.UsbService.addAccessoryPackagesToPreferenceDenied(Landroid/hardware/usb/UsbAccessory;[Ljava/lang/String;Landroid/os/UserHandle;)V
com.android.server.usb.UsbService.addDevicePackagesToPreferenceDenied(Landroid/hardware/usb/UsbDevice;[Ljava/lang/String;Landroid/os/UserHandle;)V
com.android.server.usb.UsbService.clearDefaults(Ljava/lang/String;I)V
com.android.server.usb.UsbService.enableContaminantDetection(Ljava/lang/String;Z)V
com.android.server.usb.UsbService.enableLimitPowerTransfer(Ljava/lang/String;ZILandroid/hardware/usb/IUsbOperationInternal;)V
com.android.server.usb.UsbService.enableUsbData(Ljava/lang/String;ZILandroid/hardware/usb/IUsbOperationInternal;)Z
com.android.server.usb.UsbService.enableUsbDataWhileDocked(Ljava/lang/String;ILandroid/hardware/usb/IUsbOperationInternal;)V
com.android.server.usb.UsbService.getControlFd(J)Landroid/os/ParcelFileDescriptor;
com.android.server.usb.UsbService.getCurrentAccessory()Landroid/hardware/usb/UsbAccessory;
com.android.server.usb.UsbService.getCurrentFunctions()J
com.android.server.usb.UsbService.getCurrentUsbSpeed()I
com.android.server.usb.UsbService.getDeviceList(Landroid/os/Bundle;)V
com.android.server.usb.UsbService.getGadgetHalVersion()I
com.android.server.usb.UsbService.getPortStatus(Ljava/lang/String;)Landroid/hardware/usb/UsbPortStatus;
com.android.server.usb.UsbService.getPorts()Ljava/util/List;
com.android.server.usb.UsbService.getScreenUnlockedFunctions()J
com.android.server.usb.UsbService.getUsbHalVersion()I
com.android.server.usb.UsbService.grantAccessoryPermission(Landroid/hardware/usb/UsbAccessory;I)V
com.android.server.usb.UsbService.grantDevicePermission(Landroid/hardware/usb/UsbDevice;I)V
com.android.server.usb.UsbService.hasAccessoryPermission(Landroid/hardware/usb/UsbAccessory;)Z
com.android.server.usb.UsbService.hasDefaults(Ljava/lang/String;I)Z
com.android.server.usb.UsbService.hasDevicePermission(Landroid/hardware/usb/UsbDevice;Ljava/lang/String;)Z
com.android.server.usb.UsbService.isFunctionEnabled(Ljava/lang/String;)Z
com.android.server.usb.UsbService.isSupportDexRestrict()Z
com.android.server.usb.UsbService.isUsbBlocked()Z
com.android.server.usb.UsbService.openAccessory(Landroid/hardware/usb/UsbAccessory;)Landroid/os/ParcelFileDescriptor;
com.android.server.usb.UsbService.openDevice(Ljava/lang/String;Ljava/lang/String;)Landroid/os/ParcelFileDescriptor;
com.android.server.usb.UsbService.removeAccessoryPackagesFromPreferenceDenied(Landroid/hardware/usb/UsbAccessory;[Ljava/lang/String;Landroid/os/UserHandle;)V
com.android.server.usb.UsbService.removeDevicePackagesFromPreferenceDenied(Landroid/hardware/usb/UsbDevice;[Ljava/lang/String;Landroid/os/UserHandle;)V
com.android.server.usb.UsbService.requestAccessoryPermission(Landroid/hardware/usb/UsbAccessory;Ljava/lang/String;Landroid/app/PendingIntent;)V
com.android.server.usb.UsbService.requestDevicePermission(Landroid/hardware/usb/UsbDevice;Ljava/lang/String;Landroid/app/PendingIntent;)V
com.android.server.usb.UsbService.resetUsbGadget()V
com.android.server.usb.UsbService.resetUsbPort(Ljava/lang/String;ILandroid/hardware/usb/IUsbOperationInternal;)V
com.android.server.usb.UsbService.restrictUsbHostInterface(ZLjava/lang/String;)I
com.android.server.usb.UsbService.semGetDataRoleStatus()I
com.android.server.usb.UsbService.semGetPowerRoleStatus()I
com.android.server.usb.UsbService.semGrantDevicePermission(Landroid/hardware/usb/UsbDevice;I)V
com.android.server.usb.UsbService.semSetDevicePackage(Landroid/hardware/usb/UsbDevice;Ljava/lang/String;I)V
com.android.server.usb.UsbService.semSetMode(I)V
com.android.server.usb.UsbService.setAccessoryPackage(Landroid/hardware/usb/UsbAccessory;Ljava/lang/String;I)V
com.android.server.usb.UsbService.setAccessoryPersistentPermission(Landroid/hardware/usb/UsbAccessory;ILandroid/os/UserHandle;Z)V
com.android.server.usb.UsbService.setCurrentFunction(Ljava/lang/String;Z)V
com.android.server.usb.UsbService.setCurrentFunctions(J)V
com.android.server.usb.UsbService.setDevicePackage(Landroid/hardware/usb/UsbDevice;Ljava/lang/String;I)V
com.android.server.usb.UsbService.setDevicePersistentPermission(Landroid/hardware/usb/UsbDevice;ILandroid/os/UserHandle;Z)V
com.android.server.usb.UsbService.setPortRoles(Ljava/lang/String;II)V
com.android.server.usb.UsbService.setScreenUnlockedFunctions(J)V
com.android.server.usb.UsbService.setUsbDeviceConnectionHandler(Landroid/content/ComponentName;)V
com.android.server.usb.UsbService.setUsbHiddenMenuState(Z)V
com.samsung.android.server.wifi.aware.SemWifiAwareServiceImpl.setClusterMergingEnabled(Z)V
com.android.server.om.OverlayManagerService$1.applySamsungConfigChangeOverlays(Ljava/util/List;Ljava/util/List;ILandroid/content/om/ISamsungOverlayCallback;)Z
com.android.server.om.OverlayManagerService$1.applySamsungThemeOverlays(Ljava/util/List;Ljava/util/List;ILandroid/content/om/ISamsungOverlayCallback;)Z
com.android.server.om.OverlayManagerService$1.applyWallpaperColor(Ljava/util/List;Ljava/util/List;Z)V
com.android.server.om.OverlayManagerService$1.applyWallpaperColors(Ljava/util/List;II)V
com.android.server.om.OverlayManagerService$1.commit(Landroid/content/om/OverlayManagerTransaction;)V
com.android.server.om.OverlayManagerService$1.deleteSamsungThemeOverlays(Ljava/util/List;I)V
com.android.server.om.OverlayManagerService$1.getAllOverlays(I)Ljava/util/Map;
com.android.server.om.OverlayManagerService$1.getDefaultOverlayPackages()[Ljava/lang/String;
com.android.server.om.OverlayManagerService$1.getLastPalette(Ljava/util/List;Ljava/util/List;)Z
com.android.server.om.OverlayManagerService$1.getOverlayInfo(Ljava/lang/String;I)Landroid/content/om/OverlayInfo;
com.android.server.om.OverlayManagerService$1.getOverlayInfoByIdentifier(Landroid/content/om/OverlayIdentifier;I)Landroid/content/om/OverlayInfo;
com.android.server.om.OverlayManagerService$1.getOverlayInfosForTarget(Ljava/lang/String;I)Ljava/util/List;
com.android.server.om.OverlayManagerService$1.getTargetPath(Ljava/lang/String;)Ljava/lang/String;
com.android.server.om.OverlayManagerService$1.getWallpaperColors()Ljava/util/List;
com.android.server.om.OverlayManagerService$1.invalidateCachesForOverlay(Ljava/lang/String;I)V
com.android.server.om.OverlayManagerService$1.readLastPalette()Ljava/util/List;
com.android.server.om.OverlayManagerService$1.setEnabled(Ljava/lang/String;ZI)Z
com.android.server.om.OverlayManagerService$1.setEnabledExclusive(Ljava/lang/String;ZI)Z
com.android.server.om.OverlayManagerService$1.setEnabledExclusiveInCategory(Ljava/lang/String;I)Z
com.android.server.om.OverlayManagerService$1.setHighestPriority(Ljava/lang/String;I)Z
com.android.server.om.OverlayManagerService$1.setLowestPriority(Ljava/lang/String;I)Z
com.android.server.om.OverlayManagerService$1.setPriority(Ljava/lang/String;Ljava/lang/String;I)Z
com.android.server.om.OverlayManagerService$1.updatePackageCache(Ljava/lang/String;I)V
com.android.server.alarm.AlarmManagerService$5.canScheduleExactAlarms(Ljava/lang/String;)Z
com.android.server.alarm.AlarmManagerService$5.currentNetworkTimeMillis()J
com.android.server.alarm.AlarmManagerService$5.getConfigVersion()I
com.android.server.alarm.AlarmManagerService$5.getNextAlarmClock(I)Landroid/app/AlarmManager$AlarmClockInfo;
com.android.server.alarm.AlarmManagerService$5.getNextAlarmClocks(I)Ljava/util/List;
com.android.server.alarm.AlarmManagerService$5.getNextWakeFromIdleTime()J
com.android.server.alarm.AlarmManagerService$5.hasScheduleExactAlarm(Ljava/lang/String;I)Z
com.android.server.alarm.AlarmManagerService$5.remove(Landroid/app/PendingIntent;Landroid/app/IAlarmListener;)V
com.android.server.alarm.AlarmManagerService$5.set(Ljava/lang/String;IJJJILandroid/app/PendingIntent;Landroid/app/IAlarmListener;Ljava/lang/String;Landroid/os/WorkSource;Landroid/app/AlarmManager$AlarmClockInfo;)V
com.android.server.alarm.AlarmManagerService$5.setAutoPowerUp(Ljava/lang/String;)V
com.android.server.alarm.AlarmManagerService$5.setTime(J)Z
com.android.server.alarm.AlarmManagerService$5.setTimeZone(Ljava/lang/String;)V
com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub.activeServiceSupportsAssist()Z
com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub.activeServiceSupportsLaunchFromKeyguard()Z
com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub.closeSystemDialogs(Landroid/os/IBinder;)V
com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub.createSoundTriggerSessionAsOriginator(Landroid/media/permission/Identity;Landroid/os/IBinder;)Lcom/android/internal/app/IVoiceInteractionSoundTriggerSession;
com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub.deleteKeyphraseSoundModel(ILjava/lang/String;)I
com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub.deliverNewSession(Landroid/os/IBinder;Landroid/service/voice/IVoiceInteractionSession;Lcom/android/internal/app/IVoiceInteractor;)Z
com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub.finish(Landroid/os/IBinder;)V
com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub.getActiveServiceComponentName()Landroid/content/ComponentName;
com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub.getActiveServiceSupportedActions(Ljava/util/List;Lcom/android/internal/app/IVoiceActionCheckCallback;)V
com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub.getDisabledShowContext()I
com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub.getEnrolledKeyphraseMetadata(Ljava/lang/String;Ljava/lang/String;)Landroid/hardware/soundtrigger/KeyphraseMetadata;
com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub.getKeyphraseSoundModel(ILjava/lang/String;)Landroid/hardware/soundtrigger/SoundTrigger$KeyphraseSoundModel;
com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub.getUserDisabledShowContext()I
com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub.hideCurrentSession()V
com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub.hideSessionFromSession(Landroid/os/IBinder;)Z
com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub.isEnrolledForKeyphrase(ILjava/lang/String;)Z
com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub.isSessionRunning()Z
com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub.launchVoiceAssistFromKeyguard()V
com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub.onLockscreenShown()V
com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub.performDirectAction(Landroid/os/IBinder;Ljava/lang/String;Landroid/os/Bundle;ILandroid/os/IBinder;Landroid/os/RemoteCallback;Landroid/os/RemoteCallback;)V
com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub.registerVoiceInteractionSessionListener(Lcom/android/internal/app/IVoiceInteractionSessionListener;)V
com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub.requestDirectActions(Landroid/os/IBinder;ILandroid/os/IBinder;Landroid/os/RemoteCallback;Landroid/os/RemoteCallback;)V
com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub.setDisabled(Z)V
com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub.setDisabledShowContext(I)V
com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub.setKeepAwake(Landroid/os/IBinder;Z)V
com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub.setSessionWindowVisible(Landroid/os/IBinder;Z)V
com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub.setUiHints(Landroid/os/Bundle;)V
com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub.showSession(Landroid/os/Bundle;I)V
com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub.showSessionForActiveService(Landroid/os/Bundle;ILcom/android/internal/app/IVoiceInteractionSessionShowCallback;Landroid/os/IBinder;)Z
com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub.showSessionFromSession(Landroid/os/IBinder;Landroid/os/Bundle;I)Z
com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub.shutdownHotwordDetectionService()V
com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub.startAssistantActivity(Landroid/os/IBinder;Landroid/content/Intent;Ljava/lang/String;Ljava/lang/String;)I
com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub.startListeningFromExternalSource(Landroid/os/ParcelFileDescriptor;Landroid/media/AudioFormat;Landroid/os/PersistableBundle;Landroid/service/voice/IMicrophoneHotwordDetectionVoiceInteractionCallback;)V
com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub.startListeningFromMic(Landroid/media/AudioFormat;Landroid/service/voice/IMicrophoneHotwordDetectionVoiceInteractionCallback;)V
com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub.startListeningVisibleActivityChanged(Landroid/os/IBinder;)V
com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub.startVoiceActivity(Landroid/os/IBinder;Landroid/content/Intent;Ljava/lang/String;Ljava/lang/String;)I
com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub.stopListeningFromMic()V
com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub.stopListeningVisibleActivityChanged(Landroid/os/IBinder;)V
com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub.triggerHardwareRecognitionEventForTest(Landroid/hardware/soundtrigger/SoundTrigger$KeyphraseRecognitionEvent;Lcom/android/internal/app/IHotwordRecognitionStatusCallback;)V
com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub.updateKeyphraseSoundModel(Landroid/hardware/soundtrigger/SoundTrigger$KeyphraseSoundModel;)I
com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub.updateState(Landroid/media/permission/Identity;Landroid/os/PersistableBundle;Landroid/os/SharedMemory;Lcom/android/internal/app/IHotwordRecognitionStatusCallback;I)V
android.os.epic.EpicManagerService$BinderService.Create(I)Landroid/os/epic/IEpicObject;
android.os.epic.EpicManagerService$BinderService.Creates([I)Landroid/os/epic/IEpicObject;
com.android.server.TelephonyRegistry.addCarrierPrivilegesCallback(ILcom/android/internal/telephony/ICarrierPrivilegesCallback;Ljava/lang/String;Ljava/lang/String;)V
com.android.server.TelephonyRegistry.addOnOpportunisticSubscriptionsChangedListener(Ljava/lang/String;Ljava/lang/String;Lcom/android/internal/telephony/IOnSubscriptionsChangedListener;)V
com.android.server.TelephonyRegistry.addOnSubscriptionsChangedListener(Ljava/lang/String;Ljava/lang/String;Lcom/android/internal/telephony/IOnSubscriptionsChangedListener;)V
com.android.server.TelephonyRegistry.clearPreciseDataConnectionStates(I)V
com.android.server.TelephonyRegistry.listenWithEventList(ZZILjava/lang/String;Ljava/lang/String;Lcom/android/internal/telephony/IPhoneStateListener;[IZ)V
com.android.server.TelephonyRegistry.notifyActiveDataSubIdChanged(I)V
com.android.server.TelephonyRegistry.notifyAllowedNetworkTypesChanged(IIIJ)V
com.android.server.TelephonyRegistry.notifyBarringInfoChanged(IILandroid/telephony/BarringInfo;)V
com.android.server.TelephonyRegistry.notifyCallForwardingChanged(Z)V
com.android.server.TelephonyRegistry.notifyCallForwardingChangedForSubscriber(IZ)V
com.android.server.TelephonyRegistry.notifyCallQualityChanged(Landroid/telephony/CallQuality;III)V
com.android.server.TelephonyRegistry.notifyCallState(IIILjava/lang/String;)V
com.android.server.TelephonyRegistry.notifyCallStateForAllSubs(ILjava/lang/String;)V
com.android.server.TelephonyRegistry.notifyCarrierNetworkChange(Z)V
com.android.server.TelephonyRegistry.notifyCarrierNetworkChangeWithSubId(IZ)V
com.android.server.TelephonyRegistry.notifyCarrierPrivilegesChanged(ILjava/util/List;[I)V
com.android.server.TelephonyRegistry.notifyCarrierServiceChanged(ILjava/lang/String;I)V
com.android.server.TelephonyRegistry.notifyCellInfo(Ljava/util/List;)V
com.android.server.TelephonyRegistry.notifyCellInfoForSubscriber(ILjava/util/List;)V
com.android.server.TelephonyRegistry.notifyCellLocationForSubscriber(ILandroid/telephony/CellIdentity;)V
com.android.server.TelephonyRegistry.notifyDataActivity(I)V
com.android.server.TelephonyRegistry.notifyDataActivityForSubscriber(II)V
com.android.server.TelephonyRegistry.notifyDataConnectionForSubscriber(IILandroid/telephony/PreciseDataConnectionState;)V
com.android.server.TelephonyRegistry.notifyDataEnabled(IIZI)V
com.android.server.TelephonyRegistry.notifyDisconnectCause(IIII)V
com.android.server.TelephonyRegistry.notifyDisplayInfoChanged(IILandroid/telephony/TelephonyDisplayInfo;)V
com.android.server.TelephonyRegistry.notifyEmergencyNumberList(II)V
com.android.server.TelephonyRegistry.notifyImsDisconnectCause(ILandroid/telephony/ims/ImsReasonInfo;)V
com.android.server.TelephonyRegistry.notifyLinkCapacityEstimateChanged(IILjava/util/List;)V
com.android.server.TelephonyRegistry.notifyMessageWaitingChangedForPhoneId(IIZ)V
com.android.server.TelephonyRegistry.notifyOemHookRawEventForSubscriber(II[B)V
com.android.server.TelephonyRegistry.notifyOpportunisticSubscriptionInfoChanged()V
com.android.server.TelephonyRegistry.notifyOutgoingEmergencyCall(IILandroid/telephony/emergency/EmergencyNumber;)V
com.android.server.TelephonyRegistry.notifyOutgoingEmergencySms(IILandroid/telephony/emergency/EmergencyNumber;)V
com.android.server.TelephonyRegistry.notifyPhoneCapabilityChanged(Landroid/telephony/PhoneCapability;)V
com.android.server.TelephonyRegistry.notifyPhysicalChannelConfigForSubscriber(IILjava/util/List;)V
com.android.server.TelephonyRegistry.notifyPreciseCallState(IIIII)V
com.android.server.TelephonyRegistry.notifyRadioPowerStateChanged(III)V
com.android.server.TelephonyRegistry.notifyRegistrationFailed(IILandroid/telephony/CellIdentity;Ljava/lang/String;III)V
com.android.server.TelephonyRegistry.notifyServiceStateForPhoneId(IILandroid/telephony/ServiceState;)V
com.android.server.TelephonyRegistry.notifySignalStrengthForPhoneId(IILandroid/telephony/SignalStrength;)V
com.android.server.TelephonyRegistry.notifySimActivationStateChangedForPhoneId(IIII)V
com.android.server.TelephonyRegistry.notifySrvccStateChanged(II)V
com.android.server.TelephonyRegistry.notifySubscriptionInfoChanged()V
com.android.server.TelephonyRegistry.notifyUserMobileDataStateChangedForPhoneId(IIZ)V
com.android.server.TelephonyRegistry.removeCarrierPrivilegesCallback(Lcom/android/internal/telephony/ICarrierPrivilegesCallback;Ljava/lang/String;)V
com.android.server.TelephonyRegistry.removeOnSubscriptionsChangedListener(Ljava/lang/String;Lcom/android/internal/telephony/IOnSubscriptionsChangedListener;)V
com.android.server.am.ProcessStatsService.getCommittedStats(JIZLjava/util/List;)J
com.android.server.am.ProcessStatsService.getCommittedStatsMerged(JIZLjava/util/List;Lcom/android/internal/app/procstats/ProcessStats;)J
com.android.server.am.ProcessStatsService.getCurrentMemoryState()I
com.android.server.am.ProcessStatsService.getCurrentStats(Ljava/util/List;)[B
com.android.server.am.ProcessStatsService.getMinAssociationDumpDuration()J
com.android.server.am.ProcessStatsService.getStatsOverTime(J)Landroid/os/ParcelFileDescriptor;
android.os.LazyService.getService(Ljava/lang/String;)Landroid/os/IBinder;
com.android.server.spay.UpdateReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.server.am.KillPolicyManager$AutoRestartParameterReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.kddi.android.CpaNotiReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
