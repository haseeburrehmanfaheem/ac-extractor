com.android.server.enterprise.sso.GenericSSOService.addAppTokenToGenericSSO(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;Lcom/samsung/android/knox/sso/common/TokenInfo;)I
com.android.server.enterprise.sso.GenericSSOService.addUserAndDeviceCertToGenericSSO(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/sso/common/TokenInfo;)I
com.android.server.enterprise.sso.GenericSSOService.addWhiteListPackages(Lcom/samsung/android/knox/ContextInfo;Ljava/util/List;)I
com.android.server.enterprise.sso.GenericSSOService.configureSSOByFile(Lcom/samsung/android/knox/ContextInfo;[B)I
com.android.server.enterprise.sso.GenericSSOService.deleteWhiteListPackages(Lcom/samsung/android/knox/ContextInfo;Ljava/util/List;)I
com.android.server.enterprise.sso.GenericSSOService.enrollSSOVendor(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;)I
com.android.server.enterprise.sso.GenericSSOService.forceAuthenticate(Lcom/samsung/android/knox/ContextInfo;)I
com.android.server.enterprise.sso.GenericSSOService.getAppTokenFromGenericSSO(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)Lcom/samsung/android/knox/sso/common/TokenInfo;
com.android.server.enterprise.sso.GenericSSOService.getAuthenticationConfig(Lcom/samsung/android/knox/ContextInfo;)Lcom/samsung/android/knox/container/AuthenticationConfig;
com.android.server.enterprise.sso.GenericSSOService.getAuthenticationConfigForContainer(I)Lcom/samsung/android/knox/container/AuthenticationConfig;
com.android.server.enterprise.sso.GenericSSOService.getCustomerBrandInfo(Lcom/samsung/android/knox/ContextInfo;)Landroid/os/Bundle;
com.android.server.enterprise.sso.GenericSSOService.getEnrolledSSOVendor(Lcom/samsung/android/knox/ContextInfo;)Ljava/lang/String;
com.android.server.enterprise.sso.GenericSSOService.getToken(Lcom/samsung/android/knox/ContextInfo;ZLcom/samsung/android/knox/sso/authrequest/IGenericSSOCallback;)V
com.android.server.enterprise.sso.GenericSSOService.getUserAndDeviceCertFromGenericSSO(Lcom/samsung/android/knox/ContextInfo;)Lcom/samsung/android/knox/sso/common/TokenInfo;
com.android.server.enterprise.sso.GenericSSOService.getUserInfo(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/sso/authrequest/IGenericSSOCallback;)V
com.android.server.enterprise.sso.GenericSSOService.getWhiteListPackages(Lcom/samsung/android/knox/ContextInfo;)Ljava/util/List;
com.android.server.enterprise.sso.GenericSSOService.isNetworkAuthenticationEnforced(Lcom/samsung/android/knox/ContextInfo;)Z
com.android.server.enterprise.sso.GenericSSOService.launchActivityFromBackground(Landroid/content/Intent;)V
com.android.server.enterprise.sso.GenericSSOService.performUserAuthentication(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/container/AuthenticationConfig;)Lcom/samsung/android/knox/sso/common/TokenInfo;
com.android.server.enterprise.sso.GenericSSOService.processWebServiceRequest(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/sso/serviceprovider/WebServiceRequest;)Lcom/samsung/android/knox/sso/serviceprovider/WebServiceResponse;
com.android.server.enterprise.sso.GenericSSOService.removeAppTokenFromGenericSSO(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)I
com.android.server.enterprise.sso.GenericSSOService.removeUserAndDeviceCertFromGenericSSO(Lcom/samsung/android/knox/ContextInfo;)I
com.android.server.enterprise.sso.GenericSSOService.resetPassword(I)Z
com.android.server.enterprise.sso.GenericSSOService.setAuthenticationConfig(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/container/AuthenticationConfig;)I
com.android.server.enterprise.sso.GenericSSOService.setAuthenticationConfigForContainer(Lcom/samsung/android/knox/container/AuthenticationConfig;I)I
com.android.server.enterprise.sso.GenericSSOService.setCustomerBrandInfo(Lcom/samsung/android/knox/ContextInfo;Landroid/os/Bundle;)I
com.android.server.enterprise.sso.GenericSSOService.setGenericSSOConfig(IILcom/samsung/android/knox/sso/config/GenericSSOConfig;)V
com.android.server.enterprise.sso.GenericSSOService.setUpdatedAuthenticationConfig(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/container/AuthenticationConfig;)Z
com.android.server.enterprise.sso.GenericSSOService.unenrollSSOVendor(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)I
com.android.server.enterprise.sso.GenericSSOService.validateUserAuthentication(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;Ljava/lang/String;)V
com.android.server.enterprise.sso.GenericSSOService.verifyUserAuthentication(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;Ljava/lang/String;)Lcom/samsung/android/knox/sso/common/TokenInfo;
com.android.server.StorageManagerService.changePrivateModePasswordCmd(ILjava/lang/String;Ljava/lang/String;)Z
com.android.server.StorageManagerService.checkEncryption()V
com.android.server.StorageManagerService.createPartitionCmd(II)Z
com.android.server.StorageManagerService.createSecureContainer(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;IZ)I
com.android.server.StorageManagerService.destroySecureContainer(Ljava/lang/String;Z)I
com.android.server.StorageManagerService.encryptExternalStorage(Z)I
com.android.server.StorageManagerService.finalizeSecureContainer(Ljava/lang/String;)I
com.android.server.StorageManagerService.finishMediaUpdate()V
com.android.server.StorageManagerService.fixPermissionsSecureContainer(Ljava/lang/String;ILjava/lang/String;)I
com.android.server.StorageManagerService.getCCmodeForCryptKeeper()I
com.android.server.StorageManagerService.getCurrentEncryptionFailCount()I
com.android.server.StorageManagerService.getPropertyFromFooter(Ljava/lang/String;)Ljava/lang/String;
com.android.server.StorageManagerService.getSecureContainerFilesystemPath(Ljava/lang/String;)Ljava/lang/String;
com.android.server.StorageManagerService.getSecureContainerList()[Ljava/lang/String;
com.android.server.StorageManagerService.getSecureContainerPath(Ljava/lang/String;)Ljava/lang/String;
com.android.server.StorageManagerService.getVolumeState(Ljava/lang/String;)Ljava/lang/String;
com.android.server.StorageManagerService.isFbeSecure(I)Z
com.android.server.StorageManagerService.isMountedCmd(I)Z
com.android.server.StorageManagerService.isSecureContainerMounted(Ljava/lang/String;)Z
com.android.server.StorageManagerService.mountCmd(ILjava/lang/String;ZI)Z
com.android.server.StorageManagerService.mountPrivateModeCmd(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z
com.android.server.StorageManagerService.mountSecureContainer(Ljava/lang/String;Ljava/lang/String;IZ)I
com.android.server.StorageManagerService.mountVolume(Ljava/lang/String;)I
com.android.server.StorageManagerService.removePartitionCmd(II)Z
com.android.server.StorageManagerService.renameSecureContainer(Ljava/lang/String;Ljava/lang/String;)I
com.android.server.StorageManagerService.resizeSecureContainer(Ljava/lang/String;ILjava/lang/String;)I
com.android.server.StorageManagerService.semGetExternalSdCardHealthState()I
com.android.server.StorageManagerService.semGetExternalSdCardId()Ljava/lang/String;
com.android.server.StorageManagerService.setDualDARPolicyCmd(II)Z
com.android.server.StorageManagerService.setExternalEncryptionPassword(Ljava/lang/String;)I
com.android.server.StorageManagerService.setKeyforFBEfota()V
com.android.server.StorageManagerService.setPropertyIntoFooter(Ljava/lang/String;Ljava/lang/String;)I
com.android.server.StorageManagerService.setSdpPolicyCmd(I)Z
com.android.server.StorageManagerService.setSdpPolicyToPathCmd(ILjava/lang/String;)Z
com.android.server.StorageManagerService.startServiceSns()V
com.android.server.StorageManagerService.stopServiceSns()V
com.android.server.StorageManagerService.unmountCmd(II)Z
com.android.server.StorageManagerService.unmountPrivateModeCmd(ILjava/lang/String;)Z
com.android.server.StorageManagerService.unmountSecureContainer(Ljava/lang/String;Z)I
com.android.server.StorageManagerService.unmountVolume(Ljava/lang/String;ZZ)V
com.android.server.enterprise.securetimer.SecureTimerService.cancelTimer(Ljava/lang/String;)Z
com.android.server.enterprise.securetimer.SecureTimerService.getReferenceTime()J
com.android.server.enterprise.securetimer.SecureTimerService.getRemainingTime(Ljava/lang/String;)J
com.android.server.enterprise.securetimer.SecureTimerService.getTimers()Ljava/util/List;
com.android.server.enterprise.securetimer.SecureTimerService.getVersion()Ljava/lang/String;
com.android.server.enterprise.securetimer.SecureTimerService.isSecureTimerEnabled()Z
com.android.server.enterprise.securetimer.SecureTimerService.setSecureTimerEnabled(Z)Z
com.android.server.enterprise.securetimer.SecureTimerService.setTimer(JLjava/lang/String;)Z
com.samsung.android.friends.FrsServiceImpl.executeAction(ILandroid/os/Bundle;)Landroid/os/Bundle;
com.android.server.enterprise.scep.ScepKeystoreProxyService.deletecertificateEntry(Ljava/lang/String;Z)I
com.android.server.enterprise.scep.ScepKeystoreProxyService.getCertificate(Ljava/lang/String;)Lcom/samsung/android/cepproxyks/CertificateAKS;
com.android.server.enterprise.scep.ScepKeystoreProxyService.grantAccessForAKS(ILjava/lang/String;)V
com.android.server.enterprise.scep.ScepKeystoreProxyService.installCACert(Lcom/samsung/android/cepproxyks/CertificateAKS;)I
com.android.server.enterprise.scep.ScepKeystoreProxyService.installCACertForWifiCCM(Lcom/samsung/android/cepproxyks/CertificateAKS;Ljava/lang/String;)I
com.android.server.enterprise.scep.ScepKeystoreProxyService.installCertificateInAndroidKeyStore(Lcom/samsung/android/cepproxyks/CertByte;Ljava/lang/String;[CZI)I
com.android.server.enterprise.scep.ScepKeystoreProxyService.isAliasExists(Ljava/lang/String;Z)I
com.android.internal.telephony.SmsController.disableCdmaBroadcast(I)Z
com.android.internal.telephony.SmsController.disableCdmaBroadcastRange(II)Z
com.android.internal.telephony.SmsController.enableCdmaBroadcast(I)Z
com.android.internal.telephony.SmsController.enableCdmaBroadcastRange(II)Z
com.android.internal.telephony.SmsController.getCbSettings()[B
com.android.internal.telephony.SmsController.getCbSettingsForSubscriber(I)[B
com.android.internal.telephony.SmsController.getSMSAvailable()Z
com.android.internal.telephony.SmsController.getSMSAvailableForSubscriber(I)Z
com.android.internal.telephony.SmsController.getSMSPAvailable()Z
com.android.internal.telephony.SmsController.getSimFullStatus()Z
com.android.internal.telephony.SmsController.getSimFullStatusForSubscriber(I)Z
com.android.internal.telephony.SmsController.getSmsc()Ljava/lang/String;
com.android.internal.telephony.SmsController.getSmscForSubscriber(I)Ljava/lang/String;
com.android.internal.telephony.SmsController.resetSimFullStatus()V
com.android.internal.telephony.SmsController.resetSimFullStatusForSubscriber(I)V
com.android.internal.telephony.SmsController.sendDatawithOrigPort(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;II[BLandroid/app/PendingIntent;Landroid/app/PendingIntent;)V
com.android.internal.telephony.SmsController.sendDatawithOrigPortForSubscriber(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;II[BLandroid/app/PendingIntent;Landroid/app/PendingIntent;)V
com.android.internal.telephony.SmsController.sendMultipartTextwithCBP(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/lang/String;I)V
com.android.internal.telephony.SmsController.sendMultipartTextwithCBPForSubscriber(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/lang/String;I)V
com.android.internal.telephony.SmsController.sendMultipartTextwithOptions(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/util/List;Ljava/util/List;ZIII)V
com.android.internal.telephony.SmsController.sendMultipartTextwithOptionsForSubscriber(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/util/List;Ljava/util/List;ZIII)V
com.android.internal.telephony.SmsController.sendOTADomestic(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.internal.telephony.SmsController.sendOTADomesticForSubscriber(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.internal.telephony.SmsController.sendTextAutoLoginForSubscriber(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/app/PendingIntent;Landroid/app/PendingIntent;Z)V
com.android.internal.telephony.SmsController.sendTextKdi(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/app/PendingIntent;Landroid/app/PendingIntent;Z)V
com.android.internal.telephony.SmsController.sendTextNSRI(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[BLandroid/app/PendingIntent;Landroid/app/PendingIntent;II)V
com.android.internal.telephony.SmsController.sendTextNSRIForSubscriber(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[BLandroid/app/PendingIntent;Landroid/app/PendingIntent;II)V
com.android.internal.telephony.SmsController.sendTextWithPriority(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/app/PendingIntent;Landroid/app/PendingIntent;I)V
com.android.internal.telephony.SmsController.sendTextwithCBP(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/app/PendingIntent;Landroid/app/PendingIntent;Ljava/lang/String;I)V
com.android.internal.telephony.SmsController.sendTextwithCBPForSubscriber(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/app/PendingIntent;Landroid/app/PendingIntent;Ljava/lang/String;I)V
com.android.internal.telephony.SmsController.sendTextwithOptions(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/app/PendingIntent;Landroid/app/PendingIntent;ZIII)V
com.android.internal.telephony.SmsController.sendTextwithOptionsForSubscriber(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/app/PendingIntent;Landroid/app/PendingIntent;ZIII)V
com.android.internal.telephony.SmsController.sendTextwithOptionsReadconfirm(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/app/PendingIntent;Landroid/app/PendingIntent;ZIIII)V
com.android.internal.telephony.SmsController.sendTextwithOptionsReadconfirmForSubscriber(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/app/PendingIntent;Landroid/app/PendingIntent;ZIIII)V
com.android.internal.telephony.SmsController.sendscptResult(Ljava/lang/String;IIIILandroid/app/PendingIntent;Landroid/app/PendingIntent;)V
com.android.internal.telephony.SmsController.setCDMASmsReassembly(Z)V
com.android.internal.telephony.SmsController.updateSmsServiceCenterOnSimEf([B)Z
com.android.internal.telephony.SmsController.updateSmsServiceCenterOnSimEfForSubscriber(I[B)Z
com.android.internal.telephony.SmsController.useLte3GPPSms()Z
com.android.internal.telephony.ISmsImplBase.disableCdmaBroadcast(I)Z
com.android.internal.telephony.ISmsImplBase.disableCdmaBroadcastRange(II)Z
com.android.internal.telephony.ISmsImplBase.enableCdmaBroadcast(I)Z
com.android.internal.telephony.ISmsImplBase.enableCdmaBroadcastRange(II)Z
com.android.internal.telephony.ISmsImplBase.getCbSettings()[B
com.android.internal.telephony.ISmsImplBase.getCbSettingsForSubscriber(I)[B
com.android.internal.telephony.ISmsImplBase.getSMSAvailable()Z
com.android.internal.telephony.ISmsImplBase.getSMSAvailableForSubscriber(I)Z
com.android.internal.telephony.ISmsImplBase.getSMSPAvailable()Z
com.android.internal.telephony.ISmsImplBase.getSimFullStatus()Z
com.android.internal.telephony.ISmsImplBase.getSimFullStatusForSubscriber(I)Z
com.android.internal.telephony.ISmsImplBase.getSmsc()Ljava/lang/String;
com.android.internal.telephony.ISmsImplBase.getSmscForSubscriber(I)Ljava/lang/String;
com.android.internal.telephony.ISmsImplBase.resetSimFullStatus()V
com.android.internal.telephony.ISmsImplBase.resetSimFullStatusForSubscriber(I)V
com.android.internal.telephony.ISmsImplBase.sendDatawithOrigPort(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;II[BLandroid/app/PendingIntent;Landroid/app/PendingIntent;)V
com.android.internal.telephony.ISmsImplBase.sendDatawithOrigPortForSubscriber(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;II[BLandroid/app/PendingIntent;Landroid/app/PendingIntent;)V
com.android.internal.telephony.ISmsImplBase.sendMultipartTextwithCBP(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/lang/String;I)V
com.android.internal.telephony.ISmsImplBase.sendMultipartTextwithCBPForSubscriber(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/lang/String;I)V
com.android.internal.telephony.ISmsImplBase.sendMultipartTextwithOptions(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/util/List;Ljava/util/List;ZIII)V
com.android.internal.telephony.ISmsImplBase.sendMultipartTextwithOptionsForSubscriber(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/util/List;Ljava/util/List;ZIII)V
com.android.internal.telephony.ISmsImplBase.sendOTADomestic(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.internal.telephony.ISmsImplBase.sendOTADomesticForSubscriber(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.internal.telephony.ISmsImplBase.sendTextAutoLoginForSubscriber(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/app/PendingIntent;Landroid/app/PendingIntent;Z)V
com.android.internal.telephony.ISmsImplBase.sendTextKdi(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/app/PendingIntent;Landroid/app/PendingIntent;Z)V
com.android.internal.telephony.ISmsImplBase.sendTextNSRI(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[BLandroid/app/PendingIntent;Landroid/app/PendingIntent;II)V
com.android.internal.telephony.ISmsImplBase.sendTextNSRIForSubscriber(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[BLandroid/app/PendingIntent;Landroid/app/PendingIntent;II)V
com.android.internal.telephony.ISmsImplBase.sendTextWithPriority(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/app/PendingIntent;Landroid/app/PendingIntent;I)V
com.android.internal.telephony.ISmsImplBase.sendTextwithCBP(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/app/PendingIntent;Landroid/app/PendingIntent;Ljava/lang/String;I)V
com.android.internal.telephony.ISmsImplBase.sendTextwithCBPForSubscriber(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/app/PendingIntent;Landroid/app/PendingIntent;Ljava/lang/String;I)V
com.android.internal.telephony.ISmsImplBase.sendTextwithOptions(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/app/PendingIntent;Landroid/app/PendingIntent;ZIII)V
com.android.internal.telephony.ISmsImplBase.sendTextwithOptionsForSubscriber(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/app/PendingIntent;Landroid/app/PendingIntent;ZIII)V
com.android.internal.telephony.ISmsImplBase.sendTextwithOptionsReadconfirm(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/app/PendingIntent;Landroid/app/PendingIntent;ZIIII)V
com.android.internal.telephony.ISmsImplBase.sendTextwithOptionsReadconfirmForSubscriber(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/app/PendingIntent;Landroid/app/PendingIntent;ZIIII)V
com.android.internal.telephony.ISmsImplBase.sendscptResult(Ljava/lang/String;IIIILandroid/app/PendingIntent;Landroid/app/PendingIntent;)V
com.android.internal.telephony.ISmsImplBase.setCDMASmsReassembly(Z)V
com.android.internal.telephony.ISmsImplBase.updateSmsServiceCenterOnSimEf([B)Z
com.android.internal.telephony.ISmsImplBase.updateSmsServiceCenterOnSimEfForSubscriber(I[B)Z
com.android.internal.telephony.ISmsImplBase.useLte3GPPSms()Z
com.android.server.wifi.WifiServiceImpl.callSECApi(Landroid/os/Message;)I
com.android.server.wifi.WifiServiceImpl.callSECListStringApi(Landroid/os/Message;)Ljava/util/List;
com.android.server.wifi.WifiServiceImpl.callSECStringApi(Landroid/os/Message;)Ljava/lang/String;
com.android.server.wifi.WifiServiceImpl.connectToSmartD2DClient(Ljava/lang/String;Ljava/lang/String;Lcom/samsung/android/net/wifi/ISemWifiApSmartCallback;)Z
com.android.server.wifi.WifiServiceImpl.connectToSmartMHS(Ljava/lang/String;IIILjava/lang/String;Ljava/lang/String;I)Z
com.android.server.wifi.WifiServiceImpl.getCountryRev()Ljava/lang/String;
com.android.server.wifi.WifiServiceImpl.getLatitudeLongitude(Landroid/net/wifi/WifiConfiguration;)[D
com.android.server.wifi.WifiServiceImpl.getNetworkInfo()Landroid/net/NetworkInfo;
com.android.server.wifi.WifiServiceImpl.getProvisionSuccess()I
com.android.server.wifi.WifiServiceImpl.getRoamBand()I
com.android.server.wifi.WifiServiceImpl.getRoamDelta()I
com.android.server.wifi.WifiServiceImpl.getRoamScanPeriod()I
com.android.server.wifi.WifiServiceImpl.getRoamTrigger()I
com.android.server.wifi.WifiServiceImpl.getRvfMode()I
com.android.server.wifi.WifiServiceImpl.getSmartApConnectedStatus(Ljava/lang/String;)I
com.android.server.wifi.WifiServiceImpl.getSmartApConnectedStatusFromScanResult(Ljava/lang/String;)I
com.android.server.wifi.WifiServiceImpl.getSmartD2DClientConnectedStatus(Ljava/lang/String;)I
com.android.server.wifi.WifiServiceImpl.getSpecificNetwork(I)Landroid/net/wifi/WifiConfiguration;
com.android.server.wifi.WifiServiceImpl.getWifiApInterfaceName()Ljava/lang/String;
com.android.server.wifi.WifiServiceImpl.getWifiApMaxClient()I
com.android.server.wifi.WifiServiceImpl.getWifiApStaList()Ljava/lang/String;
com.android.server.wifi.WifiServiceImpl.getWifiApStaListDetail()Ljava/util/List;
com.android.server.wifi.WifiServiceImpl.isWifiSharingEnabled()Z
com.android.server.wifi.WifiServiceImpl.isWigigStaEnabled()Z
com.android.server.wifi.WifiServiceImpl.registerSemWifiApSmartCallback(Landroid/os/IBinder;Lcom/samsung/android/net/wifi/ISemWifiApSmartCallback;I)V
com.android.server.wifi.WifiServiceImpl.runIptablesRulesCommand(Ljava/lang/String;)Ljava/lang/String;
com.android.server.wifi.WifiServiceImpl.semAddOrUpdateNetwork(ILandroid/net/wifi/WifiConfiguration;Ljava/lang/String;)I
com.android.server.wifi.WifiServiceImpl.semCheckMonitorMode()Ljava/lang/String;
com.android.server.wifi.WifiServiceImpl.semGetConfiguredNetworks(ILjava/lang/String;)Landroid/content/pm/ParceledListSlice;
com.android.server.wifi.WifiServiceImpl.semGetStationInfo(Ljava/lang/String;)Ljava/lang/String;
com.android.server.wifi.WifiServiceImpl.semGetWifiApBleD2DScanDetail()Ljava/util/List;
com.android.server.wifi.WifiServiceImpl.semGetWifiApBleScanDetail()Ljava/util/List;
com.android.server.wifi.WifiServiceImpl.semGetWifiApChannel()I
com.android.server.wifi.WifiServiceImpl.semIsCarrierNetworkSaved()Z
com.android.server.wifi.WifiServiceImpl.semLoadMonitorModeFirmware(Z)Ljava/lang/String;
com.android.server.wifi.WifiServiceImpl.semRemoveNetwork(IILjava/lang/String;)Z
com.android.server.wifi.WifiServiceImpl.semStartAirlogs(ZZ)Ljava/lang/String;
com.android.server.wifi.WifiServiceImpl.semStartMonitorMode(II)Ljava/lang/String;
com.android.server.wifi.WifiServiceImpl.semStartPartialChannelScan([ILjava/lang/String;)V
com.android.server.wifi.WifiServiceImpl.semStopMonitorMode()Ljava/lang/String;
com.android.server.wifi.WifiServiceImpl.semWifiApBleClientRole(Z)Z
com.android.server.wifi.WifiServiceImpl.semWifiApBleD2DClientRole(Z)Z
com.android.server.wifi.WifiServiceImpl.semWifiApBleD2DMhsRole(Z)Z
com.android.server.wifi.WifiServiceImpl.semWifiApBleMhsRole(Z)Z
com.android.server.wifi.WifiServiceImpl.sendQCResultToWCM(Landroid/os/Message;)V
com.android.server.wifi.WifiServiceImpl.setAutoConnectCarrierApEnabled(Z)V
com.android.server.wifi.WifiServiceImpl.setCountryRev(Ljava/lang/String;)Z
com.android.server.wifi.WifiServiceImpl.setImsCallEstablished(Z)V
com.android.server.wifi.WifiServiceImpl.setProvisionSuccess(Z)Z
com.android.server.wifi.WifiServiceImpl.setRoamBand(I)Z
com.android.server.wifi.WifiServiceImpl.setRoamDelta(I)Z
com.android.server.wifi.WifiServiceImpl.setRoamScanPeriod(I)Z
com.android.server.wifi.WifiServiceImpl.setRoamTrigger(I)Z
com.android.server.wifi.WifiServiceImpl.setRvfMode(I)Z
com.android.server.wifi.WifiServiceImpl.setWifiApConfigurationToDefault()V
com.android.server.wifi.WifiServiceImpl.setWifiSharingEnabled(Z)Z
com.android.server.wifi.WifiServiceImpl.setWigigStaEnabled(Ljava/lang/String;Z)Z
com.android.server.wifi.WifiServiceImpl.supportWifiAp5G()Z
com.android.server.wifi.WifiServiceImpl.supportWifiAp5GBasedOnCountry()Z
com.android.server.wifi.WifiServiceImpl.supportWifiSharing()Z
com.android.server.wifi.WifiServiceImpl.supportWifiSharingLite()Z
com.android.server.wifi.WifiServiceImpl.unregisterSemWifiApSmartCallback(I)V
com.android.server.wifi.BaseWifiService.callSECApi(Landroid/os/Message;)I
com.android.server.wifi.BaseWifiService.callSECListStringApi(Landroid/os/Message;)Ljava/util/List;
com.android.server.wifi.BaseWifiService.callSECStringApi(Landroid/os/Message;)Ljava/lang/String;
com.android.server.wifi.BaseWifiService.connectToSmartD2DClient(Ljava/lang/String;Ljava/lang/String;Lcom/samsung/android/net/wifi/ISemWifiApSmartCallback;)Z
com.android.server.wifi.BaseWifiService.connectToSmartMHS(Ljava/lang/String;IIILjava/lang/String;Ljava/lang/String;I)Z
com.android.server.wifi.BaseWifiService.getCountryRev()Ljava/lang/String;
com.android.server.wifi.BaseWifiService.getLatitudeLongitude(Landroid/net/wifi/WifiConfiguration;)[D
com.android.server.wifi.BaseWifiService.getNetworkInfo()Landroid/net/NetworkInfo;
com.android.server.wifi.BaseWifiService.getProvisionSuccess()I
com.android.server.wifi.BaseWifiService.getRoamBand()I
com.android.server.wifi.BaseWifiService.getRoamDelta()I
com.android.server.wifi.BaseWifiService.getRoamScanPeriod()I
com.android.server.wifi.BaseWifiService.getRoamTrigger()I
com.android.server.wifi.BaseWifiService.getRvfMode()I
com.android.server.wifi.BaseWifiService.getSmartApConnectedStatus(Ljava/lang/String;)I
com.android.server.wifi.BaseWifiService.getSmartApConnectedStatusFromScanResult(Ljava/lang/String;)I
com.android.server.wifi.BaseWifiService.getSmartD2DClientConnectedStatus(Ljava/lang/String;)I
com.android.server.wifi.BaseWifiService.getSpecificNetwork(I)Landroid/net/wifi/WifiConfiguration;
com.android.server.wifi.BaseWifiService.getWifiApInterfaceName()Ljava/lang/String;
com.android.server.wifi.BaseWifiService.getWifiApMaxClient()I
com.android.server.wifi.BaseWifiService.getWifiApStaList()Ljava/lang/String;
com.android.server.wifi.BaseWifiService.getWifiApStaListDetail()Ljava/util/List;
com.android.server.wifi.BaseWifiService.isWifiSharingEnabled()Z
com.android.server.wifi.BaseWifiService.isWigigStaEnabled()Z
com.android.server.wifi.BaseWifiService.registerSemWifiApSmartCallback(Landroid/os/IBinder;Lcom/samsung/android/net/wifi/ISemWifiApSmartCallback;I)V
com.android.server.wifi.BaseWifiService.runIptablesRulesCommand(Ljava/lang/String;)Ljava/lang/String;
com.android.server.wifi.BaseWifiService.semAddOrUpdateNetwork(ILandroid/net/wifi/WifiConfiguration;Ljava/lang/String;)I
com.android.server.wifi.BaseWifiService.semCheckMonitorMode()Ljava/lang/String;
com.android.server.wifi.BaseWifiService.semGetConfiguredNetworks(ILjava/lang/String;)Landroid/content/pm/ParceledListSlice;
com.android.server.wifi.BaseWifiService.semGetMHSConfig(Ljava/lang/String;)Ljava/lang/String;
com.android.server.wifi.BaseWifiService.semGetStationInfo(Ljava/lang/String;)Ljava/lang/String;
com.android.server.wifi.BaseWifiService.semGetWifiApBleD2DScanDetail()Ljava/util/List;
com.android.server.wifi.BaseWifiService.semGetWifiApBleScanDetail()Ljava/util/List;
com.android.server.wifi.BaseWifiService.semGetWifiApChannel()I
com.android.server.wifi.BaseWifiService.semIsBackupRestoreSupported()Z
com.android.server.wifi.BaseWifiService.semIsCarrierNetworkSaved()Z
com.android.server.wifi.BaseWifiService.semLoadMonitorModeFirmware(Z)Ljava/lang/String;
com.android.server.wifi.BaseWifiService.semRemoveNetwork(IILjava/lang/String;)Z
com.android.server.wifi.BaseWifiService.semSetMHSConfig(Ljava/lang/String;)Ljava/lang/String;
com.android.server.wifi.BaseWifiService.semStartAirlogs(ZZ)Ljava/lang/String;
com.android.server.wifi.BaseWifiService.semStartMonitorMode(II)Ljava/lang/String;
com.android.server.wifi.BaseWifiService.semStartPartialChannelScan([ILjava/lang/String;)V
com.android.server.wifi.BaseWifiService.semStopMonitorMode()Ljava/lang/String;
com.android.server.wifi.BaseWifiService.semWifiApBleClientRole(Z)Z
com.android.server.wifi.BaseWifiService.semWifiApBleD2DClientRole(Z)Z
com.android.server.wifi.BaseWifiService.semWifiApBleD2DMhsRole(Z)Z
com.android.server.wifi.BaseWifiService.semWifiApBleMhsRole(Z)Z
com.android.server.wifi.BaseWifiService.sendQCResultToWCM(Landroid/os/Message;)V
com.android.server.wifi.BaseWifiService.setAutoConnectCarrierApEnabled(Z)V
com.android.server.wifi.BaseWifiService.setCountryRev(Ljava/lang/String;)Z
com.android.server.wifi.BaseWifiService.setImsCallEstablished(Z)V
com.android.server.wifi.BaseWifiService.setProvisionSuccess(Z)Z
com.android.server.wifi.BaseWifiService.setRoamBand(I)Z
com.android.server.wifi.BaseWifiService.setRoamDelta(I)Z
com.android.server.wifi.BaseWifiService.setRoamScanPeriod(I)Z
com.android.server.wifi.BaseWifiService.setRoamTrigger(I)Z
com.android.server.wifi.BaseWifiService.setRvfMode(I)Z
com.android.server.wifi.BaseWifiService.setWifiApConfigurationToDefault()V
com.android.server.wifi.BaseWifiService.setWifiSharingEnabled(Z)Z
com.android.server.wifi.BaseWifiService.setWigigStaEnabled(Ljava/lang/String;Z)Z
com.android.server.wifi.BaseWifiService.supportWifiAp5G()Z
com.android.server.wifi.BaseWifiService.supportWifiAp5GBasedOnCountry()Z
com.android.server.wifi.BaseWifiService.supportWifiSharing()Z
com.android.server.wifi.BaseWifiService.supportWifiSharingLite()Z
com.android.server.wifi.BaseWifiService.unregisterSemWifiApSmartCallback(I)V
com.android.server.ReactiveService.getErrorCode()I
com.android.server.ReactiveService.getFlag(I)I
com.android.server.ReactiveService.getRandom()[B
com.android.server.ReactiveService.getServiceSupport()I
com.android.server.ReactiveService.getString()Ljava/lang/String;
com.android.server.ReactiveService.removeString()I
com.android.server.ReactiveService.sessionAccept([B)[B
com.android.server.ReactiveService.sessionComplete([B)I
com.android.server.ReactiveService.setFlag(IILjava/lang/String;)I
com.android.server.ReactiveService.setString(Ljava/lang/String;)I
com.android.server.ReactiveService.verify(Ljava/lang/String;I)I
com.android.server.net.NetworkPolicyManagerService.checkFireWallPermission(ZLjava/lang/String;I)V
com.android.server.net.NetworkPolicyManagerService.getFirewallRuleMobileData(I)Z
com.android.server.net.NetworkPolicyManagerService.getFirewallRuleWifi(I)Z
com.android.server.net.NetworkPolicyManagerService.getMeteredIfaces()[Ljava/lang/String;
com.android.server.net.NetworkPolicyManagerService.getRoamingReduction(I)I
com.android.server.net.NetworkPolicyManagerService.setFirewallRuleMobileData(IZ)V
com.android.server.net.NetworkPolicyManagerService.setFirewallRuleMobileDataMap(Ljava/util/Map;)V
com.android.server.net.NetworkPolicyManagerService.setFirewallRuleWifi(IZ)V
com.android.server.net.NetworkPolicyManagerService.setFirewallRuleWifiMap(Ljava/util/Map;)V
com.android.server.net.NetworkPolicyManagerService.setRoamingReduction(II)V
com.android.server.wm.MultiWindowManagerService.closeMultiSplit(I)V
com.android.server.wm.MultiWindowManagerService.createAppPairShortcut()I
com.android.server.wm.MultiWindowManagerService.exitMultiWindow(Landroid/os/IBinder;)Z
com.android.server.wm.MultiWindowManagerService.getCornerGestureCustomValue()I
com.android.server.wm.MultiWindowManagerService.getFreeformAlpha(Landroid/os/IBinder;)F
com.android.server.wm.MultiWindowManagerService.getFreeformTasks(I)Ljava/util/List;
com.android.server.wm.MultiWindowManagerService.getMultiWindowModeStates(I)I
com.android.server.wm.MultiWindowManagerService.getPreQMultiResumeInProcessPrefVal()Z
com.android.server.wm.MultiWindowManagerService.getTaskIdFromPackageName(Ljava/lang/String;)I
com.android.server.wm.MultiWindowManagerService.getVisibleTasks()Landroid/content/pm/ParceledListSlice;
com.android.server.wm.MultiWindowManagerService.hideMultiSplit(Z)V
com.android.server.wm.MultiWindowManagerService.isCornerGestureEnabled()Z
com.android.server.wm.MultiWindowManagerService.isFreeformCustomMinimizeEnable()Z
com.android.server.wm.MultiWindowManagerService.isPersistFreeformBoundsEnabled()Z
com.android.server.wm.MultiWindowManagerService.isPreQMultiResumeInProcessEnabled()Z
com.android.server.wm.MultiWindowManagerService.maximizeMultiSplit(Z)V
com.android.server.wm.MultiWindowManagerService.minimizeAllFreeformTasks(IZI)Z
com.android.server.wm.MultiWindowManagerService.minimizeFreeformTask(I)V
com.android.server.wm.MultiWindowManagerService.moveActivityTaskToBack(Landroid/os/IBinder;ZZ)Z
com.android.server.wm.MultiWindowManagerService.notifyFreeformMinimizeStateChanged(Landroid/graphics/Rect;ILandroid/content/ComponentName;III)V
com.android.server.wm.MultiWindowManagerService.notifyFreefromWindowAnimationEnd(IIILandroid/graphics/Rect;)V
com.android.server.wm.MultiWindowManagerService.registerDividerCloseEventListener(Lcom/samsung/android/multiwindow/IDividerCloseEventListener;)V
com.android.server.wm.MultiWindowManagerService.registerMultiWindowEventListener(Lcom/samsung/android/multiwindow/IMultiWindowEventListener;)V
com.android.server.wm.MultiWindowManagerService.registerMultiWindowListener(Landroid/os/IBinder;)V
com.android.server.wm.MultiWindowManagerService.registerMultiWindowServiceCallback(Lcom/samsung/android/multiwindow/IMultiWindowCallback;)V
com.android.server.wm.MultiWindowManagerService.removeFocusedTask()Z
com.android.server.wm.MultiWindowManagerService.removeFreeformTasks(I)Z
com.android.server.wm.MultiWindowManagerService.removeSearchedTask(Ljava/lang/String;)Z
com.android.server.wm.MultiWindowManagerService.reportDexHelpShown(Landroid/os/IBinder;I)V
com.android.server.wm.MultiWindowManagerService.reportMinimizeContainerBounds(Landroid/graphics/Rect;)V
com.android.server.wm.MultiWindowManagerService.resizeMultiSplitWithOtherSide(Landroid/graphics/Rect;Landroid/graphics/Rect;)V
com.android.server.wm.MultiWindowManagerService.sendDMALoggingInServer(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;J)V
com.android.server.wm.MultiWindowManagerService.setCornerGestureCustomValue(I)V
com.android.server.wm.MultiWindowManagerService.setCornerGestureEnabled(Z)V
com.android.server.wm.MultiWindowManagerService.setCustomDensityEnabled(Z)V
com.android.server.wm.MultiWindowManagerService.setFreeformAlpha(Landroid/os/IBinder;F)V
com.android.server.wm.MultiWindowManagerService.setFreeformCustomMinimizeEnable(Z)V
com.android.server.wm.MultiWindowManagerService.setMaxVisibleFreeformCount(I)V
com.android.server.wm.MultiWindowManagerService.setMaxVisibleFreeformCountForDex(II)V
com.android.server.wm.MultiWindowManagerService.setMultiWindowEnabledForUser(Ljava/lang/String;Ljava/lang/String;ZI)V
com.android.server.wm.MultiWindowManagerService.setPersistFreeformBoundsEnabled(Z)V
com.android.server.wm.MultiWindowManagerService.setPreQMultiResumeInProcessEnabled(Z)V
com.android.server.wm.MultiWindowManagerService.showSnapWindowGuideView(I)V
com.android.server.wm.MultiWindowManagerService.startFreeformAtBixby(ILandroid/graphics/Rect;)Z
com.android.server.wm.MultiWindowManagerService.startResizingFreeformTask(Landroid/os/IBinder;IIZ)V
com.android.server.wm.MultiWindowManagerService.swapTasksInSplitScreenMode()V
com.android.server.wm.MultiWindowManagerService.toggleFreeformWindowingMode()Z
com.android.server.wm.MultiWindowManagerService.toggleMultiSplitScreenType()Z
com.android.server.wm.MultiWindowManagerService.unregisterDividerCloseEventListener(Lcom/samsung/android/multiwindow/IDividerCloseEventListener;)V
com.android.server.wm.MultiWindowManagerService.unregisterMultiWindowEventListener(Lcom/samsung/android/multiwindow/IMultiWindowEventListener;)V
com.android.server.wm.MultiWindowManagerService.unregisterMultiWindowListener(Landroid/os/IBinder;)V
com.android.server.wm.MultiWindowManagerService.unregisterMultiWindowServiceCallback(Lcom/samsung/android/multiwindow/IMultiWindowCallback;)V
android.ktuca.KtUcaService.KUCA_CHInit(B[B[I)J
android.ktuca.KtUcaService.KUCA_Close([BB)J
android.ktuca.KtUcaService.KUCA_CloseT([BB)J
android.ktuca.KtUcaService.KUCA_KUH_Establish(B)J
android.ktuca.KtUcaService.KUCA_KUH_Release(B)J
android.ktuca.KtUcaService.KUCA_KUH_Transmit(B[BI[B[I)J
android.ktuca.KtUcaService.KUCA_Open([B[B[I)J
android.ktuca.KtUcaService.KUCA_OpenT([B[B[I)J
android.ktuca.KtUcaService.KUCA_Transmit([B[BI[B[I)J
android.ktuca.KtUcaService.KUCA_UCAVersion([B[B[I)J
android.ktuca.KtUcaService.KUCA_getHandle([B[B[B[B[I)J
android.ktuca.KtUcaService.KUCA_getICCID([B[B[II[B)J
android.ktuca.KtUcaService.KUCA_getIMSI([B[B[II[B)J
android.ktuca.KtUcaService.KUCA_getMDN([B[B[II[B)J
android.ktuca.KtUcaService.KUCA_getMODEL([B[B[II[B)J
android.ktuca.KtUcaService.KUCA_getMSISDN([B[B[II[B)J
android.ktuca.KtUcaService.KUCA_getPUID([B[B[II[B)J
android.ktuca.KtUcaService.KUCA_getPinStatus([BI[B[I)J
android.ktuca.KtUcaService.KUCA_getSIMInfo([B[B[I)J
android.ktuca.KtUcaService.KUCA_getSimStatus([B[B)J
android.ktuca.KtUcaService.KUCA_printCHInfo(B)J
android.ktuca.KtUcaService.KUCA_usimAUTH([B[B[B[B[I)J
android.ktuca.KtUcaService.KUCA_verifyPin([BILjava/lang/String;[B[I)J
android.ktuca.KtUcaService.getResource()I
android.ktuca.KtUcaService.releaseResource()I
com.android.server.audio.AudioService.addPackage(ILjava/lang/String;)V
com.android.server.audio.AudioService.dismissVolumePanel()V
com.android.server.audio.AudioService.getA2dpDeviceVolume(Landroid/bluetooth/BluetoothDevice;I)I
com.android.server.audio.AudioService.getAppDevice(I)I
com.android.server.audio.AudioService.getAppVolume(I)I
com.android.server.audio.AudioService.getAudioServiceConfig(Ljava/lang/String;)Ljava/lang/String;
com.android.server.audio.AudioService.getCurrentAudioFocusPackageName()Ljava/lang/String;
com.android.server.audio.AudioService.getFineVolume(II)I
com.android.server.audio.AudioService.getFloatVolumeTable()[F
com.android.server.audio.AudioService.getMediaVolumeSteps()[I
com.android.server.audio.AudioService.getMuteInterval()I
com.android.server.audio.AudioService.getPinAppInfo(I)Ljava/lang/String;
com.android.server.audio.AudioService.getPinDevice()I
com.android.server.audio.AudioService.getPrevRingerMode()I
com.android.server.audio.AudioService.getRadioOutputPath()I
com.android.server.audio.AudioService.getRemainingMuteIntervalMs()I
com.android.server.audio.AudioService.getSelectedAppList()[Ljava/lang/String;
com.android.server.audio.AudioService.getStreamVolumeForDevice(II)I
com.android.server.audio.AudioService.getUidForDevice(I)I
com.android.server.audio.AudioService.isAlreadyInDB(Ljava/lang/String;)Z
com.android.server.audio.AudioService.isFMPlayerActive()Z
com.android.server.audio.AudioService.isForceSpeakerOn()Z
com.android.server.audio.AudioService.isInAllowedList(Ljava/lang/String;)Z
com.android.server.audio.AudioService.isMultiSoundOn()Z
com.android.server.audio.AudioService.isSafeMediaVolumeStateActive()Z
com.android.server.audio.AudioService.isUsingAudio(I)Z
com.android.server.audio.AudioService.removePackageForName(Ljava/lang/String;)V
com.android.server.audio.AudioService.secGetActiveStreamType(I)I
com.android.server.audio.AudioService.setA2dpDeviceVolume(Landroid/bluetooth/BluetoothDevice;IIILjava/lang/String;)V
com.android.server.audio.AudioService.setAppDevice(II)V
com.android.server.audio.AudioService.setAppVolume(IILjava/lang/String;)V
com.android.server.audio.AudioService.setAudioServiceConfig(Ljava/lang/String;)V
com.android.server.audio.AudioService.setDeviceToForceByUser(ILjava/lang/String;)I
com.android.server.audio.AudioService.setFineVolume(IIIILjava/lang/String;)V
com.android.server.audio.AudioService.setForceSpeakerOn(Z)V
com.android.server.audio.AudioService.setMediaVolumeSteps([I)Z
com.android.server.audio.AudioService.setMultiSoundOn(Z)V
com.android.server.audio.AudioService.setMuteInterval(ILjava/lang/String;)V
com.android.server.audio.AudioService.setRadioOutputPath(I)V
com.android.server.audio.AudioService.setRemoteMic(Z)V
com.android.server.audio.AudioService.setSoundSettingEventBroadcastIntent(ILandroid/app/PendingIntent;)V
com.android.server.audio.AudioService.setStreamVolumeForDevice(IIILjava/lang/String;I)V
com.android.server.TimaService.DCMSelfCheck()V
com.android.server.TimaService.FipsKeyStore3_del(Ljava/lang/String;I)Z
com.android.server.TimaService.FipsKeyStore3_exist(Ljava/lang/String;I)Z
com.android.server.TimaService.FipsKeyStore3_get(Ljava/lang/String;[C)[B
com.android.server.TimaService.FipsKeyStore3_getmtime(Ljava/lang/String;)J
com.android.server.TimaService.FipsKeyStore3_init(Z)I
com.android.server.TimaService.FipsKeyStore3_put(Ljava/lang/String;[BI[C)I
com.android.server.TimaService.FipsKeyStore3_saw(Ljava/lang/String;I)[Ljava/lang/String;
com.android.server.TimaService.KeyStore3_del(Ljava/lang/String;I)Z
com.android.server.TimaService.KeyStore3_exist(Ljava/lang/String;I)Z
com.android.server.TimaService.KeyStore3_get(Ljava/lang/String;[C)[B
com.android.server.TimaService.KeyStore3_getmtime(Ljava/lang/String;)J
com.android.server.TimaService.KeyStore3_init()I
com.android.server.TimaService.KeyStore3_put(Ljava/lang/String;[BI[C)I
com.android.server.TimaService.KeyStore3_saw(Ljava/lang/String;I)[Ljava/lang/String;
com.android.server.TimaService.attestation([BI)[B
com.android.server.TimaService.ccmRegisterForDefaultCertificate(ILjava/lang/String;Ljava/lang/String;Z)I
com.android.server.TimaService.checkEvent(II)Ljava/lang/String;
com.android.server.TimaService.checkHistory(II)Ljava/lang/String;
com.android.server.TimaService.displayEvent(Ljava/lang/String;)V
com.android.server.TimaService.dumpLog()[B
com.android.server.TimaService.encryptPassword(Ljava/lang/String;)[C
com.android.server.TimaService.getDeviceID()[B
com.android.server.TimaService.getEventList(I)Ljava/util/List;
com.android.server.TimaService.getTimaVersion()Ljava/lang/String;
com.android.server.TimaService.getTuiVersion()Ljava/lang/String;
com.android.server.TimaService.isKapEnforced()Z
com.android.server.TimaService.keystoreInit()I
com.android.server.TimaService.keystoreInstallKey(I[B)I
com.android.server.TimaService.keystoreRetrieveKey(I)[B
com.android.server.TimaService.keystoreShutdown()I
com.android.server.TimaService.launchTui(Ljava/lang/String;[BZI)[B
com.android.server.TimaService.launchTuiWithSecretId(Ljava/lang/String;Ljava/lang/String;[BZI)[B
com.android.server.TimaService.loadTui()I
com.android.server.TimaService.setISLCallback(Landroid/service/tima/ITimaISLCallback;)V
com.android.server.TimaService.setKapMode(ZZ)V
com.android.server.TimaService.tuiDecryptPinHash(Ljava/lang/String;[B)[B
com.android.server.TimaService.tuiGetCerts()[B
com.android.server.TimaService.tuiGetSecretDimension()[I
com.android.server.TimaService.tuiInitSecret([BIILjava/lang/String;)I
com.android.server.TimaService.tuiInitSecretFile(Ljava/lang/String;IILjava/lang/String;)I
com.android.server.TimaService.tuiInitSecretMemoryFile(Landroid/os/ParcelFileDescriptor;IIILjava/lang/String;)I
com.android.server.TimaService.tuiRegAppImage(Ljava/lang/String;[B)[I
com.android.server.TimaService.tuiRegAppImageFile(Ljava/lang/String;Ljava/lang/String;)[I
com.android.server.TimaService.unloadTui()I
com.android.server.TimaService.verifyCertChain([B)[B
com.android.server.VoIPInterfaceManager.answerVoIPCall()Z
com.android.server.VoIPInterfaceManager.callInVoIP(Ljava/lang/String;)V
com.android.server.VoIPInterfaceManager.canUseBTInVoIP(Ljava/lang/String;)Z
com.android.server.VoIPInterfaceManager.canUseHoldInVoIP()Z
com.android.server.VoIPInterfaceManager.createCallSession(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/os/IVoIPCallbackInterface;)Z
com.android.server.VoIPInterfaceManager.destroyCallSession(Ljava/lang/String;)Z
com.android.server.VoIPInterfaceManager.disableStatusBarforVoIP()V
com.android.server.VoIPInterfaceManager.dumpCallSessionInfoDB(Ljava/lang/String;)V
com.android.server.VoIPInterfaceManager.existValidCall()Z
com.android.server.VoIPInterfaceManager.getActiveCallIndex()I
com.android.server.VoIPInterfaceManager.getActiveFgCallState()I
com.android.server.VoIPInterfaceManager.getCallSessionInfo(I)Z
com.android.server.VoIPInterfaceManager.getCurrentRemoteCallNumber()Ljava/lang/String;
com.android.server.VoIPInterfaceManager.getCurrentVoIPNumber()Ljava/lang/String;
com.android.server.VoIPInterfaceManager.getDirectionForClcc()I
com.android.server.VoIPInterfaceManager.getFirstActiveBgCallState()I
com.android.server.VoIPInterfaceManager.getFirstActiveRingingCallState()I
com.android.server.VoIPInterfaceManager.getIndexForClcc()I
com.android.server.VoIPInterfaceManager.getMptyForClcc()Z
com.android.server.VoIPInterfaceManager.getNumberForClcc()Ljava/lang/String;
com.android.server.VoIPInterfaceManager.getSessionCount()I
com.android.server.VoIPInterfaceManager.getState()I
com.android.server.VoIPInterfaceManager.getStatusForClcc()I
com.android.server.VoIPInterfaceManager.getVoIPCallCount(Ljava/lang/String;)I
com.android.server.VoIPInterfaceManager.getVoIPInCallAlert()Z
com.android.server.VoIPInterfaceManager.hangupVoIPCall()Z
com.android.server.VoIPInterfaceManager.holdVoIPCall()Z
com.android.server.VoIPInterfaceManager.isDualBTConnection()Z
com.android.server.VoIPInterfaceManager.isIncoming()Z
com.android.server.VoIPInterfaceManager.isVoIPActivated()Z
com.android.server.VoIPInterfaceManager.isVoIPAlerting()Z
com.android.server.VoIPInterfaceManager.isVoIPDialing()Z
com.android.server.VoIPInterfaceManager.isVoIPDisconnecting()Z
com.android.server.VoIPInterfaceManager.isVoIPHolding()Z
com.android.server.VoIPInterfaceManager.isVoIPIdle()Z
com.android.server.VoIPInterfaceManager.isVoIPIncoming()Z
com.android.server.VoIPInterfaceManager.isVoIPRingOrDialing()Z
com.android.server.VoIPInterfaceManager.isVoIPRinging()Z
com.android.server.VoIPInterfaceManager.isVoIPWaiting()Z
com.android.server.VoIPInterfaceManager.moveVoIPToTop()Z
com.android.server.VoIPInterfaceManager.muteVoIPCall()Z
com.android.server.VoIPInterfaceManager.notifyCallStateforVoIP(ILjava/lang/String;)V
com.android.server.VoIPInterfaceManager.notifyMissedCallforVoIP(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;J)V
com.android.server.VoIPInterfaceManager.reenableStatusBarforVoIP()V
com.android.server.VoIPInterfaceManager.resetVoIPCheckBC()V
com.android.server.VoIPInterfaceManager.resumeVoIPCall()Z
com.android.server.VoIPInterfaceManager.setBTUserWantsAudioOn(Z)Z
com.android.server.VoIPInterfaceManager.setBTUserWantsSwitchAudio()Z
com.android.server.VoIPInterfaceManager.setEngMode(Ljava/lang/String;I)V
com.android.server.VoIPInterfaceManager.setUseBTInVoIP(Ljava/lang/String;Z)Z
com.android.server.VoIPInterfaceManager.setUseHoldInVoIP(Ljava/lang/String;Z)Z
com.android.server.VoIPInterfaceManager.setVoIPActive(Ljava/lang/String;Ljava/lang/String;)Z
com.android.server.VoIPInterfaceManager.setVoIPAlerting(Ljava/lang/String;Ljava/lang/String;)Z
com.android.server.VoIPInterfaceManager.setVoIPCallCount(Ljava/lang/String;I)Z
com.android.server.VoIPInterfaceManager.setVoIPDialing(Ljava/lang/String;Ljava/lang/String;)Z
com.android.server.VoIPInterfaceManager.setVoIPDisconnected(Ljava/lang/String;Ljava/lang/String;)Z
com.android.server.VoIPInterfaceManager.setVoIPDisconnecting(Ljava/lang/String;Ljava/lang/String;)Z
com.android.server.VoIPInterfaceManager.setVoIPHolding(Ljava/lang/String;Ljava/lang/String;)Z
com.android.server.VoIPInterfaceManager.setVoIPIdle(Ljava/lang/String;)Z
com.android.server.VoIPInterfaceManager.setVoIPInCallAlert(Z)V
com.android.server.VoIPInterfaceManager.setVoIPIncoming(Ljava/lang/String;Ljava/lang/String;)Z
com.android.server.VoIPInterfaceManager.setVoIPRinging(Ljava/lang/String;Ljava/lang/String;)Z
com.android.server.VoIPInterfaceManager.setVoIPWaiting(Ljava/lang/String;Ljava/lang/String;)Z
com.android.server.VoIPInterfaceManager.startVoIPCheckBC(JLjava/lang/String;)V
com.android.server.job.JobSchedulerService$JobSchedulerStub.getRunningJobList()Ljava/util/List;
com.android.server.input.InputManagerService.checkInputFeature()I
com.android.server.input.InputManagerService.enablePressureSettingMode(Z)Z
com.android.server.input.InputManagerService.getAccumulatedTouchCount()I
com.android.server.input.InputManagerService.getDefaultPointerIcon()Landroid/view/PointerIcon;
com.android.server.input.InputManagerService.getDisplayIdForPointerIcon()I
com.android.server.input.InputManagerService.getInboundQueueLength()I
com.android.server.input.InputManagerService.getKeyboardLayoutForInputDevice(Landroid/hardware/input/InputDeviceIdentifier;Landroid/view/inputmethod/InputMethodInfo;Landroid/view/inputmethod/InputMethodSubtype;)Landroid/hardware/input/KeyboardLayout;
com.android.server.input.InputManagerService.getLastLidEventTimeNanos()J
com.android.server.input.InputManagerService.getLidState()I
com.android.server.input.InputManagerService.getScanCodeState(III)I
com.android.server.input.InputManagerService.getToolTypeForDefaultPointerIcon()I
com.android.server.input.InputManagerService.isDefaultPointerIconChanged()Z
com.android.server.input.InputManagerService.isUidTouched(I)Z
com.android.server.input.InputManagerService.monitorInputForBinder(Ljava/lang/String;I)Landroid/view/InputChannel;
com.android.server.input.InputManagerService.registerLidStateChangedListener(Landroid/hardware/input/ISemLidStateChangedListener;)V
com.android.server.input.InputManagerService.registerMultiFingerGestureListener(Landroid/hardware/input/IMultiFingerGestureListener;)V
com.android.server.input.InputManagerService.registerPointerIconChangedListener(Landroid/hardware/input/IPointerIconChangedListener;)V
com.android.server.input.InputManagerService.semGetMotionIdleTimeMillis(Z)J
com.android.server.input.InputManagerService.setCoverVerify(I)V
com.android.server.input.InputManagerService.setCustomHoverIcon(Landroid/view/PointerIcon;)V
com.android.server.input.InputManagerService.setDefaultPointerIcon(ILandroid/view/PointerIcon;)V
com.android.server.input.InputManagerService.setDisplayIdForPointerIcon(I)V
com.android.server.input.InputManagerService.setEnableTSP(IZ)Z
com.android.server.input.InputManagerService.setKeyboardLayoutForInputDevice(Landroid/hardware/input/InputDeviceIdentifier;Landroid/view/inputmethod/InputMethodInfo;Landroid/view/inputmethod/InputMethodSubtype;Ljava/lang/String;)V
com.android.server.input.InputManagerService.setStartedShutdown(Z)V
com.android.server.input.InputManagerService.setWakeKeyDynamically(Ljava/lang/String;ZLjava/lang/String;)V
com.android.server.usb.UsbService.countKeyBoardConnectedviaUsbHost()I
com.android.server.usb.UsbService.countMouseConnectedviaUsbHost()I
com.android.server.usb.UsbService.isSupportDexRestrict()Z
com.android.server.usb.UsbService.isUsb30Available()Z
com.android.server.usb.UsbService.isUsb30Enabled()Z
com.android.server.usb.UsbService.isUsbBlocked()Z
com.android.server.usb.UsbService.restrictUsbHostInterface(ZLjava/lang/String;)I
com.android.server.usb.UsbService.semGetDataRoleStatus()I
com.android.server.usb.UsbService.semGetPowerRoleStatus()I
com.android.server.usb.UsbService.semGrantDevicePermission(Landroid/hardware/usb/UsbDevice;I)V
com.android.server.usb.UsbService.semSetDevicePackage(Landroid/hardware/usb/UsbDevice;Ljava/lang/String;I)V
com.android.server.usb.UsbService.semSetMode(I)V
com.android.server.usb.UsbService.setUsb30Mode(Z)V
com.samsung.android.jdsms.DsmsService.sendMessage(Ljava/lang/String;Ljava/lang/String;J)V
com.android.server.SamsungKeyProvisioningManagerService.create_keySession(BLjava/lang/String;[BB)I
com.android.server.SamsungKeyProvisioningManagerService.get_keyUid(BBLjava/lang/String;[B)I
com.android.server.SamsungKeyProvisioningManagerService.release_keySession()I
com.android.server.SamsungKeyProvisioningManagerService.set_otaServer(Ljava/lang/String;Ljava/lang/String;)I
com.android.server.SamsungKeyProvisioningManagerService.verify_key(BBLjava/lang/String;)I
com.android.server.SamsungKeyProvisioningManagerService.write_key(BBLjava/lang/String;[BB)I
com.android.server.cover.CoverManagerServiceImpl.addLedNotification(Landroid/os/Bundle;)V
com.android.server.cover.CoverManagerServiceImpl.disableCoverManager(ZLandroid/os/IBinder;Ljava/lang/String;)V
com.android.server.cover.CoverManagerServiceImpl.disableLcdOffByCover(Landroid/os/IBinder;Landroid/content/ComponentName;)Z
com.android.server.cover.CoverManagerServiceImpl.enableLcdOffByCover(Landroid/os/IBinder;Landroid/content/ComponentName;)Z
com.android.server.cover.CoverManagerServiceImpl.getCoverState()Lcom/samsung/android/cover/CoverState;
com.android.server.cover.CoverManagerServiceImpl.getCoverStateForExternal()Lcom/samsung/android/cover/CoverState;
com.android.server.cover.CoverManagerServiceImpl.getCoverSwitchState()Z
com.android.server.cover.CoverManagerServiceImpl.getVersion()I
com.android.server.cover.CoverManagerServiceImpl.isCoverManagerDisabled()Z
com.android.server.cover.CoverManagerServiceImpl.onCoverAppCovered(Z)I
com.android.server.cover.CoverManagerServiceImpl.registerCallback(Landroid/os/IBinder;Landroid/content/ComponentName;)V
com.android.server.cover.CoverManagerServiceImpl.registerListenerCallback(Landroid/os/IBinder;Landroid/content/ComponentName;I)V
com.android.server.cover.CoverManagerServiceImpl.registerListenerCallbackForExternal(Landroid/os/IBinder;Landroid/content/ComponentName;I)V
com.android.server.cover.CoverManagerServiceImpl.registerNfcTouchListenerCallback(ILandroid/os/IBinder;Landroid/content/ComponentName;)V
com.android.server.cover.CoverManagerServiceImpl.removeLedNotification(Landroid/os/Bundle;)V
com.android.server.cover.CoverManagerServiceImpl.requestCoverAuthentication(Landroid/os/IBinder;Landroid/content/ComponentName;)Z
com.android.server.cover.CoverManagerServiceImpl.sendDataToCover(I[B)V
com.android.server.cover.CoverManagerServiceImpl.sendDataToNfcLedCover(I[B)V
com.android.server.cover.CoverManagerServiceImpl.sendPowerKeyToCover()V
com.android.server.cover.CoverManagerServiceImpl.sendSystemEvent(Landroid/os/Bundle;)V
com.android.server.cover.CoverManagerServiceImpl.setFotaInProgress(ZLandroid/os/IBinder;Landroid/content/ComponentName;)Z
com.android.server.cover.CoverManagerServiceImpl.unregisterCallback(Landroid/os/IBinder;)Z
com.android.server.cover.CoverManagerServiceImpl.unregisterCallbackForExternal(Landroid/os/IBinder;)Z
com.android.server.cover.CoverManagerServiceImpl.unregisterNfcTouchListenerCallback(Landroid/os/IBinder;)Z
com.android.server.SatsService.executePseudoDrkAtCommnd(Ljava/lang/String;)Ljava/lang/String;
com.android.server.TelephonyRegistry.notifyFdnUpdated()V
com.android.server.TelephonyRegistry.notifyRrcStateChanged(III)V
com.android.server.TelephonyRegistry.notifyVoiceRadioBearerHoState(I)V
com.android.server.HermesService.hermesGetSecureHWInfo()[B
com.android.server.HermesService.hermesProvisioning()I
com.android.server.HermesService.hermesSelftest()[B
com.android.server.HermesService.hermesTerminateService()I
com.android.server.HermesService.hermesVerifyProvisioning()I
com.android.server.pm.PersonaPolicyManagerService.addLockOnImage(Landroid/graphics/Bitmap;)Landroid/graphics/Bitmap;
com.android.server.pm.PersonaPolicyManagerService.getAirCommandEnabled(I)Z
com.android.server.pm.PersonaPolicyManagerService.getAllowAllShare(I)Z
com.android.server.pm.PersonaPolicyManagerService.getAllowContainerReset(I)Z
com.android.server.pm.PersonaPolicyManagerService.getAllowCustomBadgeIcon(I)Z
com.android.server.pm.PersonaPolicyManagerService.getAllowCustomColorIdentification(I)Z
com.android.server.pm.PersonaPolicyManagerService.getAllowCustomPersonaIcon(I)Z
com.android.server.pm.PersonaPolicyManagerService.getAllowDLNADataTransfer(I)Z
com.android.server.pm.PersonaPolicyManagerService.getAllowExportAndDeleteFiles(I)Z
com.android.server.pm.PersonaPolicyManagerService.getAllowExportFiles(I)Z
com.android.server.pm.PersonaPolicyManagerService.getAllowImportFiles(I)Z
com.android.server.pm.PersonaPolicyManagerService.getAllowPrint(I)Z
com.android.server.pm.PersonaPolicyManagerService.getAllowShortCutCreation(I)Z
com.android.server.pm.PersonaPolicyManagerService.getAllowUniversalCallerId(I)Z
com.android.server.pm.PersonaPolicyManagerService.getCameraModeChangeEnabled(I)Z
com.android.server.pm.PersonaPolicyManagerService.getDisableSwitchWidgetOnLockScreen(I)Z
com.android.server.pm.PersonaPolicyManagerService.getEncryptionStatus(I)Z
com.android.server.pm.PersonaPolicyManagerService.getGearSupportEnabled(I)Z
com.android.server.pm.PersonaPolicyManagerService.getModifyLockScreenTimeout(I)Z
com.android.server.pm.PersonaPolicyManagerService.getPasswordLockPolicy(I)Z
com.android.server.pm.PersonaPolicyManagerService.getPenWindowEnabled(I)Z
com.android.server.pm.PersonaPolicyManagerService.getRCPDataPolicy(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
com.android.server.pm.PersonaPolicyManagerService.getRCPDataPolicyForUser(ILjava/lang/String;Ljava/lang/String;)Ljava/lang/String;
com.android.server.pm.PersonaPolicyManagerService.getRCPNotificationPolicy(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
com.android.server.pm.PersonaPolicyManagerService.getSecureFolderPolicy(Ljava/lang/String;I)Ljava/util/List;
com.android.server.pm.PersonaPolicyManagerService.getSecureKeystoreEnabled(I)Z
com.android.server.pm.PersonaPolicyManagerService.getSwitchNotifEnabled(I)Z
com.android.server.pm.PersonaPolicyManagerService.isBadgeRequired()Z
com.android.server.pm.PersonaPolicyManagerService.isBadgeRequiredFromOwner(Ljava/lang/String;)Z
com.android.server.pm.PersonaPolicyManagerService.isMoveFilesToContainerAllowed(I)Z
com.android.server.pm.PersonaPolicyManagerService.isMoveFilesToOwnerAllowed(I)Z
com.android.server.pm.PersonaPolicyManagerService.isShareClipboardDataToContainerAllowed(I)Z
com.android.server.pm.PersonaPolicyManagerService.isShareClipboardDataToOwnerAllowed(I)Z
com.android.server.pm.PersonaPolicyManagerService.registerReceivers()V
com.android.server.pm.PersonaPolicyManagerService.setAirCommandEnabled(IZ)Z
com.android.server.pm.PersonaPolicyManagerService.setAllowAllShare(IZ)Z
com.android.server.pm.PersonaPolicyManagerService.setAllowContainerReset(IZ)Z
com.android.server.pm.PersonaPolicyManagerService.setAllowCustomBadgeIcon(IZ)Z
com.android.server.pm.PersonaPolicyManagerService.setAllowCustomColorIdentification(IZ)Z
com.android.server.pm.PersonaPolicyManagerService.setAllowCustomPersonaIcon(IZ)Z
com.android.server.pm.PersonaPolicyManagerService.setAllowDLNADataTransfer(IZ)Z
com.android.server.pm.PersonaPolicyManagerService.setAllowExportAndDeleteFiles(IZ)Z
com.android.server.pm.PersonaPolicyManagerService.setAllowExportFiles(IZ)Z
com.android.server.pm.PersonaPolicyManagerService.setAllowImportFiles(IZ)Z
com.android.server.pm.PersonaPolicyManagerService.setAllowPrint(IZ)Z
com.android.server.pm.PersonaPolicyManagerService.setAllowShortCutCreation(IZ)Z
com.android.server.pm.PersonaPolicyManagerService.setAllowUniversalCallerId(IZ)Z
com.android.server.pm.PersonaPolicyManagerService.setCameraModeChangeEnabled(IZ)Z
com.android.server.pm.PersonaPolicyManagerService.setDisableSwitchWidgetOnLockScreen(IZ)Z
com.android.server.pm.PersonaPolicyManagerService.setEncryptionStatus(IZ)Z
com.android.server.pm.PersonaPolicyManagerService.setGearSupportEnabled(IZ)Z
com.android.server.pm.PersonaPolicyManagerService.setModifyLockScreenTimeout(IZ)Z
com.android.server.pm.PersonaPolicyManagerService.setPasswordLockPolicy(IZ)Z
com.android.server.pm.PersonaPolicyManagerService.setPenWindowEnabled(IZ)Z
com.android.server.pm.PersonaPolicyManagerService.setRCPDataPolicy(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z
com.android.server.pm.PersonaPolicyManagerService.setRCPDataPolicyForFota(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z
com.android.server.pm.PersonaPolicyManagerService.setRCPNotificationPolicy(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z
com.android.server.pm.PersonaPolicyManagerService.setSecureFolderPolicy(Ljava/lang/String;Ljava/util/List;I)Z
com.android.server.pm.PersonaPolicyManagerService.setSecureKeystoreEnabled(IZ)Z
com.android.server.pm.PersonaPolicyManagerService.setSwitchNotifEnabled(IZ)Z
android.app.IWallpaperManager.clearBackupWallpaperGivenKey(I)V
android.app.IWallpaperManager.clearBackupWallpapers(I)V
android.app.IWallpaperManager.copyFileToWallpaperFile(I)V
android.app.IWallpaperManager.copyPreloadedFileToWallpaperFile(I)V
android.app.IWallpaperManager.getAnimatedPkgName(I)Ljava/lang/String;
android.app.IWallpaperManager.getDCMLauncherEnabled()Z
android.app.IWallpaperManager.getDefaultInfinityWallpaper()Landroid/content/ComponentName;
android.app.IWallpaperManager.getDesktopMode()I
android.app.IWallpaperManager.getDeviceColor()Ljava/lang/String;
android.app.IWallpaperManager.getLastWallpaper()Landroid/content/ComponentName;
android.app.IWallpaperManager.getLidState()I
android.app.IWallpaperManager.getLockWallpaperIndexOf(Landroid/app/IWallpaperManagerCallback;Landroid/os/Bundle;II)Landroid/os/ParcelFileDescriptor;
android.app.IWallpaperManager.getLockWallpaperType()I
android.app.IWallpaperManager.getMotionWallpaperPkgName(I)Ljava/lang/String;
android.app.IWallpaperManager.getPreloadWallpaperColorCode()Ljava/lang/String;
android.app.IWallpaperManager.getVideoColor()Ljava/lang/String;
android.app.IWallpaperManager.getVideoFilePath(I)Ljava/lang/String;
android.app.IWallpaperManager.getVideoPackage(I)Ljava/lang/String;
android.app.IWallpaperManager.getVideoThumbnailFileDescriptor(II)Landroid/os/ParcelFileDescriptor;
android.app.IWallpaperManager.getWallpaperHintsInArea(I)[I
android.app.IWallpaperManager.getWallpaperIndexOf(Ljava/lang/String;Landroid/app/IWallpaperManagerCallback;ILandroid/os/Bundle;IIIZ)Landroid/os/ParcelFileDescriptor;
android.app.IWallpaperManager.initLockWallpaper()V
android.app.IWallpaperManager.initializeKnoxWallpaper(I)V
android.app.IWallpaperManager.isDesktopMode()Z
android.app.IWallpaperManager.isDesktopModeEnabled(I)Z
android.app.IWallpaperManager.isEnabledMultiLockWallpaper(Z)Z
android.app.IWallpaperManager.isInfinityComponent(Ljava/lang/String;)Z
android.app.IWallpaperManager.isInfinityWallpaperEnabled()Z
android.app.IWallpaperManager.isSameWithCallingPackageName(Ljava/lang/String;I)Z
android.app.IWallpaperManager.isVideoWallpaper()Z
android.app.IWallpaperManager.isWallpaperBackupAllowed(II)Z
android.app.IWallpaperManager.makeBackupWallpaper(II)I
android.app.IWallpaperManager.makeBackupWallpaperKeyLocked()I
android.app.IWallpaperManager.resetMultipleWallpaperSettingIfNeeded(Ljava/lang/String;)V
android.app.IWallpaperManager.restoreBackupWallpaper(ILjava/lang/String;)Z
android.app.IWallpaperManager.semGetUri(ILjava/lang/String;)Ljava/lang/String;
android.app.IWallpaperManager.semGetWallpaperColorInArea(ILandroid/graphics/Rect;)I
android.app.IWallpaperManager.semGetWallpaperColors(I)Landroid/app/SemWallpaperColors;
android.app.IWallpaperManager.semGetWallpaperType(I)I
android.app.IWallpaperManager.semSetDLSWallpaperColors(Landroid/app/SemWallpaperColors;I)V
android.app.IWallpaperManager.semSetUri(Ljava/lang/String;ZILjava/lang/String;I)V
android.app.IWallpaperManager.sendWindowWallpaperCommand(Ljava/lang/String;Landroid/os/Bundle;)V
android.app.IWallpaperManager.setAnimatedWallpaper(Ljava/lang/String;Ljava/lang/String;I)V
android.app.IWallpaperManager.setDCMLauncherEnabled(Z)V
android.app.IWallpaperManager.setInfinityWallpaperComponentChecked(Landroid/content/ComponentName;Ljava/lang/String;I)V
android.app.IWallpaperManager.setKWPTypeLiveWallpaper(I)V
android.app.IWallpaperManager.setMotionWallpaper(Ljava/lang/String;Ljava/lang/String;I)V
android.app.IWallpaperManager.setPreloadWallpaper(ILjava/lang/String;Ljava/lang/String;)V
android.app.IWallpaperManager.setPreloadedWallpaper(Ljava/lang/String;Ljava/lang/String;Landroid/graphics/Rect;ZLandroid/os/Bundle;ILandroid/app/IWallpaperManagerCallback;II)Landroid/os/ParcelFileDescriptor;
android.app.IWallpaperManager.setVideoLockscreenWallpaper(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;II)V
android.app.IWallpaperManager.setWallpaper(Ljava/lang/String;Ljava/lang/String;Landroid/graphics/Rect;ZLandroid/os/Bundle;ILandroid/app/IWallpaperManagerCallback;II)Landroid/os/ParcelFileDescriptor;
android.app.IWallpaperManager.setWallpaperIndexOf(Ljava/lang/String;Ljava/lang/String;Landroid/graphics/Rect;ZLandroid/os/Bundle;ILandroid/app/IWallpaperManagerCallback;IIII)Landroid/os/ParcelFileDescriptor;
com.android.server.enterprise.smartcard.SmartCardEmailPolicy.getSMIMEEncryptionCertificate(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)Ljava/lang/String;
com.android.server.enterprise.smartcard.SmartCardEmailPolicy.getSMIMESignatureCertificate(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)Ljava/lang/String;
com.android.server.enterprise.smartcard.SmartCardEmailPolicy.isAuthenticationEnabled(Lcom/samsung/android/knox/ContextInfo;)Z
com.android.server.enterprise.smartcard.SmartCardEmailPolicy.isCredentialRequired(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)Z
com.android.server.enterprise.smartcard.SmartCardEmailPolicy.removeSMIMEEncryptionCertificate(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)Z
com.android.server.enterprise.smartcard.SmartCardEmailPolicy.removeSMIMESignatureCertificate(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)Z
com.android.server.enterprise.smartcard.SmartCardEmailPolicy.requireCredentials(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;Z)Z
com.android.server.enterprise.smartcard.SmartCardEmailPolicy.setForceSMIMEEncryptionCertificate(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;Ljava/lang/String;)Z
com.android.server.enterprise.smartcard.SmartCardEmailPolicy.setForceSMIMESignatureCertificate(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;Ljava/lang/String;)Z
com.android.server.smartclip.SpenGestureManagerService.getBleSpenAddress()Ljava/lang/String;
com.android.server.smartclip.SpenGestureManagerService.getBleSpenCmfCode()Ljava/lang/String;
com.android.server.smartclip.SpenGestureManagerService.getCurrentEditorInfo()Landroid/view/inputmethod/EditorInfo;
com.android.server.smartclip.SpenGestureManagerService.getCurrentInputContext()Lcom/android/internal/view/IInputContext;
com.android.server.smartclip.SpenGestureManagerService.getCurrentMissingMethodFlags()I
com.android.server.smartclip.SpenGestureManagerService.getScreenOffReason()I
com.android.server.smartclip.SpenGestureManagerService.getScrollableAreaInfo(Landroid/graphics/Rect;Landroid/os/IBinder;)Landroid/os/Bundle;
com.android.server.smartclip.SpenGestureManagerService.getScrollableViewInfo(Landroid/graphics/Rect;ILandroid/os/IBinder;)Landroid/os/Bundle;
com.android.server.smartclip.SpenGestureManagerService.getSmartClipDataByScreenRect(Landroid/graphics/Rect;Landroid/os/IBinder;I)Lcom/samsung/android/content/smartclip/SemSmartClipDataRepository;
com.android.server.smartclip.SpenGestureManagerService.injectInputEvent(II[Landroid/view/InputEvent;ZLandroid/os/IBinder;)V
com.android.server.smartclip.SpenGestureManagerService.isSpenInserted()Z
com.android.server.smartclip.SpenGestureManagerService.isSupportBleSpen()Z
com.android.server.smartclip.SpenGestureManagerService.notifyBleSpenChargeLockState(Z)V
com.android.server.smartclip.SpenGestureManagerService.notifyKeyboardClosed()V
com.android.server.smartclip.SpenGestureManagerService.registerBleSpenChargeLockStateChangedListener(Lcom/samsung/android/content/smartclip/IBleSpenChargeLockStateChangedListener;)V
com.android.server.smartclip.SpenGestureManagerService.registerHoverListener(Lcom/samsung/android/content/smartclip/ISpenGestureHoverListener;)V
com.android.server.smartclip.SpenGestureManagerService.registerInputMethodInfoChangeListener(Lcom/samsung/android/content/smartclip/IInputMethodInfoChangeListener;)V
com.android.server.smartclip.SpenGestureManagerService.screenshot(IIZLandroid/graphics/Rect;IIZ)Landroid/graphics/Bitmap;
com.android.server.smartclip.SpenGestureManagerService.sendSmartClipRemoteRequestResult(Lcom/samsung/android/content/smartclip/SmartClipRemoteRequestResult;)V
com.android.server.smartclip.SpenGestureManagerService.setBleSpenAddress(Ljava/lang/String;)V
com.android.server.smartclip.SpenGestureManagerService.setBleSpenCmfCode(Ljava/lang/String;)V
com.android.server.smartclip.SpenGestureManagerService.setCurrentInputInfo(Lcom/android/internal/view/IInputContext;Landroid/view/inputmethod/EditorInfo;I)V
com.android.server.smartclip.SpenGestureManagerService.setHoverStayDetectEnabled(Z)V
com.android.server.smartclip.SpenGestureManagerService.setHoverStayValues(III)V
com.android.server.smartclip.SpenGestureManagerService.setScreenOffReason(I)V
com.android.server.smartclip.SpenGestureManagerService.setSpenInsertionState(Z)V
com.android.server.smartclip.SpenGestureManagerService.setSpenPowerSavingModeEnabled(Z)V
com.android.server.smartclip.SpenGestureManagerService.showTouchPointer(Z)V
com.android.server.smartclip.SpenGestureManagerService.unregisterBleSpenChargeLockStateChangedListener(Lcom/samsung/android/content/smartclip/IBleSpenChargeLockStateChangedListener;)V
com.android.server.smartclip.SpenGestureManagerService.unregisterHoverListener(Lcom/samsung/android/content/smartclip/ISpenGestureHoverListener;)V
com.android.server.smartclip.SpenGestureManagerService.unregisterInputMethodInfoChangeListener(Lcom/samsung/android/content/smartclip/IInputMethodInfoChangeListener;)V
com.android.server.smartclip.SpenGestureManagerService.writeBleSpenCommand(Ljava/lang/String;)V
com.android.server.pm.PersonaManagerService.addAppPackageNameToWhiteList(ILjava/util/List;)V
com.android.server.pm.PersonaManagerService.appliedPasswordPolicy(I)Z
com.android.server.pm.PersonaManagerService.bindCoreServiceAsUser(Landroid/content/ComponentName;Landroid/app/IApplicationThread;Landroid/os/IBinder;Landroid/content/Intent;Landroid/app/IServiceConnection;II)Z
com.android.server.pm.PersonaManagerService.broadcastIntentThroughPersona(Landroid/content/Intent;I)Z
com.android.server.pm.PersonaManagerService.clearAttributes(II)Z
com.android.server.pm.PersonaManagerService.getAdminComponentName(I)Landroid/content/ComponentName;
com.android.server.pm.PersonaManagerService.getAttributes(I)I
com.android.server.pm.PersonaManagerService.getContainerName(I)Ljava/lang/String;
com.android.server.pm.PersonaManagerService.getContainerOrder(I)I
com.android.server.pm.PersonaManagerService.getCustomResource(ILjava/lang/String;)Ljava/lang/String;
com.android.server.pm.PersonaManagerService.getDualDARProfile()Landroid/os/Bundle;
com.android.server.pm.PersonaManagerService.getECName(I)Ljava/lang/String;
com.android.server.pm.PersonaManagerService.getFocusedLauncherId()I
com.android.server.pm.PersonaManagerService.getFocusedUser()I
com.android.server.pm.PersonaManagerService.getFotaVersion()I
com.android.server.pm.PersonaManagerService.getKnoxIcon(Ljava/lang/String;Ljava/lang/String;I)[B
com.android.server.pm.PersonaManagerService.getKnoxSettingsCustomName(I)Ljava/lang/String;
com.android.server.pm.PersonaManagerService.getMoveToKnoxMenuList(I)Ljava/util/List;
com.android.server.pm.PersonaManagerService.getMyknoxId()I
com.android.server.pm.PersonaManagerService.getPersonaCacheValue(Ljava/lang/String;)Ljava/lang/String;
com.android.server.pm.PersonaManagerService.getPersonaUserState(I)I
com.android.server.pm.PersonaManagerService.getPersonalModeName(I)Ljava/lang/String;
com.android.server.pm.PersonaManagerService.getProfileName(I)Ljava/lang/String;
com.android.server.pm.PersonaManagerService.getProfiles(IZ)Ljava/util/List;
com.android.server.pm.PersonaManagerService.getSecureFolderId()I
com.android.server.pm.PersonaManagerService.getWorkspaceName(Landroid/content/pm/UserInfo;Z)Ljava/lang/String;
com.android.server.pm.PersonaManagerService.hideMultiWindows(I)V
com.android.server.pm.PersonaManagerService.isExternalStorageEnabled(I)Z
com.android.server.pm.PersonaManagerService.isFOTAUpgrade()Z
com.android.server.pm.PersonaManagerService.isFotaUpgradeVersionChanged()Z
com.android.server.pm.PersonaManagerService.isKnoxProfileActivePasswordSufficientForParent(I)Z
com.android.server.pm.PersonaManagerService.isKnoxWindowExist(III)Z
com.android.server.pm.PersonaManagerService.isPossibleAddAppsToContainer(Ljava/lang/String;I)Z
com.android.server.pm.PersonaManagerService.refreshLockTimer(I)V
com.android.server.pm.PersonaManagerService.registerSystemPersonaObserver(Landroid/content/pm/ISystemPersonaObserver;)Z
com.android.server.pm.PersonaManagerService.resetPersonaPassword(ILjava/lang/String;I)V
com.android.server.pm.PersonaManagerService.sendProxyMessage(Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;)Landroid/os/Bundle;
com.android.server.pm.PersonaManagerService.sendRequestKeyStatus(I)V
com.android.server.pm.PersonaManagerService.setAttributes(II)Z
com.android.server.pm.PersonaManagerService.setDualDARProfile(Landroid/os/Bundle;)I
com.android.server.pm.PersonaManagerService.setFocusedLauncherId(I)V
com.android.server.pm.PersonaManagerService.setPackageSettingInstalled(Ljava/lang/String;ZI)Z
com.android.server.pm.PersonaManagerService.setPersonalModeName(ILjava/lang/String;)Z
com.android.server.pm.PersonaManagerService.setProfileName(ILjava/lang/String;)Z
com.android.server.pm.PersonaManagerService.startActivityThroughPersona(Landroid/content/Intent;)Z
com.android.server.pm.PersonaManagerService.updatePersonaCache(Ljava/lang/String;Ljava/lang/String;)Z
android.app.BluetoothSecureManagerService.addWhiteList(Ljava/lang/String;I[Ljava/lang/String;)Z
android.app.BluetoothSecureManagerService.enableSecureMode(Z)Z
android.app.BluetoothSecureManagerService.enableWhiteList(Z)Z
android.app.BluetoothSecureManagerService.getSecureModeSetting(Ljava/lang/String;)I
android.app.BluetoothSecureManagerService.getWhiteListCod(I)I
android.app.BluetoothSecureManagerService.getWhiteListFirstIndex()I
android.app.BluetoothSecureManagerService.getWhiteListName(I)Ljava/lang/String;
android.app.BluetoothSecureManagerService.getWhiteListNextIndex(I)I
android.app.BluetoothSecureManagerService.getWhiteListUuids(I)[Ljava/lang/String;
android.app.BluetoothSecureManagerService.isSecureModeEnabled()Z
android.app.BluetoothSecureManagerService.isWhiteListEnabled()Z
android.app.BluetoothSecureManagerService.removeWhiteList(Ljava/lang/String;I)Z
android.app.BluetoothSecureManagerService.setSecureModeSetting(Ljava/lang/String;I)Z
com.samsung.android.knox.analytics.service.KnoxAnalyticsProxyService.log(Lcom/samsung/android/knox/knoxanalyticsproxy/KnoxAnalyticsData;)V
com.android.server.pm.UserManagerService.getBModeDefaultIcon(I)Landroid/graphics/Bitmap;
com.android.server.pm.UserManagerService.semGetSemUserInfo(I)Landroid/content/pm/SemUserInfo;
com.android.server.pm.UserManagerService.updateUserInfo(ILandroid/os/Bundle;)Z
com.android.server.accessibility.AccessibilityManagerService.OnStartGestureWakeup()Z
com.android.server.accessibility.AccessibilityManagerService.OnStopGestureWakeup()Z
com.android.server.accessibility.AccessibilityManagerService.isTwoFingerGestureRecognitionEnabled()Z
com.android.server.accessibility.AccessibilityManagerService.semCheckMdnieColorBlind([I)Z
com.android.server.accessibility.AccessibilityManagerService.semDisableMagnifier()V
com.android.server.accessibility.AccessibilityManagerService.semDisableMdnieColorFilter()Z
com.android.server.accessibility.AccessibilityManagerService.semEnableMagnifier(IIF)V
com.android.server.accessibility.AccessibilityManagerService.semEnableMagnifierByDisplayID(IIFI)V
com.android.server.accessibility.AccessibilityManagerService.semEnableMdnieColorFilter(II)Z
com.android.server.accessibility.AccessibilityManagerService.semIsAccessibilityButtonShown()Z
com.android.server.accessibility.AccessibilityManagerService.semIsAccessibilityServiceEnabled(I)Z
com.android.server.accessibility.AccessibilityManagerService.semIsDarkScreenMode()Z
com.android.server.accessibility.AccessibilityManagerService.semLockNow()V
com.android.server.accessibility.AccessibilityManagerService.semOnLightNotification(Ljava/lang/String;)Z
com.android.server.accessibility.AccessibilityManagerService.semOpenDeviceOptions()V
com.android.server.accessibility.AccessibilityManagerService.semRegisterAssistantMenu(Landroid/os/IBinder;)V
com.android.server.accessibility.AccessibilityManagerService.semSetColorBlind(ZF)Z
com.android.server.accessibility.AccessibilityManagerService.semSetMagnificationSpec(Landroid/view/MagnificationSpec;)V
com.android.server.accessibility.AccessibilityManagerService.semSetMdnieAccessibilityMode(IZ)Z
com.android.server.accessibility.AccessibilityManagerService.semSetTwoFingerGestureRecognitionEnabled(Z)V
com.android.server.accessibility.AccessibilityManagerService.semStartFlashNotification(Ljava/lang/String;Landroid/os/IBinder;I)Z
com.android.server.accessibility.AccessibilityManagerService.semStopFlashNotification(Ljava/lang/String;)Z
com.android.server.accessibility.AccessibilityManagerService.semToggleDarkScreenMode()V
com.android.server.accessibility.AccessibilityManagerService.semTurnOffAccessibilityService(I)V
com.android.server.accessibility.AccessibilityManagerService.semTurnOnAccessibilityService(I)V
com.android.server.accessibility.AccessibilityManagerService.semUpdateAssitantMenu(Landroid/os/Bundle;)V
com.android.server.accessibility.AccessibilityManagerService.setTalkbackMode()V
com.android.server.enterprise.scep.EnterpriseCertEnrollPolicy.activateEnrollCertService(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)I
com.android.server.enterprise.scep.EnterpriseCertEnrollPolicy.deleteUserCertificate(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;Ljava/lang/String;)I
com.android.server.enterprise.scep.EnterpriseCertEnrollPolicy.enrollUserCertificate(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;Lcom/samsung/android/knox/keystore/EnrollmentProfile;Ljava/util/List;Ljava/lang/String;)Ljava/lang/String;
com.android.server.enterprise.scep.EnterpriseCertEnrollPolicy.getCertEnrollmentStatus(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;Ljava/lang/String;)I
com.android.server.enterprise.scep.EnterpriseCertEnrollPolicy.isEnrollCertServiceActivated(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)Z
com.android.server.enterprise.scep.EnterpriseCertEnrollPolicy.notifyUserKeystoreUnlocked(I)V
com.android.server.enterprise.scep.EnterpriseCertEnrollPolicy.renewUserCertificate(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;)Ljava/lang/String;
com.android.server.am.ActivityManagerService.addPackageData(Ljava/lang/String;F)V
com.android.server.am.ActivityManagerService.canRestrict(ILjava/lang/String;I)Z
com.android.server.am.ActivityManagerService.checkAIDInternal(Ljava/lang/String;)Z
com.android.server.am.ActivityManagerService.closeSystemDialogsInDisplay(Ljava/lang/String;I)V
com.android.server.am.ActivityManagerService.dismissUserSwitchingDialog(I)V
com.android.server.am.ActivityManagerService.forceStopPackageByAdmin(Ljava/lang/String;I)V
com.android.server.am.ActivityManagerService.getCmdlineValues([I)[Ljava/lang/String;
com.android.server.am.ActivityManagerService.getCommValues([I)[Ljava/lang/String;
com.android.server.am.ActivityManagerService.getDumpMemoryInfo()Ljava/util/List;
com.android.server.am.ActivityManagerService.getGlobalConfiguration()Landroid/content/res/Configuration;
com.android.server.am.ActivityManagerService.getIntentSenderWithSourceToken(ILjava/lang/String;Landroid/os/IBinder;Landroid/os/IBinder;Ljava/lang/String;I[Landroid/content/Intent;[Ljava/lang/String;ILandroid/os/Bundle;I)Landroid/content/IIntentSender;
com.android.server.am.ActivityManagerService.getIsolatedProcessList()[I
com.android.server.am.ActivityManagerService.getLongLiveApp()Ljava/lang/String;
com.android.server.am.ActivityManagerService.getPackageFromAppProcesses(I)Ljava/lang/String;
com.android.server.am.ActivityManagerService.getProcPids()[I
com.android.server.am.ActivityManagerService.getProcessList(I)[I
com.android.server.am.ActivityManagerService.getRequestedOrientationByTaskId(I)I
com.android.server.am.ActivityManagerService.getRestrictionInfo(ILjava/lang/String;I)Lcom/samsung/android/sdhms/SemAppRestrictionManager$RestrictionInfo;
com.android.server.am.ActivityManagerService.getScalingFactor(Ljava/lang/String;)F
com.android.server.am.ActivityManagerService.isScaledApp(I)Z
com.android.server.am.ActivityManagerService.isScaledAppByPackageName(Ljava/lang/String;)Z
com.android.server.am.ActivityManagerService.moveTaskToBack(IZ)Z
com.android.server.am.ActivityManagerService.moveTaskToBackWithBundle(IZLandroid/os/Bundle;)Z
com.android.server.am.ActivityManagerService.queryRegisteredReceiverPackages(Landroid/content/Intent;Ljava/lang/String;I)[Ljava/lang/String;
com.android.server.am.ActivityManagerService.resetAbnormalList()V
com.android.server.am.ActivityManagerService.restrict(IIZLjava/lang/String;I)Z
com.android.server.am.ActivityManagerService.sendControlInfo(ILjava/lang/String;)Z
com.android.server.am.ActivityManagerService.setDssForPackage(Ljava/lang/String;F)V
com.android.server.am.ActivityManagerService.setLongLiveApp(Ljava/lang/String;)Z
com.android.server.am.ActivityManagerService.showAllDSSInfo()V
com.android.server.am.ActivityManagerService.updateDisableTimeFromSiIADToMARs(Ljava/util/List;)Ljava/util/List;
com.android.server.display.DisplayManagerService$BinderService.connectDevice(Landroid/hardware/display/SemDeviceInfo;)V
com.android.server.display.DisplayManagerService$BinderService.convertToBacklight(F)I
com.android.server.display.DisplayManagerService$BinderService.createVirtualDisplay(Landroid/hardware/display/IVirtualDisplayCallback;Landroid/media/projection/IMediaProjection;Ljava/lang/String;Ljava/lang/String;IIILandroid/view/Surface;ILjava/lang/String;I)I
com.android.server.display.DisplayManagerService$BinderService.disconnectDevice()V
com.android.server.display.DisplayManagerService$BinderService.enableMagnifierWindowController(Z)V
com.android.server.display.DisplayManagerService$BinderService.enableOverlayMagnifier(Z)V
com.android.server.display.DisplayManagerService$BinderService.fitToActiveDisplay(Z)V
com.android.server.display.DisplayManagerService$BinderService.getActiveDevice()Landroid/hardware/display/SemDeviceInfo;
com.android.server.display.DisplayManagerService$BinderService.getActiveSinkDisplay()Landroid/hardware/display/SemWifiDisplay;
com.android.server.display.DisplayManagerService$BinderService.getBackupBrightnessConfiguration(I)Landroid/hardware/display/BrightnessConfiguration;
com.android.server.display.DisplayManagerService$BinderService.getDeviceMaxVolume()I
com.android.server.display.DisplayManagerService$BinderService.getDeviceMinVolume()I
com.android.server.display.DisplayManagerService$BinderService.getLastConnectedDevice()Landroid/hardware/display/SemDeviceInfo;
com.android.server.display.DisplayManagerService$BinderService.getPresentationOwner(I)Ljava/lang/String;
com.android.server.display.DisplayManagerService$BinderService.isConnWithPinSupported(Ljava/lang/String;)Z
com.android.server.display.DisplayManagerService$BinderService.isDeviceVolumeMuted()Z
com.android.server.display.DisplayManagerService$BinderService.isDongleRenameSupported()Z
com.android.server.display.DisplayManagerService$BinderService.isFitToActiveDisplay()Z
com.android.server.display.DisplayManagerService$BinderService.isScreenInSinkConnected()Z
com.android.server.display.DisplayManagerService$BinderService.isWifiDisplayDmrSupported()Z
com.android.server.display.DisplayManagerService$BinderService.isWifiDisplaySinkConnected()Z
com.android.server.display.DisplayManagerService$BinderService.removeLastConnectedDevice()V
com.android.server.display.DisplayManagerService$BinderService.renameDongle(Ljava/lang/String;)V
com.android.server.display.DisplayManagerService$BinderService.resetBrightnessConfigurationForUser(ILjava/lang/String;)V
com.android.server.display.DisplayManagerService$BinderService.restartWifiDisplay()V
com.android.server.display.DisplayManagerService$BinderService.setAppListSupportingDirectStream(Ljava/util/List;)V
com.android.server.display.DisplayManagerService$BinderService.setBackupBrightnessConfiguration(Landroid/hardware/display/BrightnessConfiguration;ILjava/lang/String;)V
com.android.server.display.DisplayManagerService$BinderService.setCurrentDisplayIdMagnifier(I)V
com.android.server.display.DisplayManagerService$BinderService.setCurrentFollowingStatus(Z)V
com.android.server.display.DisplayManagerService$BinderService.setDeviceVolume(I)V
com.android.server.display.DisplayManagerService$BinderService.setDeviceVolumeMuted(Z)V
com.android.server.display.DisplayManagerService$BinderService.setMagnificationSettings(IIF)V
com.android.server.display.DisplayManagerService$BinderService.setMagnificationSpec(Landroid/view/MagnificationSpec;)V
com.android.server.display.DisplayManagerService$BinderService.setScanningChannel(I)V
com.android.server.display.DisplayManagerService$BinderService.setTemporaryBrightnessForSlowChange(IZ)V
com.android.server.display.DisplayManagerService$BinderService.setVolumeKeyEvent(I)V
com.android.server.display.DisplayManagerService$BinderService.setWifiDisplayCPUBoost(ILandroid/os/IBinder;)V
com.android.server.display.DisplayManagerService$BinderService.setWifiDisplayParam(Ljava/lang/String;Ljava/lang/String;)V
com.android.server.display.DisplayManagerService$BinderService.setWifiDisplayRealSize(Ljava/lang/String;)V
com.android.server.display.DisplayManagerService$BinderService.startWifiDisplayChannelScan(I)V
com.android.server.display.DisplayManagerService$BinderService.startWifiDisplayChannelScanAndInterval(II)V
com.android.server.display.DisplayManagerService$BinderService.updateDeviceState(Landroid/hardware/display/SemDeviceInfo;Landroid/os/IBinder;)V
com.android.server.display.DisplayManagerService$BinderService.updateDexDisplayState(Z)I
com.android.server.VaultKeeperService.checkDataWritable(Ljava/lang/String;)I
com.android.server.VaultKeeperService.destroy(Ljava/lang/String;[B[B[B)I
com.android.server.VaultKeeperService.encryptMessage(Ljava/lang/String;[B)[B
com.android.server.VaultKeeperService.generateHotpCode(Ljava/lang/String;)I
com.android.server.VaultKeeperService.initialize(Ljava/lang/String;[B[B[B[B)I
com.android.server.VaultKeeperService.initialize2(Ljava/lang/String;[B[B)[B
com.android.server.VaultKeeperService.isInitialized(Ljava/lang/String;)Z
com.android.server.VaultKeeperService.migrationStorage(Ljava/lang/String;)Z
com.android.server.VaultKeeperService.read(Ljava/lang/String;I[B[I)[B
com.android.server.VaultKeeperService.sensitiveBox(Ljava/lang/String;I[B[I)[B
com.android.server.VaultKeeperService.verifyCertificate(Ljava/lang/String;[B)Z
com.android.server.VaultKeeperService.write(Ljava/lang/String;I[B[B[B)I
com.android.server.VaultKeeperService.write2(Ljava/lang/String;I[B)[B
com.android.server.biometrics.fingerprint.FingerprintService$FingerprintServiceWrapper.request(Landroid/os/IBinder;I[B[BIILjava/lang/String;Landroid/hardware/fingerprint/IFingerprintServiceReceiver;)I
com.android.server.biometrics.fingerprint.FingerprintService$FingerprintServiceWrapper.semAuthenticate(Landroid/os/IBinder;JILandroid/hardware/fingerprint/IFingerprintServiceReceiver;ILjava/lang/String;Landroid/os/Bundle;)V
com.android.server.biometrics.fingerprint.FingerprintService$FingerprintServiceWrapper.semGetIconBottomMargin()I
com.android.server.biometrics.fingerprint.FingerprintService$FingerprintServiceWrapper.semGetSensorAreaInDisplay(I)Landroid/graphics/Rect;
com.android.server.biometrics.fingerprint.FingerprintService$FingerprintServiceWrapper.semPrepareForAuthentication(Landroid/os/IBinder;JILandroid/hardware/biometrics/IBiometricServiceReceiverInternal;Ljava/lang/String;IIIII)V
com.android.server.biometrics.fingerprint.FingerprintService$FingerprintServiceWrapper.semRegisterFingerprintViewListener(Landroid/os/IBinder;ZLandroid/hardware/biometrics/IBiometricSysUiCallback;)V
com.android.server.biometrics.fingerprint.FingerprintService$FingerprintServiceWrapper.semUnregisterFingerprintViewListener(Landroid/os/IBinder;Z)V
com.android.server.NetworkManagementService.addChain(Ljava/lang/String;Ljava/lang/String;)V
com.android.server.NetworkManagementService.addEnterpriseUidRanges([Landroid/net/UidRange;Ljava/lang/String;I)V
com.android.server.NetworkManagementService.addIpAcceptRule(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.server.NetworkManagementService.addMptcpLink(Ljava/lang/String;)V
com.android.server.NetworkManagementService.addSocksRule(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V
com.android.server.NetworkManagementService.addSocksSkipRule(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.server.NetworkManagementService.addSocksSkipRuleProto(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V
com.android.server.NetworkManagementService.addSourcePortAcceptRule(Ljava/lang/String;Ljava/lang/String;I)V
com.android.server.NetworkManagementService.addSourceRoute(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.server.NetworkManagementService.addUidSocksRule(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;)V
com.android.server.NetworkManagementService.addUidToChain(Ljava/lang/String;Ljava/lang/String;I)V
com.android.server.NetworkManagementService.addUidToExemptList(I[Landroid/net/UidRange;)V
com.android.server.NetworkManagementService.allowAppIdToMakeDnsQueryForNetid(I[Landroid/net/UidRange;)V
com.android.server.NetworkManagementService.blockDnsQueries([Landroid/net/UidRange;)V
com.android.server.NetworkManagementService.blockEnterpriseUidRanges([Landroid/net/UidRange;)V
com.android.server.NetworkManagementService.buildFirewall()V
com.android.server.NetworkManagementService.cleanAllBlock()V
com.android.server.NetworkManagementService.clearFocUidList()V
com.android.server.NetworkManagementService.clearMdoUidList()V
com.android.server.NetworkManagementService.closeSocketsForFreecess(ILjava/lang/String;)V
com.android.server.NetworkManagementService.createNetworkGuardChain()V
com.android.server.NetworkManagementService.delIpAcceptRule(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.server.NetworkManagementService.delSourcePortAcceptRule(Ljava/lang/String;Ljava/lang/String;I)V
com.android.server.NetworkManagementService.delSourceRoute(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.server.NetworkManagementService.deleteNetworkGuardChain()V
com.android.server.NetworkManagementService.deleteNetworkGuardWhiteListRule()V
com.android.server.NetworkManagementService.destroyBlockedKnoxNetwork([Landroid/net/UidRange;)V
com.android.server.NetworkManagementService.disableEpdg(Ljava/lang/String;Ljava/lang/String;)V
com.android.server.NetworkManagementService.disableMptcp()V
com.android.server.NetworkManagementService.disableNetworkGuard()V
com.android.server.NetworkManagementService.doDestroySockets(I[I)V
com.android.server.NetworkManagementService.enableEpdg(Ljava/lang/String;Ljava/lang/String;)V
com.android.server.NetworkManagementService.enableMptcp(Ljava/lang/String;)V
com.android.server.NetworkManagementService.enableNetworkGuard(Z)V
com.android.server.NetworkManagementService.exemptVpnDnsQuery([Landroid/net/UidRange;)V
com.android.server.NetworkManagementService.flushFocTables()V
com.android.server.NetworkManagementService.getAdaptiveSpeedLimitNetworkStats()[Ljava/lang/String;
com.android.server.NetworkManagementService.getNetworkStatsVideoCall(Ljava/lang/String;II)Landroid/net/NetworkStats;
com.android.server.NetworkManagementService.removeAppIdFromMakingDnsQueryForNetid(I[Landroid/net/UidRange;)V
com.android.server.NetworkManagementService.removeChain(Ljava/lang/String;Ljava/lang/String;)V
com.android.server.NetworkManagementService.removeEnterpriseUidRanges([Landroid/net/UidRange;)V
com.android.server.NetworkManagementService.removeLegacyRouteForNetId(ILandroid/net/RouteInfo;I)V
com.android.server.NetworkManagementService.removeMptcpLink(Ljava/lang/String;)V
com.android.server.NetworkManagementService.removeSocksRule(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V
com.android.server.NetworkManagementService.removeSocksSkipRule(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.server.NetworkManagementService.removeSocksSkipRuleProto(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V
com.android.server.NetworkManagementService.removeUidFromChain(Ljava/lang/String;Ljava/lang/String;I)V
com.android.server.NetworkManagementService.removeUidFromExemptList(I[Landroid/net/UidRange;)V
com.android.server.NetworkManagementService.removeUidSocksRule(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;)V
com.android.server.NetworkManagementService.removeVpnDnsQuery([Landroid/net/UidRange;)V
com.android.server.NetworkManagementService.setAdaptiveSpeedLimitRule(IZ)Z
com.android.server.NetworkManagementService.setBidirectionalTcpRule(Ljava/lang/String;Z)V
com.android.server.NetworkManagementService.setBlackListIPs(Ljava/lang/String;)V
com.android.server.NetworkManagementService.setBlockAllDNSPackets(Z)V
com.android.server.NetworkManagementService.setBlockAllPackets()V
com.android.server.NetworkManagementService.setDestinationBasedMarkRule(ZLjava/lang/String;Ljava/lang/String;II)V
com.android.server.NetworkManagementService.setDnsForwardersForKnoxVpn(I[Ljava/lang/String;)V
com.android.server.NetworkManagementService.setEpdgInterfaceDropRule(Ljava/lang/String;Z)V
com.android.server.NetworkManagementService.setFirewallRuleMobileData(IZ)V
com.android.server.NetworkManagementService.setFirewallRuleWifi(IZ)V
com.android.server.NetworkManagementService.setFocBlockList(Z[I)V
com.android.server.NetworkManagementService.setFocNetId(I)V
com.android.server.NetworkManagementService.setFocUidList([I)V
com.android.server.NetworkManagementService.setKnoxGuardExemptRule(ZLjava/lang/String;I)V
com.android.server.NetworkManagementService.setLimitUidRuleMap(IZ)Z
com.android.server.NetworkManagementService.setMdoNetId(I)V
com.android.server.NetworkManagementService.setMdoUid(ZI)V
com.android.server.NetworkManagementService.setMdoUidList([I)V
com.android.server.NetworkManagementService.setMecUid(ZI)V
com.android.server.NetworkManagementService.setMptcpMtuValue(Ljava/lang/String;I)V
com.android.server.NetworkManagementService.setNetworkGuardProtocolAcceptRule(I)V
com.android.server.NetworkManagementService.setNetworkGuardUidRangeAcceptRule(II)V
com.android.server.NetworkManagementService.setNetworkGuardUidRule(IZZ)V
com.android.server.NetworkManagementService.setNetworkInfo(IZI)V
com.android.server.NetworkManagementService.setPrivateIpRoute(ZLjava/lang/String;I)V
com.android.server.NetworkManagementService.setRoamingReductionRules(Z)V
com.android.server.NetworkManagementService.setTCRule(ZLjava/lang/String;I)V
com.android.server.NetworkManagementService.setTcpBufferSize(Ljava/lang/String;Ljava/lang/String;)V
com.android.server.NetworkManagementService.setUIDRoute(ZLjava/lang/String;ILjava/lang/String;Ljava/lang/String;)V
com.android.server.NetworkManagementService.setUrlFirewallRuleMobileData(ILjava/lang/String;Z)V
com.android.server.NetworkManagementService.setUrlFirewallRuleWifi(ILjava/lang/String;Z)V
com.android.server.NetworkManagementService.setWhiteListIPs(Ljava/lang/String;)V
com.android.server.NetworkManagementService.setWhiteListUidNetworkRules(IZ)V
com.android.server.NetworkManagementService.setWhiteListUrlNetworkRules(Ljava/lang/String;Ljava/lang/String;IZ)V
com.android.server.NetworkManagementService.startMec(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.server.NetworkManagementService.startNetworkStatsOnPorts(Ljava/lang/String;II)V
com.android.server.NetworkManagementService.stopMec(Ljava/lang/String;)V
com.android.server.NetworkManagementService.stopNetworkStatsOnPorts(Ljava/lang/String;II)V
com.android.server.NetworkManagementService.unblockDnsQueries([Landroid/net/UidRange;)V
com.android.server.NetworkManagementService.unblockEnterpriseUidRanges([Landroid/net/UidRange;)V
com.android.server.NetworkManagementService.updateSourceRule(ZLjava/lang/String;Ljava/lang/String;)V
com.android.server.BluetoothManagerService.bindBluetoothProfileServiceWithCaller(ILandroid/bluetooth/IBluetoothProfileServiceConnection;Ljava/lang/String;)Z
com.android.server.BluetoothManagerService.dumpInFile()V
com.android.server.BluetoothManagerService.enableBle(Ljava/lang/String;)Z
com.android.server.BluetoothManagerService.getBleAppCount()I
com.android.server.BluetoothManagerService.getBleAppCounts()[I
com.android.server.BluetoothManagerService.getProperty(I)Ljava/lang/String;
com.android.server.BluetoothManagerService.getSamsungBleAppCount()I
com.android.server.BluetoothManagerService.getSettingsName()Ljava/lang/String;
com.android.server.BluetoothManagerService.isSwitchingUser()Z
com.android.server.BluetoothManagerService.putLogs(Ljava/lang/String;)V
com.android.server.BluetoothManagerService.readFile(I)Ljava/lang/String;
com.android.server.BluetoothManagerService.registerSinkServiceChangeCallback(Landroid/bluetooth/IBluetoothSinkServiceChangeCallback;)V
com.android.server.BluetoothManagerService.registerStateDisableBleCallback(Landroid/bluetooth/IBluetoothDisableBleCallback;)V
com.android.server.BluetoothManagerService.sendDisableBleCallback()V
com.android.server.BluetoothManagerService.sendSinkServiceChangeCallback(Z)V
com.android.server.BluetoothManagerService.setProperty(ILjava/lang/String;)Z
com.android.server.BluetoothManagerService.shutdown()Z
com.android.server.BluetoothManagerService.unbindBluetoothProfileServiceWithCaller(ILandroid/bluetooth/IBluetoothProfileServiceConnection;Ljava/lang/String;)V
com.android.server.BluetoothManagerService.unregisterSinkServiceChangeCallback(Landroid/bluetooth/IBluetoothSinkServiceChangeCallback;)V
com.android.server.BluetoothManagerService.unregisterStateDisableBleCallback(Landroid/bluetooth/IBluetoothDisableBleCallback;)V
com.android.server.BluetoothManagerService.updateSBleAppCount(Landroid/os/IBinder;ZLjava/lang/String;)I
com.android.server.BluetoothManagerService.writeFile(ILjava/lang/String;)Z
com.android.server.locksettings.LockSettingsService.changeToken([BJ[BJI)Z
com.android.server.locksettings.LockSettingsService.checkAppLockBackupPin(Ljava/lang/String;I)Z
com.android.server.locksettings.LockSettingsService.checkAppLockFingerprintPassword(Ljava/lang/String;I)Z
com.android.server.locksettings.LockSettingsService.checkAppLockPassword(Ljava/lang/String;I)Z
com.android.server.locksettings.LockSettingsService.checkAppLockPattern(Ljava/lang/String;I)Z
com.android.server.locksettings.LockSettingsService.checkAppLockPin(Ljava/lang/String;I)Z
com.android.server.locksettings.LockSettingsService.checkBackupPassword([BI)Z
com.android.server.locksettings.LockSettingsService.checkCarrierPassword([BI)Z
com.android.server.locksettings.LockSettingsService.checkFMMPassword([BI)Z
com.android.server.locksettings.LockSettingsService.checkRemoteLockPassword(I[BILandroid/os/IRemoteCallback;)V
com.android.server.locksettings.LockSettingsService.getCarrierLock(I)Z
com.android.server.locksettings.LockSettingsService.getCredentialType(I)I
com.android.server.locksettings.LockSettingsService.getSecureMode(I)I
com.android.server.locksettings.LockSettingsService.haveAppLockBackupPin(I)Z
com.android.server.locksettings.LockSettingsService.haveAppLockFingerprintPassword(I)Z
com.android.server.locksettings.LockSettingsService.haveAppLockPassword(I)Z
com.android.server.locksettings.LockSettingsService.haveAppLockPattern(I)Z
com.android.server.locksettings.LockSettingsService.haveAppLockPin(I)Z
com.android.server.locksettings.LockSettingsService.haveBackupPassword(I)Z
com.android.server.locksettings.LockSettingsService.haveCarrierPassword(I)Z
com.android.server.locksettings.LockSettingsService.haveFMMPassword(I)Z
com.android.server.locksettings.LockSettingsService.isLockPasswordValid(I)Z
com.android.server.locksettings.LockSettingsService.registerRemoteLockCallback(ILcom/android/internal/widget/IRemoteLockMonitorCallback;)V
com.android.server.locksettings.LockSettingsService.requestRemoteLockInfo(I)V
com.android.server.locksettings.LockSettingsService.sendLockTypeChangedInfo(Z)V
com.android.server.locksettings.LockSettingsService.setAppLockBackupPin(Ljava/lang/String;I)V
com.android.server.locksettings.LockSettingsService.setAppLockFingerprintPassword(Ljava/lang/String;I)V
com.android.server.locksettings.LockSettingsService.setAppLockPassword(Ljava/lang/String;I)V
com.android.server.locksettings.LockSettingsService.setAppLockPattern(Ljava/lang/String;I)V
com.android.server.locksettings.LockSettingsService.setAppLockPin(Ljava/lang/String;I)V
com.android.server.locksettings.LockSettingsService.setCarrierLockEnabled(I)V
com.android.server.locksettings.LockSettingsService.setLockBackupPassword([B[BI)V
com.android.server.locksettings.LockSettingsService.setLockCarrierPassword([BI)V
com.android.server.locksettings.LockSettingsService.setLockFMMPassword([BI)V
com.android.server.locksettings.LockSettingsService.setLockModeChangedCallback(Landroid/os/IRemoteCallback;Z)V
com.android.server.locksettings.LockSettingsService.setRemoteLock(ILcom/android/internal/widget/RemoteLockInfo;)V
com.android.server.locksettings.LockSettingsService.setShellCommandCallback(Landroid/os/IRemoteCallback;)V
com.android.server.locksettings.LockSettingsService.unregisterRemoteLockCallback(ILcom/android/internal/widget/IRemoteLockMonitorCallback;)V
com.android.server.locksettings.LockSettingsService.updateCarrierLock(I)Z
com.android.server.locksettings.LockSettingsService.verifyToken([BJI)Lcom/android/internal/widget/VerifyCredentialResponse;
com.android.server.om.OverlayManagerService$1.applySamsungThemeOverlays(Ljava/util/List;Ljava/util/List;ILandroid/content/om/ISamsungOverlayCallback;)Z
com.samsung.android.knox.analytics.service.KnoxAnalyticsServiceImpl.log(Lcom/samsung/android/knox/analytics/KnoxAnalyticsData;)V
com.samsung.accessory.manager.SAccessoryManager.getSupportedServices()Ljava/lang/String;
com.android.server.SEAMService.activateDomain(Z)I
com.android.server.SEAMService.addAppToContainer(Ljava/lang/String;[Ljava/lang/String;II)I
com.android.server.SEAMService.addAppToWhitelist(ILjava/lang/String;[Ljava/lang/String;I)I
com.android.server.SEAMService.changeAppDomain(Ljava/lang/String;ILjava/lang/String;Z)I
com.android.server.SEAMService.clearWhitelist(II)I
com.android.server.SEAMService.createSEContainer()I
com.android.server.SEAMService.deActivateDomain()I
com.android.server.SEAMService.getAMSLog(Lcom/samsung/android/knox/ContextInfo;)Ljava/lang/String;
com.android.server.SEAMService.getAMSLogLevel(Lcom/samsung/android/knox/ContextInfo;)I
com.android.server.SEAMService.getAMSMode(Lcom/samsung/android/knox/ContextInfo;)I
com.android.server.SEAMService.getAVCLog(Lcom/samsung/android/knox/ContextInfo;)Ljava/lang/String;
com.android.server.SEAMService.getActivationStatus()I
com.android.server.SEAMService.getDataType(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;I)Ljava/lang/String;
com.android.server.SEAMService.getDomain(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;I)Ljava/lang/String;
com.android.server.SEAMService.getPackageNamesFromSEContainer(II)[Ljava/lang/String;
com.android.server.SEAMService.getPackagesFromWhitelist(II)[Ljava/lang/String;
com.android.server.SEAMService.getSEAMSLog(Lcom/samsung/android/knox/ContextInfo;)Ljava/lang/String;
com.android.server.SEAMService.getSEContainerIDs()[I
com.android.server.SEAMService.getSEContainerIDsFromPackageName(Ljava/lang/String;I)[I
com.android.server.SEAMService.getSELinuxMode(Lcom/samsung/android/knox/ContextInfo;)I
com.android.server.SEAMService.getSepolicyVersion(Lcom/samsung/android/knox/ContextInfo;)Ljava/lang/String;
com.android.server.SEAMService.getSignatureFromCertificate([B)Ljava/lang/String;
com.android.server.SEAMService.getSignatureFromMac(Ljava/lang/String;)Ljava/lang/String;
com.android.server.SEAMService.getSignatureFromPackage(Ljava/lang/String;)Ljava/lang/String;
com.android.server.SEAMService.hasKnoxContainers()I
com.android.server.SEAMService.hasSEContainers()I
com.android.server.SEAMService.isAuthorized(IILjava/lang/String;Ljava/lang/String;)I
com.android.server.SEAMService.isSEAndroidLogDumpStateInclude(Lcom/samsung/android/knox/ContextInfo;)I
com.android.server.SEAMService.isSEPolicyAutoUpdateEnabled(Lcom/samsung/android/knox/ContextInfo;)I
com.android.server.SEAMService.isWhitelistApp(ILjava/lang/String;I)I
com.android.server.SEAMService.loadContainerSetting(Ljava/lang/String;)I
com.android.server.SEAMService.relabelAppDir(Ljava/lang/String;)I
com.android.server.SEAMService.relabelData(Lcom/samsung/android/knox/ContextInfo;)I
com.android.server.SEAMService.removeAppFromContainer(Ljava/lang/String;[Ljava/lang/String;II)I
com.android.server.SEAMService.removeAppFromWhitelist(ILjava/lang/String;I)I
com.android.server.SEAMService.removeSEContainer(I)I
com.android.server.SEAMService.setAMSLogLevel(Lcom/samsung/android/knox/ContextInfo;I)I
com.android.server.SEAMService.setSEAndroidLogDumpStateInclude(Lcom/samsung/android/knox/ContextInfo;Z)I
com.android.server.IcccManagerService.getDeviceStatus(I[B)[B
com.android.server.IcccManagerService.getSecureData(I)I
com.android.server.IcccManagerService.getTrustedBootData()I
com.android.server.IcccManagerService.setAttestationData([B)[B
com.android.server.IcccManagerService.setSecureData(II)I
com.android.server.emailksproxy.EmailKeystoreService.getKeystoreStatus()I
com.android.server.emailksproxy.EmailKeystoreService.grantAccessForAKS(ILjava/lang/String;)V
com.android.server.emailksproxy.EmailKeystoreService.installCACert(Lcom/samsung/android/knox/util/SemCertAndroidKeyStore;)I
com.android.server.emailksproxy.EmailKeystoreService.installCertificateInAndroidKeyStore(Lcom/samsung/android/knox/util/SemCertByte;Ljava/lang/String;[CZI)I
com.android.server.emailksproxy.EmailKeystoreService.isAliasExists(Ljava/lang/String;Z)I
com.android.server.spay.PaymentManagerService.getMeasurementFile()[B
com.android.server.spay.PaymentManagerService.registerSPayFW(Landroid/spay/PaymentTZServiceConfig;)Landroid/spay/PaymentTZServiceCommnInfo;
com.android.server.PersistentDataBlockService$1.isEnabled()Z
com.android.server.SemService.ICD()I
com.android.server.SemService.check_SeState([B[B)I
com.android.server.SemService.closeSpiDriver()I
com.android.server.SemService.close_Spi(I)I
com.android.server.SemService.continue_attestation(Ljava/lang/String;I[B)I
com.android.server.SemService.deactivate_Cards(I[Ljava/lang/String;[II)I
com.android.server.SemService.deactivate_CardsAID(II[Ljava/lang/String;[II)I
com.android.server.SemService.getAtr_Spi()I
com.android.server.SemService.getCPLC14mode()Ljava/lang/String;
com.android.server.SemService.getRestrictedCheck05mode()Ljava/lang/String;
com.android.server.SemService.get_AttackCountCheck([B)I
com.android.server.SemService.get_EnhancedACDump_Gemalto()V
com.android.server.SemService.get_HQMMemory([B)I
com.android.server.SemService.get_HWParamData([BI)I
com.android.server.SemService.get_pk([B)I
com.android.server.SemService.handle_CCM([BI)[Ljava/lang/String;
com.android.server.SemService.isLccmSwp()I
com.android.server.SemService.openSpiDriver()I
com.android.server.SemService.open_Spi(I)I
com.android.server.SemService.print_SeState()V
com.android.server.SemService.resetForCOSU()I
com.android.server.SemService.sem_factory()V
com.android.server.SemService.send_Data([BI[BI)I
com.android.server.SemService.start_attestation([BI[BI)I
com.android.server.SemService.start_request_credentials([B[BLjava/lang/String;[B)I
com.android.server.SemService.stop_request_credentials()V
com.android.server.enterprise.ccm.ClientCertificateManager.addPackageToExemptList(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)Z
com.android.server.enterprise.ccm.ClientCertificateManager.deleteCCMProfile(Lcom/samsung/android/knox/ContextInfo;)Z
com.android.server.enterprise.ccm.ClientCertificateManager.deleteCSRProfile(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)Z
com.android.server.enterprise.ccm.ClientCertificateManager.deleteCertificate(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)Z
com.android.server.enterprise.ccm.ClientCertificateManager.generateCSR(Lcom/samsung/android/knox/ContextInfo;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)[B
com.android.server.enterprise.ccm.ClientCertificateManager.generateCSRUsingByteArray(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;Ljava/lang/String;[BI)[B
com.android.server.enterprise.ccm.ClientCertificateManager.generateCSRUsingString(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)[B
com.android.server.enterprise.ccm.ClientCertificateManager.generateCSRUsingTemplate(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)[B
com.android.server.enterprise.ccm.ClientCertificateManager.generateKeyPair(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;I)[B
com.android.server.enterprise.ccm.ClientCertificateManager.getAliasesForCaller(Lcom/samsung/android/knox/ContextInfo;)Ljava/util/List;
com.android.server.enterprise.ccm.ClientCertificateManager.getAliasesForPackage(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)Ljava/util/List;
com.android.server.enterprise.ccm.ClientCertificateManager.getAliasesForWiFi()Ljava/util/List;
com.android.server.enterprise.ccm.ClientCertificateManager.getCCMProfile(Lcom/samsung/android/knox/ContextInfo;)Lcom/samsung/android/knox/keystore/CCMProfile;
com.android.server.enterprise.ccm.ClientCertificateManager.getCCMVersion()Ljava/lang/String;
com.android.server.enterprise.ccm.ClientCertificateManager.getCertificateAliases(Lcom/samsung/android/knox/ContextInfo;)Ljava/util/List;
com.android.server.enterprise.ccm.ClientCertificateManager.getCertificateAliasesHavingPrivateKey(Lcom/samsung/android/knox/ContextInfo;)Ljava/util/List;
com.android.server.enterprise.ccm.ClientCertificateManager.getDefaultCertificateAlias()Ljava/lang/String;
com.android.server.enterprise.ccm.ClientCertificateManager.getKeyChainMarkedAliases(Lcom/samsung/android/knox/ContextInfo;)Ljava/util/List;
com.android.server.enterprise.ccm.ClientCertificateManager.getSlotIdForCaller(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)J
com.android.server.enterprise.ccm.ClientCertificateManager.getSlotIdForPackage(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;Ljava/lang/String;)J
com.android.server.enterprise.ccm.ClientCertificateManager.getWifiAliasPreferredUid(Ljava/lang/String;)I
com.android.server.enterprise.ccm.ClientCertificateManager.hasGrant(Ljava/lang/String;)Z
com.android.server.enterprise.ccm.ClientCertificateManager.hasGrantWithCxt(Ljava/lang/String;Lcom/samsung/android/knox/ContextInfo;)Z
com.android.server.enterprise.ccm.ClientCertificateManager.insertOrUpdateCCMProfile(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/keystore/CCMProfile;)Z
com.android.server.enterprise.ccm.ClientCertificateManager.insertOrUpdateCertificateProfile(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/keystore/CertificateProfile;)Z
com.android.server.enterprise.ccm.ClientCertificateManager.installCertificate(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/keystore/CertificateProfile;[BLjava/lang/String;)Z
com.android.server.enterprise.ccm.ClientCertificateManager.installKeyPair(Lcom/samsung/android/knox/ContextInfo;[B[B[BLjava/lang/String;Ljava/lang/String;)Z
com.android.server.enterprise.ccm.ClientCertificateManager.installObject(Lcom/samsung/android/knox/ContextInfo;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;I[BLjava/lang/String;Z)I
com.android.server.enterprise.ccm.ClientCertificateManager.installObjectWithProfile(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/keystore/CertificateProfile;I[BLjava/lang/String;)Z
com.android.server.enterprise.ccm.ClientCertificateManager.installObjectWithType(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;I[BLjava/lang/String;)Z
com.android.server.enterprise.ccm.ClientCertificateManager.isAccessControlMethodPassword(Lcom/samsung/android/knox/ContextInfo;)Z
com.android.server.enterprise.ccm.ClientCertificateManager.isCCMEmptyForKeyChain(Lcom/samsung/android/knox/ContextInfo;)Z
com.android.server.enterprise.ccm.ClientCertificateManager.isCCMPolicyEnabledByAdmin(I)Z
com.android.server.enterprise.ccm.ClientCertificateManager.isCCMPolicyEnabledForCaller(Lcom/samsung/android/knox/ContextInfo;)Z
com.android.server.enterprise.ccm.ClientCertificateManager.isCCMPolicyEnabledForPackage(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)Z
com.android.server.enterprise.ccm.ClientCertificateManager.isCCMPolicyEnabledForUid(I)Z
com.android.server.enterprise.ccm.ClientCertificateManager.isKeyChainMarkedAlias(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)Z
com.android.server.enterprise.ccm.ClientCertificateManager.keychainMarkedReset(Lcom/samsung/android/knox/ContextInfo;)Z
com.android.server.enterprise.ccm.ClientCertificateManager.notifyLicenseStatus()Z
com.android.server.enterprise.ccm.ClientCertificateManager.registerForDefaultCertificate(Lcom/samsung/android/knox/ContextInfo;ILjava/lang/String;Ljava/lang/String;Z)I
com.android.server.enterprise.ccm.ClientCertificateManager.removeKeyPair(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)Z
com.android.server.enterprise.ccm.ClientCertificateManager.removePackageFromExemptList(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)Z
com.android.server.enterprise.ccm.ClientCertificateManager.setCCMProfile(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/keystore/CCMProfile;)Z
com.android.server.enterprise.ccm.ClientCertificateManager.setCSRProfile(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/keystore/CSRProfile;)Z
com.android.server.enterprise.ccm.ClientCertificateManager.setDefaultCCMProfile()Z
com.android.server.enterprise.ccm.ClientCertificateManager.setGrant(ILjava/lang/String;Z)V
com.android.server.enterprise.ccm.ClientCertificateManager.updateDBdata(Ljava/lang/String;Landroid/content/ContentValues;Landroid/content/ContentValues;)Z
com.android.server.enterprise.container.KnoxMUMRCPPolicyService.allowMoveAppsToContainer(Lcom/samsung/android/knox/ContextInfo;Z)Z
com.android.server.enterprise.container.KnoxMUMRCPPolicyService.allowMoveFilesToContainer(Lcom/samsung/android/knox/ContextInfo;Z)Z
com.android.server.enterprise.container.KnoxMUMRCPPolicyService.allowMoveFilesToOwner(Lcom/samsung/android/knox/ContextInfo;Z)Z
com.android.server.enterprise.container.KnoxMUMRCPPolicyService.allowShareClipboardDataToContainer(Lcom/samsung/android/knox/ContextInfo;Z)Z
com.android.server.enterprise.container.KnoxMUMRCPPolicyService.allowShareClipboardDataToOwner(Lcom/samsung/android/knox/ContextInfo;Z)Z
com.android.server.enterprise.container.KnoxMUMRCPPolicyService.getAllowChangeDataSyncPolicy(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;Ljava/lang/String;)Z
com.android.server.enterprise.container.KnoxMUMRCPPolicyService.getListFromAllowChangeDataSyncPolicy(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;Z)Ljava/util/List;
com.android.server.enterprise.container.KnoxMUMRCPPolicyService.getNotificationSyncPolicy(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
com.android.server.enterprise.container.KnoxMUMRCPPolicyService.getPackagesFromNotificationSyncPolicy(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;Ljava/lang/String;)Ljava/util/List;
com.android.server.enterprise.container.KnoxMUMRCPPolicyService.isMoveAppsToContainerAllowed(Lcom/samsung/android/knox/ContextInfo;)Z
com.android.server.enterprise.container.KnoxMUMRCPPolicyService.isMoveFilesToContainerAllowed(Lcom/samsung/android/knox/ContextInfo;)Z
com.android.server.enterprise.container.KnoxMUMRCPPolicyService.isMoveFilesToOwnerAllowed(Lcom/samsung/android/knox/ContextInfo;)Z
com.android.server.enterprise.container.KnoxMUMRCPPolicyService.isShareClipboardDataToContainerAllowed(Lcom/samsung/android/knox/ContextInfo;)Z
com.android.server.enterprise.container.KnoxMUMRCPPolicyService.isShareClipboardDataToOwnerAllowed(Lcom/samsung/android/knox/ContextInfo;)Z
com.android.server.enterprise.container.KnoxMUMRCPPolicyService.sendRCPPolicyChangeBroadcast(Ljava/lang/String;Ljava/lang/String;I)V
com.android.server.enterprise.container.KnoxMUMRCPPolicyService.sendRCPPolicyChangedBroadcast(I)V
com.android.server.enterprise.container.KnoxMUMRCPPolicyService.sendRCPPolicyChangedBroadcastToGearManager(Ljava/lang/String;I)V
com.android.server.enterprise.container.KnoxMUMRCPPolicyService.setAllowChangeDataSyncPolicy(Lcom/samsung/android/knox/ContextInfo;Ljava/util/List;Ljava/lang/String;Z)Z
com.android.server.enterprise.container.KnoxMUMRCPPolicyService.setNotificationSyncPolicy(Lcom/samsung/android/knox/ContextInfo;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;)Z
com.android.server.biometrics.BiometricService$BiometricServiceWrapper.canAuthenticateWithCrypto(Ljava/lang/String;J)I
com.android.server.biometrics.BiometricService$BiometricServiceWrapper.canAuthenticateWithUserId(Ljava/lang/String;I)I
com.android.server.LocationManagerService.getGPSUsingApps()Ljava/util/Map;
com.android.server.LocationManagerService.getKernelActiveSinceTime(Ljava/lang/String;)J
com.android.server.LocationManagerService.getKernelWakelockTime(Ljava/lang/String;)J
com.android.server.LocationManagerService.notifyNSFLP(Landroid/os/Message;)V
com.android.server.LocationManagerService.registerLctListener(II)V
com.android.server.LocationManagerService.requestToUpdate()V
com.android.server.LocationManagerService.setDataFromNSFLP(ILandroid/os/Bundle;)V
com.android.server.LocationManagerService.unregisterLctListener()V
com.samsung.android.knox.custom.KnoxCustomManagerService.addAutoCallNumber(Ljava/lang/String;II)I
com.samsung.android.knox.custom.KnoxCustomManagerService.addDexShortcut(IILandroid/content/ComponentName;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.addDexURLShortcut(IILjava/lang/String;Ljava/lang/String;Landroid/content/ComponentName;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.addDexURLShortcutExtend(IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/content/ComponentName;Landroid/os/ParcelFileDescriptor;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.addPackagesToUltraPowerSaving(Ljava/util/List;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.addSettingsTileBlacklist(Ljava/lang/String;)V
com.samsung.android.knox.custom.KnoxCustomManagerService.addShortcut(IIILjava/lang/String;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.addShortcutToHomeScreen(Lcom/samsung/android/knox/custom/ShortcutItem;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.addWidget(IIIIILjava/lang/String;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.addWidgetToHomeScreen(Lcom/samsung/android/knox/custom/WidgetItem;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.allowDexAutoOpenLastApp(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.checkEnterprisePermission(Ljava/lang/String;)Z
com.samsung.android.knox.custom.KnoxCustomManagerService.clearAnimation(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.clearDexLoadingLogo()I
com.samsung.android.knox.custom.KnoxCustomManagerService.deleteHomeScreenPage(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.dialEmergencyNumber(Ljava/lang/String;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.getAccessibilitySettingsItems()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getAirGestureOptionState(I)Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getAppBlockDownloadNamespaces()Ljava/util/List;
com.samsung.android.knox.custom.KnoxCustomManagerService.getAppBlockDownloadState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getAppsButtonState()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getAutoCallNumberAnswerMode(Ljava/lang/String;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.getAutoCallNumberDelay(Ljava/lang/String;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.getAutoCallNumberList()Ljava/util/List;
com.samsung.android.knox.custom.KnoxCustomManagerService.getAutoCallPickupState()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getAutoRotationState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getBackupRestoreState(I)Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getBatteryLevelColourItem()Lcom/samsung/android/knox/custom/StatusbarIconItem;
com.samsung.android.knox.custom.KnoxCustomManagerService.getCallScreenDisabledItems()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getChargerConnectionSoundEnabledState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getChargingLEDState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getDeviceSpeakerEnabledState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getDexForegroundModePackageList()Ljava/util/List;
com.samsung.android.knox.custom.KnoxCustomManagerService.getDexHDMIAutoEnterState()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getDexHomeAlignment()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getDexScreenTimeout()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getDisplayMirroringState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getEthernetConfigurationType()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getEthernetState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getExitUI(I)Ljava/lang/String;
com.samsung.android.knox.custom.KnoxCustomManagerService.getExtendedCallInfoState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getFavoriteApp(I)Ljava/lang/String;
com.samsung.android.knox.custom.KnoxCustomManagerService.getFavoriteAppsMaxCount()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getForceAutoShutDownState()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getForceAutoStartUpState()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getGearNotificationState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getHardKeyBlockState(II)I
com.samsung.android.knox.custom.KnoxCustomManagerService.getHardKeyIntentMode()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getHardKeyIntentState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getHardKeyReportState(II)I
com.samsung.android.knox.custom.KnoxCustomManagerService.getHideNotificationMessages()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getHomeActivity()Ljava/lang/String;
com.samsung.android.knox.custom.KnoxCustomManagerService.getHomeScreenMode()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getInfraredState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getInputMethodRestrictionState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getKeyboardMode()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getKeyboardModeOverriden(I)Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getLTESettingState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getLcdBacklightState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getLoadingLogoPath()Ljava/lang/String;
com.samsung.android.knox.custom.KnoxCustomManagerService.getLockScreenHiddenItems()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getLockScreenOverrideMode()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getLockScreenShortcut(I)Ljava/lang/String;
com.samsung.android.knox.custom.KnoxCustomManagerService.getMacAddress()Ljava/lang/String;
com.samsung.android.knox.custom.KnoxCustomManagerService.getMobileNetworkType()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getMotionControlState(I)Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getPackageVerifierState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getPowerDialogCustomItems()Ljava/util/List;
com.samsung.android.knox.custom.KnoxCustomManagerService.getPowerDialogCustomItemsState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getPowerDialogItems()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getPowerDialogOptionMode()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getPowerMenuLockedState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getPowerSavingMode()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getProKioskNotificationMessagesState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getProKioskPowerDialogCustomItems()Ljava/util/List;
com.samsung.android.knox.custom.KnoxCustomManagerService.getProKioskPowerDialogCustomItemsState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getProKioskState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getProKioskStatusBarClockState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getProKioskStatusBarIconsState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getProKioskStatusBarMode()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getProKioskString(I)Ljava/lang/String;
com.samsung.android.knox.custom.KnoxCustomManagerService.getProKioskUsbMassStorageState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getProKioskUsbNetAddress(I)Ljava/lang/String;
com.samsung.android.knox.custom.KnoxCustomManagerService.getProKioskUsbNetState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getProtectBatteryState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getQuickPanelButtons()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getQuickPanelEditMode()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getQuickPanelItems()Ljava/lang/String;
com.samsung.android.knox.custom.KnoxCustomManagerService.getRecentLongPressActivity()Ljava/lang/String;
com.samsung.android.knox.custom.KnoxCustomManagerService.getRecentLongPressMode()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getScreenOffOnHomeLongPressState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getScreenOffOnStatusBarDoubleTapState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getScreenTimeout()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getScreenWakeupOnPowerState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getSensorDisabled()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getSerialNumber()Ljava/lang/String;
com.samsung.android.knox.custom.KnoxCustomManagerService.getSettingsEnabledItems()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getSettingsHiddenState()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getSettingsTileBlacklist()Ljava/util/List;
com.samsung.android.knox.custom.KnoxCustomManagerService.getShowIMEWithHardKeyboard()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getStatusBarClockState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getStatusBarIconsState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getStatusBarMode()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getStatusBarNotificationsState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getStatusBarText()Ljava/lang/String;
com.samsung.android.knox.custom.KnoxCustomManagerService.getStatusBarTextScrollWidth()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getStatusBarTextSize()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getStatusBarTextStyle()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getSystemSoundsEnabledState()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getToastEnabledState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getToastGravity()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getToastGravityEnabledState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getToastGravityXOffset()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getToastGravityYOffset()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getToastShowPackageNameState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getTorchOnVolumeButtonsState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getUltraPowerSavingPackages()Ljava/util/List;
com.samsung.android.knox.custom.KnoxCustomManagerService.getUnlockSimOnBootState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getUnlockSimPin()Ljava/lang/String;
com.samsung.android.knox.custom.KnoxCustomManagerService.getUsbConnectionType()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getUsbConnectionTypeInternal()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getUsbMassStorageState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getUsbNetAddress(I)Ljava/lang/String;
com.samsung.android.knox.custom.KnoxCustomManagerService.getUsbNetState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getUsbNetStateInternal()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getUserInactivityTimeout()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getVibrationIntensity(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.getVolumeButtonRotationState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getVolumeControlStream()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getVolumeKeyAppState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getVolumeKeyAppsList()Ljava/util/List;
com.samsung.android.knox.custom.KnoxCustomManagerService.getVolumePanelEnabledState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getWifiAutoSwitchDelay()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getWifiAutoSwitchState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getWifiAutoSwitchThreshold()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getWifiConnectionMonitorState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getWifiFrequencyBand()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getWifiHotspotEnabledState()I
com.samsung.android.knox.custom.KnoxCustomManagerService.getWifiState()Z
com.samsung.android.knox.custom.KnoxCustomManagerService.getZeroPageState()I
com.samsung.android.knox.custom.KnoxCustomManagerService.isDexAutoOpenLastAppAllowed()I
com.samsung.android.knox.custom.KnoxCustomManagerService.powerOff()I
com.samsung.android.knox.custom.KnoxCustomManagerService.registerSystemUiCallback(Lcom/samsung/android/knox/custom/IKnoxCustomManagerSystemUiCallback;)Z
com.samsung.android.knox.custom.KnoxCustomManagerService.removeAutoCallNumber(Ljava/lang/String;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.removeDexShortcut(Landroid/content/ComponentName;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.removeDexURLShortcut(Ljava/lang/String;Landroid/content/ComponentName;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.removeFavoriteApp(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.removeKnoxCustomShortcutsFromHomeScreen()I
com.samsung.android.knox.custom.KnoxCustomManagerService.removeLockScreen()I
com.samsung.android.knox.custom.KnoxCustomManagerService.removePackagesFromUltraPowerSaving(Ljava/util/List;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.removeSettingsTileBlacklist(Ljava/lang/String;)V
com.samsung.android.knox.custom.KnoxCustomManagerService.removeShortcut(Ljava/lang/String;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.removeShortcutFromHomeScreen(ILjava/lang/String;I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.removeWidget(Ljava/lang/String;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.removeWidgetFromHomeScreen(Ljava/lang/String;IILandroid/content/Intent;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.sendDtmfTone(CI)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setAccessibilitySettingsItems(II)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setAdbState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setAirGestureOptionState(IZ)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setAppBlockDownloadNamespaces(Ljava/util/List;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setAppBlockDownloadState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setAppsButtonState(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setAudioVolume(II)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setAutoCallPickupState(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setAutoRotationState(ZI)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setBackupRestoreState(IZ)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setBatteryLevelColourItem(Lcom/samsung/android/knox/custom/StatusbarIconItem;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setBluetoothState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setBootingAnimation(Landroid/os/ParcelFileDescriptor;Landroid/os/ParcelFileDescriptor;Landroid/os/ParcelFileDescriptor;I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setBrightness(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setBrowserHomepage(Ljava/lang/String;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setCallScreenDisabledItems(ZI)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setChargerConnectionSoundEnabledState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setChargingLEDState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setCpuPowerSavingState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setDeveloperOptionsHidden()I
com.samsung.android.knox.custom.KnoxCustomManagerService.setDeviceSpeakerEnabledState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setDexForegroundModePackageList(ILjava/util/List;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setDexHDMIAutoEnterState(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setDexHomeAlignment(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setDexLoadingLogo(Landroid/os/ParcelFileDescriptor;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setDexScreenTimeout(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setDisplayMirroringState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setEthernetConfiguration(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setEthernetState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setExitUI(Ljava/lang/String;Ljava/lang/String;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setExtendedCallInfoState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setFavoriteApp(Ljava/lang/String;I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setFlightModeState(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setForceAutoShutDownState(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setForceAutoStartUpState(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setGearNotificationState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setHardKeyIntentMode(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setHardKeyIntentState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setHardKeyReportState(IIII)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setHideNotificationMessages(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setHomeActivity(Ljava/lang/String;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setHomeScreenMode(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setInfraredState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setInputMethod(Ljava/lang/String;Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setInputMethodRestrictionState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setKeyboardMode(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setKnoxCustomQSTileList(Ljava/lang/String;)Z
com.samsung.android.knox.custom.KnoxCustomManagerService.setLTESettingState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setLcdBacklightState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setLockScreenHiddenItems(ZI)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setLockScreenOverrideMode(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setLockScreenShortcut(ILjava/lang/String;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setLockscreenWallpaper(Ljava/lang/String;I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setMobileDataRoamingState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setMobileDataState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setMobileNetworkType(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setMotionControlState(IZ)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setMultiWindowState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setPackageVerifierState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setPassCode(Ljava/lang/String;Ljava/lang/String;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setPowerDialogCustomItems(Ljava/util/List;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setPowerDialogCustomItemsState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setPowerDialogItems(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setPowerDialogOptionMode(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setPowerMenuLockedState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setPowerSavingMode(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setProKioskNotificationMessagesState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setProKioskPowerDialogCustomItems(Ljava/util/List;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setProKioskPowerDialogCustomItemsState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setProKioskState(ZLjava/lang/String;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setProKioskStatusBarClockState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setProKioskStatusBarIconsState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setProKioskStatusBarMode(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setProKioskString(ILjava/lang/String;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setProKioskUsbMassStorageState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setProKioskUsbNetAddresses(Ljava/lang/String;Ljava/lang/String;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setProKioskUsbNetState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setProtectBatteryState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setQuickPanelButtons(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setQuickPanelEditMode(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setQuickPanelItems(Ljava/lang/String;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setQuickPanelItemsInternal(Landroid/os/Bundle;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setRecentLongPressActivity(Ljava/lang/String;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setRecentLongPressMode(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setScreenOffOnHomeLongPressState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setScreenOffOnStatusBarDoubleTapState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setScreenPowerSavingState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setScreenTimeout(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setScreenWakeupOnPowerState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setSensorDisabled(ZI)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setSettingsEnabledItems(ZI)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setSettingsHiddenState(ZI)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setShowIMEWithHardKeyboard(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setShuttingDownAnimation(Landroid/os/ParcelFileDescriptor;Landroid/os/ParcelFileDescriptor;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setStatusBarClockState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setStatusBarIconsState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setStatusBarMode(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setStatusBarNotificationsState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setStatusBarText(Ljava/lang/String;II)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setStatusBarTextScrollWidth(Ljava/lang/String;III)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setStayAwakeState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setSystemLocale(Ljava/lang/String;Ljava/lang/String;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setSystemRingtone(ILjava/lang/String;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setSystemSoundsEnabledState(II)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setSystemSoundsSilent()I
com.samsung.android.knox.custom.KnoxCustomManagerService.setToastEnabledState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setToastGravity(III)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setToastGravityEnabledState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setToastShowPackageNameState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setTorchOnVolumeButtonsState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setUnlockSimOnBootState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setUnlockSimPin(Ljava/lang/String;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setUsbConnectionType(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setUsbDeviceDefaultPackage(Landroid/hardware/usb/UsbDevice;Ljava/lang/String;I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setUsbMassStorageState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setUsbNetAddresses(Ljava/lang/String;Ljava/lang/String;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setUsbNetState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setUserInactivityTimeout(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setVibrationIntensity(II)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setVolumeButtonRotationState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setVolumeControlStream(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setVolumeKeyAppState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setVolumeKeyAppsList(Ljava/util/List;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setVolumePanelEnabledState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setWifiAutoSwitchDelay(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setWifiAutoSwitchState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setWifiAutoSwitchThreshold(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setWifiConnectionMonitorState(Z)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setWifiFrequencyBand(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setWifiHotspotEnabledState(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setWifiState(ZLjava/lang/String;Ljava/lang/String;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setWifiStateEap(ZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.setZeroPageState(I)I
com.samsung.android.knox.custom.KnoxCustomManagerService.startProKioskMode(Ljava/lang/String;Ljava/lang/String;)I
com.samsung.android.knox.custom.KnoxCustomManagerService.stayInDexForegroundMode(Landroid/content/ComponentName;)Z
com.samsung.android.knox.custom.KnoxCustomManagerService.stopProKioskMode(Ljava/lang/String;)I
com.android.server.enterprise.keystore.TimaKeystoreService.enableTimaKeystore(Lcom/samsung/android/knox/ContextInfo;Z)Z
com.android.server.enterprise.keystore.TimaKeystoreService.enableTimaKeystorePerApp(Lcom/samsung/android/knox/ContextInfo;Z)Z
com.android.server.enterprise.keystore.TimaKeystoreService.encryptPassword(Ljava/lang/String;)[C
com.android.server.enterprise.keystore.TimaKeystoreService.getContainerAdminDetails(IILandroid/os/Bundle;)Landroid/os/Bundle;
com.android.server.enterprise.keystore.TimaKeystoreService.isTimaKeyStoreDefaultForContainer(Lcom/samsung/android/knox/ContextInfo;)Z
com.android.server.enterprise.keystore.TimaKeystoreService.isTimaKeystoreEnabled(Lcom/samsung/android/knox/ContextInfo;)Z
com.android.server.enterprise.keystore.TimaKeystoreService.isTimaKeystoreEnabledForUKS(II)Z
com.android.server.enterprise.keystore.TimaKeystoreService.isTimaKeystoreEnabledInDB(Lcom/samsung/android/knox/ContextInfo;)Z
com.android.server.enterprise.keystore.TimaKeystoreService.isTimaKeystoreEnabledInternal(Lcom/samsung/android/knox/ContextInfo;)Z
com.android.server.DeviceRootKeyService.createServiceKeySession(Ljava/lang/String;ILcom/samsung/android/service/DeviceRootKeyService/Tlv;)[B
com.android.server.DeviceRootKeyService.doSelfTestProvServiceBlob(Ljava/lang/String;ILcom/samsung/android/service/DeviceRootKeyService/Tlv;)[B
com.android.server.DeviceRootKeyService.getDeviceInfo()[B
com.android.server.DeviceRootKeyService.getDeviceRootKeyCertificate(I)[B
com.android.server.DeviceRootKeyService.getDeviceRootKeyUID(I)Ljava/lang/String;
com.android.server.DeviceRootKeyService.isExistDeviceRootKey(I)Z
com.android.server.DeviceRootKeyService.isServiceReady()Z
com.android.server.DeviceRootKeyService.releaseServiceKeySession()I
com.android.server.DeviceRootKeyService.setDeviceRootKey([B)I
com.android.server.inputmethod.MultiClientInputMethodManagerService$ApiCallbacks.addServiceForDirectPenInput(Ljava/lang/String;Landroid/os/IBinder;)V
com.android.server.inputmethod.MultiClientInputMethodManagerService$ApiCallbacks.dismissAndShowAgainInputMethodPicker()V
com.android.server.inputmethod.MultiClientInputMethodManagerService$ApiCallbacks.getCurTokenDisplayId()I
com.android.server.inputmethod.MultiClientInputMethodManagerService$ApiCallbacks.getCurrentFocusDisplayID()I
com.android.server.inputmethod.MultiClientInputMethodManagerService$ApiCallbacks.getDexSettingsValue(Ljava/lang/String;Ljava/lang/String;)Z
com.android.server.inputmethod.MultiClientInputMethodManagerService$ApiCallbacks.getWACOMPen()Z
com.android.server.inputmethod.MultiClientInputMethodManagerService$ApiCallbacks.isAccessoryKeyboard()I
com.android.server.inputmethod.MultiClientInputMethodManagerService$ApiCallbacks.isCurrentInputMethodAsSamsungKeyboard()Z
com.android.server.inputmethod.MultiClientInputMethodManagerService$ApiCallbacks.isInputMethodShown()Z
com.android.server.inputmethod.MultiClientInputMethodManagerService$ApiCallbacks.minimizeSoftInput(Lcom/android/internal/view/IInputMethodClient;I)Z
com.android.server.inputmethod.MultiClientInputMethodManagerService$ApiCallbacks.setInputMethodSwitchDisable(Lcom/android/internal/view/IInputMethodClient;Z)V
com.android.server.inputmethod.MultiClientInputMethodManagerService$ApiCallbacks.undoMinimizeSoftInput()V
com.android.server.inputmethod.MultiClientInputMethodManagerService$ApiCallbacks.userActivity(JII)V
com.android.server.wifi.scanner.WifiScanningServiceImpl.setSimulatorData(Ljava/util/List;)V
com.android.server.wifi.scanner.WifiScanningServiceImpl.startAndStopSimulation(Z)V
com.samsung.android.smartbonding.SmartBondingService.getAllSmartBondingData()[J
com.samsung.android.smartbonding.SmartBondingService.getHttpLogEnabled()Z
com.samsung.android.smartbonding.SmartBondingService.getProxyInfo(I)[Ljava/lang/String;
com.samsung.android.smartbonding.SmartBondingService.getSBEnabled()Z
com.samsung.android.smartbonding.SmartBondingService.getSBInterface(I)Ljava/lang/String;
com.samsung.android.smartbonding.SmartBondingService.getSBInterfaceEx(II)Ljava/lang/String;
com.samsung.android.smartbonding.SmartBondingService.getSBInterfaceExForTrueAddress(IILjava/lang/String;)Ljava/lang/String;
com.samsung.android.smartbonding.SmartBondingService.getSBInterfaces()[Ljava/lang/String;
com.samsung.android.smartbonding.SmartBondingService.getSBInterfacesEnabled()Z
com.samsung.android.smartbonding.SmartBondingService.getSBUsageStatus(J)I
com.samsung.android.smartbonding.SmartBondingService.getSmartBondingData(I)[J
com.samsung.android.smartbonding.SmartBondingService.getWarningToastEnabled()Z
com.samsung.android.smartbonding.SmartBondingService.reportSBUsage(J[J)V
com.samsung.android.smartbonding.SmartBondingService.requestGetAllByName(JLjava/lang/String;)V
com.samsung.android.smartbonding.SmartBondingService.responseGetAllByName(J)[Ljava/lang/String;
com.samsung.android.smartbonding.SmartBondingService.setHttpLogEnabled(Z)V
com.samsung.android.smartbonding.SmartBondingService.setSBEnabled(Z)V
com.samsung.android.smartbonding.SmartBondingService.setSBUsageStatus(IJ)V
com.samsung.android.smartbonding.SmartBondingService.setWarningToast(Z)V
com.samsung.android.smartbonding.SmartBondingService.startSBUsage(JJJLjava/lang/String;Ljava/lang/String;)Z
com.samsung.android.smartbonding.SmartBondingService.stopSBUsage(J)I
com.samsung.android.smartbonding.SmartBondingService.stopSBUsageWithReason(JI)I
com.samsung.android.smartbonding.SmartBondingService.submitMultiSocketData([J[J)V
com.android.server.SdpLogService.enqPayload(Ljava/lang/String;)V
com.android.server.ethernet.EthernetServiceImpl.UpdateEthDevInfo(Landroid/net/EthernetDevInfo;ILandroid/net/ProxyInfo;)V
com.android.server.ethernet.EthernetServiceImpl.getSavedEthConfig()Landroid/net/EthernetDevInfo;
com.android.server.ethernet.EthernetServiceImpl.getSavedProxyInfo(Ljava/lang/String;)Landroid/net/ProxyInfo;
com.android.server.ethernet.EthernetServiceImpl.getSavedProxySettings(Ljava/lang/String;)I
com.android.server.ethernet.EthernetServiceImpl.getUserDisabled()Z
com.android.server.ethernet.EthernetServiceImpl.isEthConnected()Z
com.android.server.ethernet.EthernetServiceImpl.isEthernetTethering()Z
com.android.server.ethernet.EthernetServiceImpl.setUserDisabled(Z)V
com.android.server.am.BatteryStatsService.noteBleDutyScanStarted(Landroid/os/WorkSource;ZI)V
com.android.server.am.BatteryStatsService.noteBleDutyScanStopped(Landroid/os/WorkSource;ZI)V
com.android.server.am.BatteryStatsService.noteDualScreenState(I)V
com.android.server.am.BatteryStatsService.noteMobileRadioStateFor5G(Z)V
com.android.server.am.BatteryStatsService.noteStartGps(I)V
com.android.server.am.BatteryStatsService.noteStartTxPowerSharing()V
com.android.server.am.BatteryStatsService.noteStopGps(I)V
com.android.server.am.BatteryStatsService.noteStopTxPowerSharing()V
com.android.server.am.BatteryStatsService.noteWifiApMode(Z)V
com.android.server.am.BatteryStatsService.setBatteryState(IIIIIIIIIIIIZ)V
com.android.server.am.BatteryStatsService.setTemperatureNCurrent(IIII)V
com.android.server.am.BatteryStatsService.updateForegroundAppEnergyInfo(Ljava/util/List;)V
com.android.internal.telephony.UiccPhoneBookController.getAdnLikesInfo(I)[I
com.android.internal.telephony.UiccPhoneBookController.getAdnLikesInfoForSubscriber(II)[I
com.android.internal.telephony.UiccPhoneBookController.getAdnLikesSimStatusInfo(I)I
com.android.internal.telephony.UiccPhoneBookController.getAdnLikesSimStatusInfoForSubscriber(II)I
com.android.internal.telephony.UiccPhoneBookController.getAdnRecordsInEfInit(I)Ljava/util/List;
com.android.internal.telephony.UiccPhoneBookController.getAdnRecordsInEfInitForSubscriber(II)Ljava/util/List;
com.android.internal.telephony.UiccPhoneBookController.getUsimPBCapaInfo()Lcom/android/internal/telephony/uicc/UsimPhonebookCapaInfo;
com.android.internal.telephony.UiccPhoneBookController.getUsimPBCapaInfoForSubscriber(I)Lcom/android/internal/telephony/uicc/UsimPhonebookCapaInfo;
com.android.internal.telephony.UiccPhoneBookController.updateAdnRecordsInEfByIndexUsingAR(ILcom/android/internal/telephony/uicc/AdnRecord;ILjava/lang/String;)I
com.android.internal.telephony.UiccPhoneBookController.updateAdnRecordsInEfByIndexUsingARnSubId(IILcom/android/internal/telephony/uicc/AdnRecord;ILjava/lang/String;)I
com.android.internal.telephony.UiccPhoneBookController.updateAdnRecordsWithEmailInEfByIndex(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)I
com.android.internal.telephony.UiccPhoneBookController.updateAdnRecordsWithEmailInEfByIndexForSubscriber(IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)I
com.samsung.android.server.virtualspace.VSManagerService.connect(Landroid/os/IBinder;)Lcom/samsung/android/virtualspace/IVSSession;
com.samsung.android.server.virtualspace.VSManagerService.getVersion()Ljava/lang/String;
com.android.server.net.NetworkStatsService.getIntervalUsageForUrsp(ILjava/lang/String;IJJ)J
com.android.server.net.NetworkStatsService.getNetworkStatsVideoCall(II)Landroid/net/NetworkStats;
com.android.server.net.NetworkStatsService.isDuringVideoCall()Z
com.android.server.net.NetworkStatsService.startNetworkStatsOnPorts(Ljava/lang/String;II)V
com.android.server.net.NetworkStatsService.stopNetworkStatsOnPorts(Ljava/lang/String;II)V
com.android.server.enterprise.billing.EnterpriseBillingPolicy.activateProfile(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;Z)Z
com.android.server.enterprise.billing.EnterpriseBillingPolicy.addProfile(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/net/billing/EnterpriseBillingProfile;)Z
com.android.server.enterprise.billing.EnterpriseBillingPolicy.addProfileForCurrentContainer(Lcom/samsung/android/knox/net/billing/EnterpriseBillingProfile;)Z
com.android.server.enterprise.billing.EnterpriseBillingPolicy.addVpnToBillingProfile(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z
com.android.server.enterprise.billing.EnterpriseBillingPolicy.addVpnToBillingProfileForCurrentContainer(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z
com.android.server.enterprise.billing.EnterpriseBillingPolicy.allowRoaming(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;Z)Z
com.android.server.enterprise.billing.EnterpriseBillingPolicy.allowWifiFallback(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;Z)V
com.android.server.enterprise.billing.EnterpriseBillingPolicy.disableProfile(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)Z
com.android.server.enterprise.billing.EnterpriseBillingPolicy.disableProfileForApps(Lcom/samsung/android/knox/ContextInfo;Ljava/util/List;)Z
com.android.server.enterprise.billing.EnterpriseBillingPolicy.disableProfileForContainer(Lcom/samsung/android/knox/ContextInfo;)Z
com.android.server.enterprise.billing.EnterpriseBillingPolicy.disableProfileForCurrentContainer()Z
com.android.server.enterprise.billing.EnterpriseBillingPolicy.enableProfileForApps(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;Ljava/util/List;)Z
com.android.server.enterprise.billing.EnterpriseBillingPolicy.enableProfileForContainer(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)Z
com.android.server.enterprise.billing.EnterpriseBillingPolicy.enableProfileForCurrentContainer(Ljava/lang/String;)Z
com.android.server.enterprise.billing.EnterpriseBillingPolicy.getApplicationsUsingProfile(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)Ljava/util/List;
com.android.server.enterprise.billing.EnterpriseBillingPolicy.getAvailableProfiles(Lcom/samsung/android/knox/ContextInfo;)Ljava/util/List;
com.android.server.enterprise.billing.EnterpriseBillingPolicy.getAvailableProfilesForCaller()Ljava/util/List;
com.android.server.enterprise.billing.EnterpriseBillingPolicy.getContainersUsingProfile(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)Ljava/util/List;
com.android.server.enterprise.billing.EnterpriseBillingPolicy.getProfileDetails(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)Lcom/samsung/android/knox/net/billing/EnterpriseBillingProfile;
com.android.server.enterprise.billing.EnterpriseBillingPolicy.getProfileForApplication(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)Lcom/samsung/android/knox/net/billing/EnterpriseBillingProfile;
com.android.server.enterprise.billing.EnterpriseBillingPolicy.getProfileForContainer(Lcom/samsung/android/knox/ContextInfo;)Lcom/samsung/android/knox/net/billing/EnterpriseBillingProfile;
com.android.server.enterprise.billing.EnterpriseBillingPolicy.getVpnsBoundToProfile(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)Ljava/util/List;
com.android.server.enterprise.billing.EnterpriseBillingPolicy.isProfileActive(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)Z
com.android.server.enterprise.billing.EnterpriseBillingPolicy.isProfileActiveByCaller(Ljava/lang/String;)Z
com.android.server.enterprise.billing.EnterpriseBillingPolicy.isProfileEnabled(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)Z
com.android.server.enterprise.billing.EnterpriseBillingPolicy.isProfileTurnedOn(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)Z
com.android.server.enterprise.billing.EnterpriseBillingPolicy.isRoamingAllowed(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)Z
com.android.server.enterprise.billing.EnterpriseBillingPolicy.isWifiFallbackAllowed(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)Z
com.android.server.enterprise.billing.EnterpriseBillingPolicy.removeProfile(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)Z
com.android.server.enterprise.billing.EnterpriseBillingPolicy.removeProfileForCurrentContainer(Ljava/lang/String;)Z
com.android.server.enterprise.billing.EnterpriseBillingPolicy.removeVpnFromBillingProfile(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;Ljava/lang/String;)Z
com.android.server.enterprise.billing.EnterpriseBillingPolicy.removeVpnFromBillingProfileForCurrentContainer(Ljava/lang/String;)Z
com.android.server.enterprise.billing.EnterpriseBillingPolicy.turnOffProfile(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)Z
com.android.server.enterprise.billing.EnterpriseBillingPolicy.turnOnProfile(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)Z
com.android.server.enterprise.billing.EnterpriseBillingPolicy.updateProfile(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/net/billing/EnterpriseBillingProfile;)Z
com.att.iqi.IQIServiceBroker$BinderService.getTimestamp()J
com.att.iqi.IQIServiceBroker$BinderService.registerMetricQueryCallback(Lcom/att/iqi/lib/Metric$ID;Lcom/att/iqi/IMetricQueryCallback;)V
com.att.iqi.IQIServiceBroker$BinderService.registerMetricSourcingCallback(Lcom/att/iqi/lib/Metric$ID;Lcom/att/iqi/IMetricSourcingCallback;)V
com.att.iqi.IQIServiceBroker$BinderService.registerProfileChangedCallback(Lcom/att/iqi/IProfileChangedCallback;)V
com.att.iqi.IQIServiceBroker$BinderService.registerServiceChangedCallback(Lcom/att/iqi/IServiceStateChangeCallback;)V
com.att.iqi.IQIServiceBroker$BinderService.shouldSubmitMetric(Lcom/att/iqi/lib/Metric$ID;)Z
com.att.iqi.IQIServiceBroker$BinderService.submitMetric(Lcom/att/iqi/lib/Metric;)V
com.att.iqi.IQIServiceBroker$BinderService.unregisterMetricQueryCallback(Lcom/att/iqi/lib/Metric$ID;Lcom/att/iqi/IMetricQueryCallback;)V
com.att.iqi.IQIServiceBroker$BinderService.unregisterMetricSourcingCallback(Lcom/att/iqi/lib/Metric$ID;Lcom/att/iqi/IMetricSourcingCallback;)V
com.att.iqi.IQIServiceBroker$BinderService.unregisterProfileChangedCallback(Lcom/att/iqi/IProfileChangedCallback;)V
com.att.iqi.IQIServiceBroker$BinderService.unregisterServiceChangedCallback(Lcom/att/iqi/IServiceStateChangeCallback;)V
com.android.internal.telephony.PhoneSubInfoController.clearMwiNotificationAndVoicemailCount(ILjava/lang/String;)V
com.android.internal.telephony.PhoneSubInfoController.getBtid()Ljava/lang/String;
com.android.internal.telephony.PhoneSubInfoController.getClirSetting(I)I
com.android.internal.telephony.PhoneSubInfoController.getDataRoamingEnabled()Z
com.android.internal.telephony.PhoneSubInfoController.getDataRoamingEnabledUsingSubID(I)Z
com.android.internal.telephony.PhoneSubInfoController.getDataServiceState()I
com.android.internal.telephony.PhoneSubInfoController.getDataServiceStateUsingSubId(I)I
com.android.internal.telephony.PhoneSubInfoController.getDataStateSimSlot(I)I
com.android.internal.telephony.PhoneSubInfoController.getDrxMode()I
com.android.internal.telephony.PhoneSubInfoController.getGroupIdLevel2ForSubscriber(ILjava/lang/String;)Ljava/lang/String;
com.android.internal.telephony.PhoneSubInfoController.getHomePlmns(I)[Ljava/lang/String;
com.android.internal.telephony.PhoneSubInfoController.getImsRegisteredFeature()I
com.android.internal.telephony.PhoneSubInfoController.getKeyLifetime()Ljava/lang/String;
com.android.internal.telephony.PhoneSubInfoController.getPsismsc(Ljava/lang/String;)[B
com.android.internal.telephony.PhoneSubInfoController.getPsismscWithPhoneId(ILjava/lang/String;)[B
com.android.internal.telephony.PhoneSubInfoController.getRand()[B
com.android.internal.telephony.PhoneSubInfoController.getSimEsnMe(I)Ljava/lang/String;
com.android.internal.telephony.PhoneSubInfoController.getSubscriberIdForUiccAppType(IILjava/lang/String;)Ljava/lang/String;
com.android.internal.telephony.PhoneSubInfoController.getUwbTimer()I
com.android.internal.telephony.PhoneSubInfoController.hasCall(Ljava/lang/String;)Z
com.android.internal.telephony.PhoneSubInfoController.isGbaSupported()Z
com.android.internal.telephony.PhoneSubInfoController.isGbaSupportedForSubscriber(I)Z
com.android.internal.telephony.PhoneSubInfoController.isSmoveripSupported(Ljava/lang/String;)Z
com.android.internal.telephony.PhoneSubInfoController.setDataRoamingEnabled(Z)V
com.android.internal.telephony.PhoneSubInfoController.setDrxMode(I)Z
com.android.internal.telephony.PhoneSubInfoController.setPcoValue(IILjava/lang/String;)V
com.android.internal.telephony.PhoneSubInfoController.setUwbTimer(I)Z
com.android.internal.telephony.SubscriptionController.activateSubId(I)V
com.android.internal.telephony.SubscriptionController.deactivateSubId(I)V
com.android.server.wm.WindowManagerService.addHighRefreshRatePackage(Ljava/lang/String;)V
com.android.server.wm.WindowManagerService.changeDisplayScale(FFFZLandroid/view/IInputFilter;)V
com.android.server.wm.WindowManagerService.clearForcedDisplaySizeDensity(I)V
com.android.server.wm.WindowManagerService.closeSystemDialogsInDisplay(Ljava/lang/String;I)V
com.android.server.wm.WindowManagerService.dispatchSmartClipRemoteRequest(IILcom/samsung/android/content/smartclip/SmartClipRemoteRequestInfo;Landroid/os/IBinder;)V
com.android.server.wm.WindowManagerService.enableHighRefreshRateOnAnimating(Z)V
com.android.server.wm.WindowManagerService.getAmbientBrightnessThreshold()Ljava/lang/String;
com.android.server.wm.WindowManagerService.getDisplayBrightnessThreshold()Ljava/lang/String;
com.android.server.wm.WindowManagerService.getRotationLockOrientation()I
com.android.server.wm.WindowManagerService.getServiceVersion()I
com.android.server.wm.WindowManagerService.getTopFocusedDisplayId()I
com.android.server.wm.WindowManagerService.getUserDisplayDensity()I
com.android.server.wm.WindowManagerService.getUserDisplaySize(Landroid/graphics/Point;)V
com.android.server.wm.WindowManagerService.getVisibleWindowInfo()Ljava/util/List;
com.android.server.wm.WindowManagerService.getWinScopeTracingStatus()Ljava/lang/String;
com.android.server.wm.WindowManagerService.isEnabledHighRefreshRateOnAnimating()Z
com.android.server.wm.WindowManagerService.isFolded()Z
com.android.server.wm.WindowManagerService.isKeyguardShowingAndNotOccluded()Z
com.android.server.wm.WindowManagerService.isMaxAspectComponent(Landroid/content/ComponentName;I)I
com.android.server.wm.WindowManagerService.isMaxAspectPackage(Ljava/lang/String;I)I
com.android.server.wm.WindowManagerService.isMetaKeyEventRequested(Landroid/content/ComponentName;)Z
com.android.server.wm.WindowManagerService.isSupportFoldSDK()Z
com.android.server.wm.WindowManagerService.isSystemKeyEventRequested(ILandroid/content/ComponentName;)Z
com.android.server.wm.WindowManagerService.isTableMode()Z
com.android.server.wm.WindowManagerService.moveDisplayToTop(ILjava/lang/String;)V
com.android.server.wm.WindowManagerService.registerFoldStateChangedCallback(Landroid/view/IFoldStateChangedCallback;)V
com.android.server.wm.WindowManagerService.registerOneHandOpWatcher(Lcom/samsung/android/onehandop/IOneHandOpWatcher;)V
com.android.server.wm.WindowManagerService.removeHighRefreshRatePackage(Ljava/lang/String;)V
com.android.server.wm.WindowManagerService.requestMetaKeyEvent(Landroid/content/ComponentName;Z)V
com.android.server.wm.WindowManagerService.requestSystemKeyEvent(ILandroid/content/ComponentName;Z)Z
com.android.server.wm.WindowManagerService.requestToShowChangeAspectRatioGuide(Ljava/lang/String;IZILandroid/os/IBinder;)V
com.android.server.wm.WindowManagerService.setAmbientBrightnessThreshold(Ljava/lang/String;)V
com.android.server.wm.WindowManagerService.setDeadzoneHole(Landroid/os/Bundle;)V
com.android.server.wm.WindowManagerService.setDisplayBrightnessThreshold(Ljava/lang/String;)V
com.android.server.wm.WindowManagerService.setForcedDisplaySizeDensity(IIIIZI)V
com.android.server.wm.WindowManagerService.setMaxAspectPackage(Ljava/lang/String;IZZ)V
com.android.server.wm.WindowManagerService.setPendingIntentAfterUnlock(Landroid/app/PendingIntent;Landroid/content/Intent;)V
com.android.server.wm.WindowManagerService.startAlwaysWinScopeTracing()V
com.android.server.wm.WindowManagerService.startSurfaceAnimation(Landroid/os/IBinder;Ljava/lang/String;)V
com.android.server.wm.WindowManagerService.takeScreenshotToTargetWindow(IIZLandroid/graphics/Rect;IIZI)Landroid/graphics/Bitmap;
com.android.server.wm.WindowManagerService.unregisterOneHandOpWatcher(Lcom/samsung/android/onehandop/IOneHandOpWatcher;)V
com.android.server.wm.WindowManagerService.updateScreenshotPolicy(I)V
com.android.server.wm.WindowManagerService.updateTaskPositionInTaskBar(Ljava/util/Map;)V
com.android.server.backup.Trampoline.fullBackupCustomized(ILjava/lang/String;ZZZZZZZ[Ljava/lang/String;ZLjava/lang/String;ZLandroid/app/backup/IMemorySaverBackupRestoreObserver;)V
com.android.server.backup.Trampoline.fullRestoreCustomized(ILjava/lang/String;ZLjava/lang/String;Landroid/app/backup/IMemorySaverBackupRestoreObserver;)V
com.android.server.backup.Trampoline.isSubUserSupported()Z
com.android.server.backup.Trampoline.semBackupPackage(Landroid/os/ParcelFileDescriptor;[Ljava/lang/String;Ljava/lang/String;I)Ljava/util/Map;
com.android.server.backup.Trampoline.semBackupPackageAsUser(Landroid/os/ParcelFileDescriptor;[Ljava/lang/String;Ljava/lang/String;II)Z
com.android.server.backup.Trampoline.semRestorePackage(Landroid/os/ParcelFileDescriptor;Ljava/lang/String;)V
com.android.server.backup.Trampoline.semRestorePackageAsUser(Landroid/os/ParcelFileDescriptor;Ljava/lang/String;I)Z
com.android.server.enterprise.EnterpriseDeviceManagerService.activateAdminForUser(Landroid/content/ComponentName;ZI)V
com.android.server.enterprise.EnterpriseDeviceManagerService.activateDevicePermissions(Ljava/util/List;)Z
com.android.server.enterprise.EnterpriseDeviceManagerService.addAuthorizedUid(II)Z
com.android.server.enterprise.EnterpriseDeviceManagerService.addProxyAdmin(Landroid/app/admin/ProxyDeviceAdminInfo;ILandroid/content/ComponentName;I)V
com.android.server.enterprise.EnterpriseDeviceManagerService.captureUmcLogs(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;Ljava/util/List;)[B
com.android.server.enterprise.EnterpriseDeviceManagerService.configureContainerAdminForMigration(Z)Z
com.android.server.enterprise.EnterpriseDeviceManagerService.deactivateAdminForUser(Landroid/content/ComponentName;I)V
com.android.server.enterprise.EnterpriseDeviceManagerService.disableConstrainedState(Lcom/samsung/android/knox/ContextInfo;)Z
com.android.server.enterprise.EnterpriseDeviceManagerService.enableConstrainedState(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)Z
com.android.server.enterprise.EnterpriseDeviceManagerService.enforceActiveAdminPermission(Ljava/util/List;)V
com.android.server.enterprise.EnterpriseDeviceManagerService.enforceActiveAdminPermissionByContext(Lcom/samsung/android/knox/ContextInfo;Ljava/util/List;)Lcom/samsung/android/knox/ContextInfo;
com.android.server.enterprise.EnterpriseDeviceManagerService.enforceComponentCheck(Lcom/samsung/android/knox/ContextInfo;Landroid/content/ComponentName;)V
com.android.server.enterprise.EnterpriseDeviceManagerService.enforceContainerOwnerShipPermissionByContext(Lcom/samsung/android/knox/ContextInfo;Ljava/util/List;)Lcom/samsung/android/knox/ContextInfo;
com.android.server.enterprise.EnterpriseDeviceManagerService.enforceDoPoOnlyPermissionByContext(Lcom/samsung/android/knox/ContextInfo;Ljava/util/List;)Lcom/samsung/android/knox/ContextInfo;
com.android.server.enterprise.EnterpriseDeviceManagerService.enforceOwnerOnlyAndActiveAdminPermission(Lcom/samsung/android/knox/ContextInfo;Ljava/util/List;)Lcom/samsung/android/knox/ContextInfo;
com.android.server.enterprise.EnterpriseDeviceManagerService.enforceOwnerOnlyPermissionByContext(Lcom/samsung/android/knox/ContextInfo;Ljava/util/List;)Lcom/samsung/android/knox/ContextInfo;
com.android.server.enterprise.EnterpriseDeviceManagerService.enforcePermissionByContext(Lcom/samsung/android/knox/ContextInfo;Ljava/util/List;)Lcom/samsung/android/knox/ContextInfo;
com.android.server.enterprise.EnterpriseDeviceManagerService.getActiveAdminComponent()Landroid/content/ComponentName;
com.android.server.enterprise.EnterpriseDeviceManagerService.getActiveAdmins(I)Ljava/util/List;
com.android.server.enterprise.EnterpriseDeviceManagerService.getActiveAdminsInfo(I)Ljava/util/List;
com.android.server.enterprise.EnterpriseDeviceManagerService.getAdminContextIfCallerInCertWhiteList(Ljava/lang/String;)Lcom/samsung/android/knox/ContextInfo;
com.android.server.enterprise.EnterpriseDeviceManagerService.getAdminRemovable(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)Z
com.android.server.enterprise.EnterpriseDeviceManagerService.getAdminUidForAuthorizedUid(I)I
com.android.server.enterprise.EnterpriseDeviceManagerService.getAuthorizedUidForAdminUid(I)I
com.android.server.enterprise.EnterpriseDeviceManagerService.getConstrainedState()I
com.android.server.enterprise.EnterpriseDeviceManagerService.getKPUPackageName()Ljava/lang/String;
com.android.server.enterprise.EnterpriseDeviceManagerService.getMyKnoxAdmin(Lcom/samsung/android/knox/ContextInfo;)Ljava/lang/String;
com.android.server.enterprise.EnterpriseDeviceManagerService.getProxyAdmins(I)Ljava/util/List;
com.android.server.enterprise.EnterpriseDeviceManagerService.getRemoveWarning(Landroid/content/ComponentName;Landroid/os/RemoteCallback;)V
com.android.server.enterprise.EnterpriseDeviceManagerService.getUserStatus(I)I
com.android.server.enterprise.EnterpriseDeviceManagerService.hasAnyActiveAdmin()Z
com.android.server.enterprise.EnterpriseDeviceManagerService.hasGrantedPolicy(Landroid/content/ComponentName;I)Z
com.android.server.enterprise.EnterpriseDeviceManagerService.isAdminActive(Landroid/content/ComponentName;)Z
com.android.server.enterprise.EnterpriseDeviceManagerService.isAdminRemovable(Landroid/content/ComponentName;)Z
com.android.server.enterprise.EnterpriseDeviceManagerService.isAdminRemovableInternal(Landroid/content/ComponentName;I)Z
com.android.server.enterprise.EnterpriseDeviceManagerService.isCallerValidKPU(Lcom/samsung/android/knox/ContextInfo;)Z
com.android.server.enterprise.EnterpriseDeviceManagerService.isMdmAdminPresent()Z
com.android.server.enterprise.EnterpriseDeviceManagerService.isMdmAdminPresentAsUser(I)Z
com.android.server.enterprise.EnterpriseDeviceManagerService.isMigrationStateNOK()Z
com.android.server.enterprise.EnterpriseDeviceManagerService.isRestrictedByConstrainedState(I)Z
com.android.server.enterprise.EnterpriseDeviceManagerService.migrateApplicationDisablePolicy(I)Z
com.android.server.enterprise.EnterpriseDeviceManagerService.migrateEnterpriseContainer(IZ)Z
com.android.server.enterprise.EnterpriseDeviceManagerService.packageHasActiveAdmins(Ljava/lang/String;)Z
com.android.server.enterprise.EnterpriseDeviceManagerService.packageHasActiveAdminsAsUser(Ljava/lang/String;I)Z
com.android.server.enterprise.EnterpriseDeviceManagerService.readUmcEnrollmentData(Lcom/samsung/android/knox/ContextInfo;)Ljava/lang/String;
com.android.server.enterprise.EnterpriseDeviceManagerService.reconcileAdmin(Landroid/content/ComponentName;I)V
com.android.server.enterprise.EnterpriseDeviceManagerService.removeActiveAdmin(Landroid/content/ComponentName;)V
com.android.server.enterprise.EnterpriseDeviceManagerService.removeActiveAdminFromDpm(Landroid/content/ComponentName;I)V
com.android.server.enterprise.EnterpriseDeviceManagerService.removeAuthorizedUid(II)Z
com.android.server.enterprise.EnterpriseDeviceManagerService.removeProxyAdmin(I)V
com.android.server.enterprise.EnterpriseDeviceManagerService.selfUpdateAdmin(Ljava/lang/String;)I
com.android.server.enterprise.EnterpriseDeviceManagerService.sendIntent(I)V
com.android.server.enterprise.EnterpriseDeviceManagerService.setActiveAdmin(Landroid/content/ComponentName;Z)V
com.android.server.enterprise.EnterpriseDeviceManagerService.setActiveAdminSilent(Landroid/content/ComponentName;)V
com.android.server.enterprise.EnterpriseDeviceManagerService.setAdminRemovable(Lcom/samsung/android/knox/ContextInfo;ZLjava/lang/String;)Z
com.android.server.enterprise.EnterpriseDeviceManagerService.setB2BMode(Z)I
com.android.server.enterprise.EnterpriseDeviceManagerService.setMyKnoxAdmin(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)Z
com.android.server.enterprise.EnterpriseDeviceManagerService.startDualDARServices()V
com.android.server.enterprise.EnterpriseDeviceManagerService.updateProxyAdmin(Landroid/app/admin/ProxyDeviceAdminInfo;ILandroid/content/ComponentName;I)V
com.android.server.enterprise.EnterpriseDeviceManagerService.writeUmcEnrollmentData(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)Z
com.samsung.ucm.ucmservice.CredentialManagerService.APDUCommand(Ljava/lang/String;[BLandroid/os/Bundle;)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.authenticatePin(Ljava/lang/String;)I
com.samsung.ucm.ucmservice.CredentialManagerService.changePin(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.configureKeyguardSettings(ILjava/lang/String;)Z
com.samsung.ucm.ucmservice.CredentialManagerService.configureODESettings(Ljava/lang/String;Landroid/os/Bundle;Ljava/lang/String;)I
com.samsung.ucm.ucmservice.CredentialManagerService.containsAlias(Ljava/lang/String;I)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.createSecureChannel(ILandroid/os/Bundle;)Lcom/samsung/android/knox/ucm/core/ApduMessage;
com.samsung.ucm.ucmservice.CredentialManagerService.decrypt(Ljava/lang/String;[BLjava/lang/String;)Lcom/samsung/android/knox/ucm/core/ucmRetParcelable;
com.samsung.ucm.ucmservice.CredentialManagerService.delete(Ljava/lang/String;)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.deleteCertificate(Ljava/lang/String;I)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.destroySecureChannel()I
com.samsung.ucm.ucmservice.CredentialManagerService.generateDek(Ljava/lang/String;)Lcom/samsung/android/knox/ucm/core/ucmRetParcelable;
com.samsung.ucm.ucmservice.CredentialManagerService.generateKeyPair(Ljava/lang/String;Ljava/lang/String;ILandroid/os/Bundle;)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.generateKeyPairInternal(Ljava/lang/String;Ljava/lang/String;ILandroid/os/Bundle;)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.generateKeyguardPassword(ILjava/lang/String;Landroid/os/Bundle;)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.generateSecureRandom(Ljava/lang/String;I[B)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.generateWrappedDek(Ljava/lang/String;)Lcom/samsung/android/knox/ucm/core/ucmRetParcelable;
com.samsung.ucm.ucmservice.CredentialManagerService.getAdminConfigureBundleFromCs(IILjava/lang/String;)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.getAgentInfo(Ljava/lang/String;)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.getCertificateChain(Ljava/lang/String;)Lcom/samsung/android/knox/ucm/core/ucmRetParcelable;
com.samsung.ucm.ucmservice.CredentialManagerService.getConfigureBundleFromCs(ILjava/lang/String;)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.getCredentialStorageProperty(ILjava/lang/String;Landroid/os/Bundle;I)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.getDek(Ljava/lang/String;)Lcom/samsung/android/knox/ucm/core/ucmRetParcelable;
com.samsung.ucm.ucmservice.CredentialManagerService.getDekForVold(Ljava/lang/String;[B)Lcom/samsung/android/knox/ucm/core/ucmRetParcelable;
com.samsung.ucm.ucmservice.CredentialManagerService.getDekForVoldInternalKey(Ljava/lang/String;[B)Lcom/samsung/android/knox/ucm/core/ucmRetParcelable;
com.samsung.ucm.ucmservice.CredentialManagerService.getDetailErrorMessage(Ljava/lang/String;I)Ljava/lang/String;
com.samsung.ucm.ucmservice.CredentialManagerService.getInfo(Ljava/lang/String;)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.getKeyguardStorageForCurrentUser(I)Ljava/lang/String;
com.samsung.ucm.ucmservice.CredentialManagerService.getODEConfigurationForVold(Ljava/lang/String;)Lcom/samsung/android/knox/ucm/core/ucmRetParcelable;
com.samsung.ucm.ucmservice.CredentialManagerService.getODESettingsConfiguration()Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.getOdeKey(Ljava/lang/String;[B)Lcom/samsung/android/knox/ucm/core/ucmRetParcelable;
com.samsung.ucm.ucmservice.CredentialManagerService.getStatus(Ljava/lang/String;)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.grantKeyChainAccess(Ljava/lang/String;I)Z
com.samsung.ucm.ucmservice.CredentialManagerService.importKeyPair(Ljava/lang/String;[B[BLandroid/os/Bundle;)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.installCertificate(Ljava/lang/String;[B[BLandroid/os/Bundle;)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.isCredentialStorageLock(Ljava/lang/String;)Z
com.samsung.ucm.ucmservice.CredentialManagerService.isKeyChainGranted(Ljava/lang/String;I)Z
com.samsung.ucm.ucmservice.CredentialManagerService.isUserCertificatesExistInUCS()Z
com.samsung.ucm.ucmservice.CredentialManagerService.listAllProviders()[Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.listPasswordSupportedProviders(I)[Ljava/lang/String;
com.samsung.ucm.ucmservice.CredentialManagerService.listProviders()[Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.notifyChangeToPlugin(Ljava/lang/String;ILandroid/os/Bundle;)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.notifyLicenseStatus(Ljava/lang/String;Ljava/lang/String;I)Z
com.samsung.ucm.ucmservice.CredentialManagerService.notifyVoldComplete(Ljava/lang/String;[B)Lcom/samsung/android/knox/ucm/core/ucmRetParcelable;
com.samsung.ucm.ucmservice.CredentialManagerService.processMessage(I[B)Lcom/samsung/android/knox/ucm/core/ApduMessage;
com.samsung.ucm.ucmservice.CredentialManagerService.registerSystemUICallback(Lcom/samsung/android/knox/ucm/core/ICredentialManagerServiceSystemUICallback;)V
com.samsung.ucm.ucmservice.CredentialManagerService.removeEnforcedLockTypeNotification(I)V
com.samsung.ucm.ucmservice.CredentialManagerService.resetNonMdmCertificates()V
com.samsung.ucm.ucmservice.CredentialManagerService.resetUid(Ljava/lang/String;I)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.resetUser(Ljava/lang/String;I)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.saw(Ljava/lang/String;I)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.sawInternal(Ljava/lang/String;II)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.setAdminConfigureBundleForCs(IILjava/lang/String;Landroid/os/Bundle;I)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.setCertificateChain(Ljava/lang/String;[BLandroid/os/Bundle;)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.setConfigureBundleForCs(ILjava/lang/String;Landroid/os/Bundle;)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.setCredentialStorageProperty(ILjava/lang/String;Landroid/os/Bundle;I)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.setState(Ljava/lang/String;I)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.showEnforcedLockTypeNotification(ILjava/lang/String;)V
com.samsung.ucm.ucmservice.CredentialManagerService.sign(Ljava/lang/String;[BLjava/lang/String;)Lcom/samsung/android/knox/ucm/core/ucmRetParcelable;
com.samsung.ucm.ucmservice.CredentialManagerService.unwrapDek(Ljava/lang/String;[B)Lcom/samsung/android/knox/ucm/core/ucmRetParcelable;
com.samsung.ucm.ucmservice.CredentialManagerService.updateAgentList()V
com.samsung.ucm.ucmservice.CredentialManagerService.verifyPin(ILjava/lang/String;Ljava/lang/String;Landroid/os/Bundle;)Landroid/os/Bundle;
com.samsung.ucm.ucmservice.CredentialManagerService.verifyPuk(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/os/Bundle;
com.android.server.HarmonyEASService.getHashValueFromPackageName(Ljava/lang/String;I)Ljava/lang/String;
com.android.server.HarmonyEASService.getPackageNameFromHash(Ljava/lang/String;I)Ljava/lang/String;
com.android.server.HarmonyEASService.getThirdPartyApps(I)Ljava/util/List;
com.android.server.HarmonyEASService.getUnknownSourcesPackages(I)Ljava/util/List;
com.android.server.HarmonyEASService.isPackageUnknownSource(Ljava/lang/String;I)Z
com.android.server.HarmonyEASService.removeInstallationPackage(Ljava/lang/String;I)V
com.android.server.HarmonyEASService.setInstallationPackageHashValue(Ljava/lang/String;Ljava/lang/String;II)V
com.android.server.HarmonyEASService.setInstallationPackageUnknown(Ljava/lang/String;II)V
com.android.server.wifi.p2p.WifiP2pServiceImpl.getWifiP2pState()I
com.android.server.wifi.p2p.WifiP2pServiceImpl.isInactiveState()Z
com.android.server.wifi.aware.WifiAwareServiceImpl.getCountNdp(Z)I
com.android.server.wifi.aware.WifiAwareServiceImpl.isAwareEnabled()Z
com.android.server.wifi.aware.WifiAwareServiceImpl.isUsageEnabledForSem(Ljava/lang/String;)Z
com.android.server.wifi.aware.WifiAwareServiceImpl.setClusterMergingEnabled(Z)V
com.android.server.asks.ASKSManagerService.checkASKSTarget(I)[Ljava/lang/String;
com.android.server.asks.ASKSManagerService.checkDeletableListForASKS()V
com.android.server.asks.ASKSManagerService.checkRestrictedPermission(Ljava/lang/String;Ljava/lang/String;)I
com.android.server.asks.ASKSManagerService.clearASKSruleForRemovedPackage(Ljava/lang/String;)V
com.android.server.asks.ASKSManagerService.getSEInfo(Ljava/lang/String;)[B
com.android.server.asks.ASKSManagerService.getUNvalueForASKS()Ljava/lang/String;
com.android.server.asks.ASKSManagerService.postASKSsetup(Ljava/lang/String;Ljava/lang/String;I)V
com.android.server.asks.ASKSManagerService.systemReady()V
com.android.server.asks.ASKSManagerService.verifyASKStokenForPackage(Ljava/lang/String;Ljava/lang/String;I[Landroid/content/pm/Signature;Ljava/lang/String;Z)I
com.android.server.pm.PackageManagerService.applyRuntimePermissionsForAllApplicationsForMDM(II)Z
com.android.server.pm.PackageManagerService.applyRuntimePermissionsForMDM(Ljava/lang/String;Ljava/util/List;II)Z
com.android.server.pm.PackageManagerService.cancelEMPHandlerSendPendingBroadcast()V
com.android.server.pm.PackageManagerService.clearPackagePreferredActivitiesAsUserForMDM(Ljava/lang/String;I)V
com.android.server.pm.PackageManagerService.extendVerificationTimeout2(IIJ)V
com.android.server.pm.PackageManagerService.getComponentMetadataForIconTray(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)Z
com.android.server.pm.PackageManagerService.getGrantedPermissionsForMDM(Ljava/lang/String;)Ljava/util/List;
com.android.server.pm.PackageManagerService.getMetadataForIconTray(Ljava/lang/String;Ljava/lang/String;I)Z
com.android.server.pm.PackageManagerService.getPackageGrantedPermissionsForMDM(Ljava/lang/String;)Ljava/util/List;
com.android.server.pm.PackageManagerService.getProgressionOfPackageChanged()I
com.android.server.pm.PackageManagerService.getRequestedRuntimePermissionsForMDM(Ljava/lang/String;)Ljava/util/List;
com.android.server.pm.PackageManagerService.getRuntimePermissionGroupsForMDM()Ljava/util/List;
com.android.server.pm.PackageManagerService.getSEInfoForAASA(ILjava/lang/String;)[B
com.android.server.pm.PackageManagerService.getSplitPermissions()Ljava/util/List;
com.android.server.pm.PackageManagerService.installExistingPackageAsUserForMDM(Ljava/lang/String;I)I
com.android.server.pm.PackageManagerService.installPackageForMDM(Ljava/lang/String;Landroid/content/pm/IPackageInstallObserver2;IILjava/lang/String;Landroid/content/pm/VerificationParams;Ljava/lang/String;)V
com.android.server.pm.PackageManagerService.isPackageAutoDisabled(Ljava/lang/String;I)Z
com.android.server.pm.PackageManagerService.movePackageToSd(Ljava/lang/String;Ljava/lang/String;Landroid/content/pm/IMemorySaverPackageMoveObserver;)I
com.android.server.pm.PackageManagerService.revokeExternalPermissionsForMDM(Landroid/content/pm/ResolveInfo;Ljava/util/List;)I
com.android.server.pm.PackageManagerService.revokePermissionEDMForMDM(Ljava/lang/String;Ljava/util/List;Z)Ljava/util/List;
com.android.server.pm.PackageManagerService.rollbackPermissionForMDM(Ljava/lang/String;Ljava/util/List;Z)Ljava/util/List;
com.android.server.pm.PackageManagerService.semGetSystemFeatureLevel(Ljava/lang/String;)I
com.android.server.pm.PackageManagerService.semIsPermissionRevokedByUserFixed(Ljava/lang/String;Ljava/lang/String;I)Z
com.android.server.pm.PackageManagerService.setApplicationEnabledSettingWithList(Ljava/util/List;IIZZILjava/lang/String;)V
com.android.server.pm.PackageManagerService.setLicensePermissionsForMDM(Ljava/lang/String;)I
com.android.server.pm.PackageManagerService.verifyPendingInstall2(II)V
com.android.server.biometrics.face.FaceService$FaceServiceWrapper.semAuthenticate(Landroid/os/IBinder;JILandroid/hardware/face/IFaceServiceReceiver;ILjava/lang/String;Landroid/os/Bundle;[B)V
com.android.server.biometrics.face.FaceService$FaceServiceWrapper.semEnroll(Landroid/os/IBinder;[BLandroid/hardware/face/IFaceServiceReceiver;Ljava/lang/String;[ILandroid/os/Bundle;)V
com.android.server.biometrics.face.FaceService$FaceServiceWrapper.semGetSecurityLevel()I
com.android.server.biometrics.face.FaceService$FaceServiceWrapper.semGetTrustAppVersion()Ljava/lang/String;
com.android.server.biometrics.face.FaceService$FaceServiceWrapper.semIsEnrollSession()Z
com.android.server.biometrics.face.FaceService$FaceServiceWrapper.semIsFrameworkHandleLockout()Z
com.android.server.biometrics.face.FaceService$FaceServiceWrapper.semIsSessionClose()Z
com.android.server.biometrics.face.FaceService$FaceServiceWrapper.semPauseEnroll()V
com.android.server.biometrics.face.FaceService$FaceServiceWrapper.semPrepareForAuthentication(ZLandroid/os/IBinder;JILandroid/hardware/biometrics/IBiometricServiceReceiverInternal;Ljava/lang/String;IIIILandroid/os/Bundle;)V
com.android.server.biometrics.face.FaceService$FaceServiceWrapper.semResetAuthenticationTimeout()Z
com.android.server.biometrics.face.FaceService$FaceServiceWrapper.semResumeEnroll()V
com.android.server.biometrics.face.FaceService$FaceServiceWrapper.semSessionClose()V
com.android.server.biometrics.face.FaceService$FaceServiceWrapper.semSessionOpen()V
com.android.server.biometrics.face.FaceService$FaceServiceWrapper.semUpdateTrustApp(Landroid/os/IBinder;Ljava/lang/String;ILandroid/hardware/face/IFaceServiceReceiver;Ljava/lang/String;)V
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.activateCocktailBar()V
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.bindRemoteViewsService(Ljava/lang/String;ILandroid/content/Intent;Landroid/app/IApplicationThread;Landroid/os/IBinder;Landroid/app/IServiceConnection;I)Z
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.closeCocktail(Ljava/lang/String;II)V
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.deactivateCocktailBar()V
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.disableCocktail(Ljava/lang/String;Landroid/content/ComponentName;)V
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.getAllCocktailIds()[I
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.getCategoryFilterStr()Ljava/lang/String;
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.getCocktaiBarWakeUpState()Z
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.getCocktail(I)Lcom/samsung/android/cocktailbar/Cocktail;
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.getCocktailBarStateInfo()Lcom/samsung/android/cocktailbar/CocktailBarStateInfo;
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.getCocktailBarVisibility()I
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.getCocktailId(Ljava/lang/String;Landroid/content/ComponentName;)I
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.getCocktailIds(Ljava/lang/String;Landroid/content/ComponentName;)[I
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.getConfigVersion()I
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.getEnabledCocktailIds()[I
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.getHideEdgeListStr()Ljava/lang/String;
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.getPreferWidth()I
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.getWindowType()I
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.isBoundCocktailPackage(Ljava/lang/String;I)Z
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.isCocktailEnabled(Ljava/lang/String;Landroid/content/ComponentName;)Z
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.isEnabledCocktail(Ljava/lang/String;Landroid/content/ComponentName;)Z
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.notifyCocktailViewDataChanged(Ljava/lang/String;II)V
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.notifyCocktailVisibiltyChanged(II)V
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.notifyKeyguardState(Z)V
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.partiallyUpdateCocktail(Ljava/lang/String;Landroid/widget/RemoteViews;I)V
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.partiallyUpdateHelpView(Ljava/lang/String;Landroid/widget/RemoteViews;I)V
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.registerCocktailBarStateListenerCallback(Landroid/os/IBinder;Landroid/content/ComponentName;)V
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.removeCocktailUIService()V
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.requestToDisableCocktail(I)Z
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.requestToDisableCocktailByCategory(I)Z
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.requestToUpdateCocktail(I)Z
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.requestToUpdateCocktailByCategory(I)Z
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.sendExtraDataToCocktailBar(Landroid/os/Bundle;)V
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.setCocktailBarWakeUpState(Z)V
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.setCocktailHostCallbacks(Lcom/samsung/android/cocktailbar/ICocktailHost;Ljava/lang/String;I)V
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.setEnabledCocktailIds([I)V
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.setOnPullPendingIntent(Ljava/lang/String;IILandroid/app/PendingIntent;)V
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.showCocktail(Ljava/lang/String;I)V
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.startListening(Lcom/samsung/android/cocktailbar/ICocktailHost;Ljava/lang/String;I)V
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.stopListening(Ljava/lang/String;)V
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.unbindRemoteViewsService(Ljava/lang/String;ILandroid/content/Intent;)V
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.unregisterCocktailBarStateListenerCallback(Landroid/os/IBinder;)V
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.updateCocktail(Ljava/lang/String;Lcom/samsung/android/cocktailbar/CocktailInfo;I)V
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.updateCocktailBarPosition(I)V
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.updateCocktailBarVisibility(I)V
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.updateCocktailBarWindowType(Ljava/lang/String;I)V
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.updateWakeupArea(I)V
com.android.server.cocktailbar.CocktailBarManagerServiceContainer.updateWakeupGesture(IZ)V
com.android.server.appwidget.AppWidgetServiceImpl.getAllProvidersForProfile(IIZ)Ljava/util/List;
com.android.server.appwidget.AppWidgetServiceImpl.getAllWidgets(Ljava/lang/String;I)Ljava/util/Map;
com.android.server.appwidget.AppWidgetServiceImpl.semCreateAppWidgetConfigIntentSender(Ljava/lang/String;II)Landroid/content/IntentSender;
com.android.server.EngineeringModeService.getExpiryDate()Ljava/lang/String;
com.android.server.EngineeringModeService.getID()[B
com.android.server.EngineeringModeService.getLastTokenStatus()Ljava/lang/String;
com.android.server.EngineeringModeService.getModes()[I
com.android.server.EngineeringModeService.getNumOfModes()I
com.android.server.EngineeringModeService.getPriorityTime()[B
com.android.server.EngineeringModeService.getRequestMsg(Ljava/lang/String;Ljava/lang/String;[BI)[B
com.android.server.EngineeringModeService.getServerTime()J
com.android.server.EngineeringModeService.getStatus(ILjava/lang/String;)I
com.android.server.EngineeringModeService.getStringModes()Ljava/lang/String;
com.android.server.EngineeringModeService.getTUC(I)I
com.android.server.EngineeringModeService.getToken()[B
com.android.server.EngineeringModeService.installToken([B)I
com.android.server.EngineeringModeService.installTokenForESS(Ljava/lang/String;)[B
com.android.server.EngineeringModeService.isTokenInstalled()I
com.android.server.EngineeringModeService.makeDelTokenForESS(Ljava/lang/String;)[B
com.android.server.EngineeringModeService.makeITLReq(Ljava/lang/String;Ljava/lang/String;)[B
com.android.server.EngineeringModeService.makeITLReqForESS(Ljava/lang/String;)[B
com.android.server.EngineeringModeService.makeTokenReq(Ljava/lang/String;Ljava/lang/String;[BLjava/lang/String;)[B
com.android.server.EngineeringModeService.makeTokenReqForESS(Ljava/lang/String;)[B
com.android.server.EngineeringModeService.recoveryITL([B)I
com.android.server.EngineeringModeService.recoveryITLForESS(Ljava/lang/String;)I
com.android.server.EngineeringModeService.removeToken()I
com.android.server.EngineeringModeService.sendFuseCmd()I
com.android.server.EngineeringModeService.setPriorityTime(Ljava/lang/String;)[B
com.android.server.dreams.DreamManagerService$BinderService.semStartDozing(Landroid/os/IBinder;III)V
com.android.server.RCPManagerService.addExportShortcutInfo(Landroid/content/ComponentName;I)V
com.android.server.RCPManagerService.cancelCopyChunks(J)V
com.android.server.RCPManagerService.copyChunks(ILjava/lang/String;ILjava/lang/String;JIJZ)I
com.android.server.RCPManagerService.copyFile(ILjava/lang/String;ILjava/lang/String;)I
com.android.server.RCPManagerService.copyFileInternal(ILjava/lang/String;ILjava/lang/String;)I
com.android.server.RCPManagerService.deleteFile(Ljava/lang/String;I)Z
com.android.server.RCPManagerService.doSyncForSyncer(Ljava/lang/String;I)V
com.android.server.RCPManagerService.exchangeData(Ljava/lang/String;ILandroid/os/Bundle;)Landroid/os/Bundle;
com.android.server.RCPManagerService.executeCommandForPersona(Landroid/app/Command;)V
com.android.server.RCPManagerService.getExportShortcutInfo(I)Ljava/util/List;
com.android.server.RCPManagerService.getFileInfo(Ljava/lang/String;I)Landroid/os/Bundle;
com.android.server.RCPManagerService.getFiles(Ljava/lang/String;I)Ljava/util/List;
com.android.server.RCPManagerService.getRCPInterface()Landroid/content/IRCPInterface;
com.android.server.RCPManagerService.handleShortcut(ILjava/lang/String;Ljava/lang/String;Landroid/graphics/Bitmap;Ljava/lang/String;Ljava/lang/String;)V
com.android.server.RCPManagerService.isFileExist(Ljava/lang/String;I)Z
com.android.server.RCPManagerService.moveFile(ILjava/lang/String;ILjava/lang/String;)I
com.android.server.RCPManagerService.moveFilesForApp(ILjava/util/List;Ljava/util/List;)J
com.android.server.RCPManagerService.moveFilesForAppEx(ILjava/util/List;Ljava/util/List;I)J
com.android.server.RCPManagerService.moveUnlimitedFiles(ILandroid/net/Uri;II)J
com.android.server.RCPManagerService.registerCommandExe(Landroid/content/ICommandExeCallBack;I)V
com.android.server.RCPManagerService.registerExchangeData(Ljava/lang/String;Landroid/os/IRunnableCallback;I)Z
com.android.server.RCPManagerService.registerMonitorCb(Ljava/lang/String;Landroid/os/IRunnableCallback;)Z
com.android.server.RCPManagerService.registerObserver(Ljava/lang/String;I)V
com.android.server.RCPManagerService.registerProvider(Ljava/lang/String;Landroid/content/IProviderCallBack;I)V
com.android.server.RCPManagerService.registerRCPInterface(Landroid/content/IRCPInterface;I)V
com.android.server.RCPManagerService.registerSync(Landroid/content/ISyncCallBack;I)V
com.android.server.RCPManagerService.removeExportShortcutInfo(Landroid/content/ComponentName;I)V
com.android.server.RCPManagerService.switchPersona(I)V
com.android.server.RCPManagerService.unRegisterObserver(Ljava/lang/String;I)V
com.android.server.DirEncryptService.SetMountSDcardToHelper(Z)V
com.android.server.DirEncryptService.clearPrefs(Ljava/lang/String;)V
com.android.server.DirEncryptService.encryptStorage(Ljava/lang/String;)I
com.android.server.DirEncryptService.getAdditionalSpaceRequired()I
com.android.server.DirEncryptService.getCurrentStatus()I
com.android.server.DirEncryptService.getLastError()I
com.android.server.DirEncryptService.getListener()Landroid/os/IVoldTaskListener;
com.android.server.DirEncryptService.getSdCardEncryptionPreferences(Ljava/lang/String;)Lcom/samsung/android/security/SemSdCardEncryptionPolicy;
com.android.server.DirEncryptService.isSdCardEncryped()Z
com.android.server.DirEncryptService.isStorageCardEncryptionPoliciesApplied()I
com.android.server.DirEncryptService.registerListener(Lcom/samsung/android/security/IDirEncryptServiceListener;)V
com.android.server.DirEncryptService.setNeedToCreateKey(Z)V
com.android.server.DirEncryptService.setPassword(Ljava/lang/String;)I
com.android.server.DirEncryptService.setSdCardEncryptionPolicy(IILjava/lang/String;)I
com.android.server.DirEncryptService.setStorageCardEncryptionPolicy(III)I
com.android.server.DirEncryptService.unmountSDCardByAdmin()V
com.android.server.DirEncryptService.unregisterListener(Lcom/samsung/android/security/IDirEncryptServiceListener;)V
com.samsung.android.knoxguard.service.KnoxGuardService.addPackagesToClearCacheBlackList(Ljava/util/List;)Z
com.samsung.android.knoxguard.service.KnoxGuardService.addPackagesToForceStopBlackList(Ljava/util/List;)Z
com.samsung.android.knoxguard.service.KnoxGuardService.allowFirmwareRecovery(Z)Z
com.samsung.android.knoxguard.service.KnoxGuardService.allowOTAUpgrade(Z)Z
com.samsung.android.knoxguard.service.KnoxGuardService.allowSafeMode(Z)Z
com.samsung.android.knoxguard.service.KnoxGuardService.bindToLockScreen()V
com.samsung.android.knoxguard.service.KnoxGuardService.callKGsv()V
com.samsung.android.knoxguard.service.KnoxGuardService.getKGServiceVersion()I
com.samsung.android.knoxguard.service.KnoxGuardService.getPBAUniqueNumber()Ljava/lang/String;
com.samsung.android.knoxguard.service.KnoxGuardService.registerIntent(Ljava/lang/String;Ljava/util/List;)V
com.samsung.android.knoxguard.service.KnoxGuardService.removeActiveAdmin(Landroid/content/ComponentName;)V
com.samsung.android.knoxguard.service.KnoxGuardService.revokeRuntimePermission(Ljava/lang/String;Ljava/lang/String;Landroid/os/UserHandle;)V
com.samsung.android.knoxguard.service.KnoxGuardService.setActiveAdmin(Landroid/content/ComponentName;)V
com.samsung.android.knoxguard.service.KnoxGuardService.setAdminRemovable(Z)Z
com.samsung.android.knoxguard.service.KnoxGuardService.setApplicationUninstallationDisabled(Ljava/lang/String;)Z
com.samsung.android.knoxguard.service.KnoxGuardService.setKnoxGuardExemptRule(Z)V
com.samsung.android.knoxguard.service.KnoxGuardService.setRemoteLockToLockscreen(IZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;IJIZLandroid/os/Bundle;)V
com.samsung.android.knoxguard.service.KnoxGuardService.setRuntimePermission(Ljava/lang/String;Ljava/lang/String;Landroid/os/UserHandle;)V
com.samsung.android.knoxguard.service.KnoxGuardService.shouldBlockCustomRom()Z
com.samsung.android.knoxguard.service.KnoxGuardService.showInstallmentStatus()Z
com.samsung.android.knoxguard.service.KnoxGuardService.unRegisterIntent()V
com.android.server.enterprise.nap.NetworkAnalyticsService.getNPAVersion()Ljava/lang/String;
com.android.server.enterprise.nap.NetworkAnalyticsService.getNetworkMonitorProfiles(Lcom/samsung/android/knox/ContextInfo;)Ljava/util/List;
com.android.server.enterprise.nap.NetworkAnalyticsService.getProfiles(Lcom/samsung/android/knox/ContextInfo;)Ljava/util/List;
com.android.server.enterprise.nap.NetworkAnalyticsService.handleNAPClientCall(Ljava/lang/String;Landroid/os/Bundle;Z)I
com.android.server.enterprise.nap.NetworkAnalyticsService.isProfileActivatedForUser(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)I
com.android.server.enterprise.nap.NetworkAnalyticsService.registerNetworkMonitorProfile(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)I
com.android.server.enterprise.nap.NetworkAnalyticsService.unregisterNetworkMonitorProfile(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)I
com.android.server.VibratorService.getMagnitude(Ljava/lang/String;)I
com.android.server.VibratorService.getMaxMagnitude()I
com.android.server.VibratorService.getMotorType()I
com.android.server.VibratorService.readFromFile(J)I
com.android.server.VibratorService.resetMagnitude()V
com.android.server.VibratorService.semGetNumberOfSupportedPatterns()I
com.android.server.VibratorService.semGetSupportedVibrationType()I
com.android.server.VibratorService.semIsForceTouchSupported()Z
com.android.server.VibratorService.semIsHapticEngineSupported()Z
com.android.server.VibratorService.semIsHapticSupported()Z
com.android.server.VibratorService.semSetVibrationMute(Ljava/lang/String;ZLjava/lang/String;Landroid/os/IBinder;)Ljava/util/List;
com.android.server.VibratorService.setMagnitude(I)V
com.android.server.VibratorService.vibratePatternMagnitude(ILjava/lang/String;[JIILandroid/os/IBinder;IILjava/lang/String;)V
com.android.server.VibratorService.writeToFile(JI)Z
com.android.server.search.SearchManagerService.getSearchablesInInsightSearch(Z)Ljava/util/List;
com.android.server.ConnectivityService.checkIfLocalProxyPortExists(I)Z
com.android.server.ConnectivityService.checkIfUidIsExempted(I)Z
com.android.server.ConnectivityService.disconnectPerAppVpn(Ljava/lang/String;I)Z
com.android.server.ConnectivityService.disconnectSystemVpn(I)V
com.android.server.ConnectivityService.establishEnterpriseVpn(Lcom/android/internal/net/VpnConfig;Ljava/lang/String;)Landroid/os/ParcelFileDescriptor;
com.android.server.ConnectivityService.getActiveEnterpriseNetworkType(Ljava/lang/String;)I
com.android.server.ConnectivityService.getChainingEnabledForProfile(I)Z
com.android.server.ConnectivityService.getDefaultNetworkForKnoxvpn()Landroid/net/Network;
com.android.server.ConnectivityService.getDefaultNetworkPropertyForKnoxvpn()Landroid/net/LinkProperties;
com.android.server.ConnectivityService.getDnsServerListForInterface(Ljava/lang/String;)[Ljava/lang/String;
com.android.server.ConnectivityService.getLinkForPropertiesForCapability(I)Landroid/net/LinkProperties;
com.android.server.ConnectivityService.getLocalOnlyIfaces()[Ljava/lang/String;
com.android.server.ConnectivityService.getMptcpState()Z
com.android.server.ConnectivityService.getMultiNetwork()Z
com.android.server.ConnectivityService.getNetIdforDefaultInterface()I
com.android.server.ConnectivityService.getProxyInfoForUid(I)[Ljava/lang/String;
com.android.server.ConnectivityService.getReservedNetworkId()I
com.android.server.ConnectivityService.getRoamingReduction(I)I
com.android.server.ConnectivityService.getUidsForApnType(Ljava/lang/String;)[I
com.android.server.ConnectivityService.getUsersForEnterpriseNetwork(I)[I
com.android.server.ConnectivityService.isEntApnEnabled(I)Z
com.android.server.ConnectivityService.isEnterpriseApn(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z
com.android.server.ConnectivityService.isSplitBillingEnabled()Z
com.android.server.ConnectivityService.knoxVpnProfileType(Ljava/lang/String;)I
com.android.server.ConnectivityService.notifyCurrentQAI(I)V
com.android.server.ConnectivityService.prepareEnterpriseVpn(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Z
com.android.server.ConnectivityService.prepareEnterpriseVpnExt(Ljava/lang/String;Ljava/lang/String;ZZ)Z
com.android.server.ConnectivityService.releaseNetworkId(I)V
com.android.server.ConnectivityService.removeRouteToHostAddress(I[B)Z
com.android.server.ConnectivityService.reportNetworkConnectivityForResult(Landroid/net/Network;Landroid/os/Message;)V
com.android.server.ConnectivityService.retrieveEnterpriseProxy(Z)Landroid/net/ProxyInfo;
com.android.server.ConnectivityService.semIsMobilePolicyDataEnabled()Z
com.android.server.ConnectivityService.setMultiNetwork(ZI)V
com.android.server.ConnectivityService.setProxyCredentials(Landroid/os/Bundle;Landroid/sec/enterprise/proxy/IProxyCredentialsCallback;)V
com.android.server.ConnectivityService.setRoamingReduction(II)V
com.android.server.ConnectivityService.setUsbTetheringForKnoxVpn(Z)I
com.android.server.ConnectivityService.setWcmAcceptUnvalidated(Landroid/net/Network;Z)V
com.android.server.ConnectivityService.setWifiRoamNetwork(Z)V
com.android.server.ConnectivityService.updateEnterpriseVpn(Ljava/lang/String;IZ)V
com.android.server.net.UrspService.clearUrspBlackListUidRule(I)V
com.android.server.net.UrspService.factoryReset()V
com.android.server.net.UrspService.getAllUrspBlackListUidsRule(I)[I
com.android.server.net.UrspService.getAllUrspRule(I)[I
com.android.server.net.UrspService.getIntervalUsageForUrsp(ILjava/lang/String;IJJ)J
com.android.server.net.UrspService.getServerInfo(ILjava/lang/String;Ljava/lang/String;)Ljava/lang/String;
com.android.server.net.UrspService.getUrspMode(I)Z
com.android.server.net.UrspService.getUrspNetId(I)I
com.android.server.net.UrspService.isUrspRuleEnabled(II)Z
com.android.server.net.UrspService.registerUrspAppListener(ILandroid/net/IUrspAppListener;)V
com.android.server.net.UrspService.registerUrspConnListener(Landroid/net/IUrspConnectionListener;)V
com.android.server.net.UrspService.requestPduSession(IZLandroid/os/Messenger;Landroid/os/IBinder;)V
com.android.server.net.UrspService.setUrspBlackListUidRule(IZI)V
com.android.server.net.UrspService.setUrspDnn(ILjava/util/List;)V
com.android.server.net.UrspService.setUrspMode(IZ)V
com.android.server.net.UrspService.setUrspNetId(II)V
com.android.server.net.UrspService.setUrspRule(IZI)V
com.android.server.net.UrspService.setUrspRules(I[I)V
com.android.server.net.UrspService.unregisterUrspAppListener(ILandroid/net/IUrspAppListener;)V
com.android.server.net.UrspService.unregisterUrspConnListener(Landroid/net/IUrspConnectionListener;)V
com.android.server.wm.ActivityTaskManagerService.activitySlept(Landroid/os/IBinder;Landroid/os/Bundle;)V
com.android.server.wm.ActivityTaskManagerService.clearAppLockedUnLockedApp()V
com.android.server.wm.ActivityTaskManagerService.clearRecentTasks(I)Z
com.android.server.wm.ActivityTaskManagerService.getAppLockedCheckAction()Ljava/lang/String;
com.android.server.wm.ActivityTaskManagerService.getAppLockedLockType()Ljava/lang/String;
com.android.server.wm.ActivityTaskManagerService.getAppLockedPackageList()Ljava/util/List;
com.android.server.wm.ActivityTaskManagerService.getDexTaskInfoFlags(Landroid/os/IBinder;)I
com.android.server.wm.ActivityTaskManagerService.getResumedTaskThumbnail(I)Landroid/graphics/Bitmap;
com.android.server.wm.ActivityTaskManagerService.getTaskInfoFromTaskId(I)Landroid/os/Bundle;
com.android.server.wm.ActivityTaskManagerService.isAppLockedPackage(Ljava/lang/String;)Z
com.android.server.wm.ActivityTaskManagerService.isAppLockedVerifying(Ljava/lang/String;)Z
com.android.server.wm.ActivityTaskManagerService.registerTaskWatcher(ILcom/samsung/android/app/ITaskWatcher;)V
com.android.server.wm.ActivityTaskManagerService.requestWaitingForOccluding()V
com.android.server.wm.ActivityTaskManagerService.rotateDexCompatTask(Landroid/os/IBinder;)V
com.android.server.wm.ActivityTaskManagerService.semConvertFromTranslucent(Landroid/os/IBinder;Z)Z
com.android.server.wm.ActivityTaskManagerService.semRemoveTask(II)Z
com.android.server.wm.ActivityTaskManagerService.setAppLockedUnLockPackage(Ljava/lang/String;)V
com.android.server.wm.ActivityTaskManagerService.setAppLockedVerifying(Ljava/lang/String;Z)V
com.android.server.wm.ActivityTaskManagerService.setCustomImageForPackage(Landroid/content/ComponentName;ILandroid/os/ParcelFileDescriptor;I)Z
com.android.server.wm.ActivityTaskManagerService.startAppLockService(Landroid/os/IBinder;Landroid/content/Intent;ZLjava/lang/String;)V
com.android.server.wm.ActivityTaskManagerService.unregisterTaskWatcher(ILcom/samsung/android/app/ITaskWatcher;)V
com.android.server.ipm.PkgPredictorService.reportToNAP(Ljava/lang/String;Ljava/lang/String;J)V
com.android.server.statusbar.StatusBarManagerService.collapsePanelsToType(I)V
com.android.server.statusbar.StatusBarManagerService.disable2ForUserToType(ILandroid/os/IBinder;Ljava/lang/String;II)V
com.android.server.statusbar.StatusBarManagerService.disable2ToType(ILandroid/os/IBinder;Ljava/lang/String;I)V
com.android.server.statusbar.StatusBarManagerService.disableForUserToType(ILandroid/os/IBinder;Ljava/lang/String;II)V
com.android.server.statusbar.StatusBarManagerService.disableToType(ILandroid/os/IBinder;Ljava/lang/String;I)V
com.android.server.statusbar.StatusBarManagerService.expandNotificationsPanelToType(I)V
com.android.server.statusbar.StatusBarManagerService.expandSettingsPanelToType(Ljava/lang/String;I)V
com.android.server.statusbar.StatusBarManagerService.getDisableFlagsToType(Landroid/os/IBinder;II)[I
com.android.server.statusbar.StatusBarManagerService.getPanelExpandState()Z
com.android.server.statusbar.StatusBarManagerService.getPanelExpandStateToType(I)Z
com.android.server.statusbar.StatusBarManagerService.getQuickSettingPanelExpandState()Z
com.android.server.statusbar.StatusBarManagerService.getQuickSettingPanelExpandStateToType(I)Z
com.android.server.statusbar.StatusBarManagerService.isFOTAAvailableForGlobalActions()Z
com.android.server.statusbar.StatusBarManagerService.notifyRequestedSystemKey(ZZ)V
com.android.server.statusbar.StatusBarManagerService.rebootByBixby(Z)V
com.android.server.statusbar.StatusBarManagerService.registerStatusBarAsType(Lcom/android/internal/statusbar/IStatusBar;I)Lcom/android/internal/statusbar/RegisterStatusBarResult;
com.android.server.statusbar.StatusBarManagerService.requestExpandLockedShadePanel(Landroid/service/notification/StatusBarNotification;)V
com.android.server.statusbar.StatusBarManagerService.sendKeyEventToDesktopTaskbar(Landroid/view/KeyEvent;)V
com.android.server.statusbar.StatusBarManagerService.sendKeyEventToDesktopTaskbarToType(Landroid/view/KeyEvent;I)V
com.android.server.statusbar.StatusBarManagerService.setImeWindowStatusToType(ILandroid/os/IBinder;IIZI)V
com.android.server.statusbar.StatusBarManagerService.setIndicatorBgColor(I)V
com.android.server.statusbar.StatusBarManagerService.setNavigationBarShortcut(Ljava/lang/String;Landroid/widget/RemoteViews;II)V
com.android.server.statusbar.StatusBarManagerService.setPanelExpandState(Z)V
com.android.server.statusbar.StatusBarManagerService.setPanelExpandStateToType(ZI)V
com.android.server.statusbar.StatusBarManagerService.setSystemUiVisibilityToType(IIILjava/lang/String;I)V
com.android.server.statusbar.StatusBarManagerService.shutdownByBixby()V
com.android.server.statusbar.StatusBarManagerService.toggleRecentApps()V
com.android.server.statusbar.StatusBarManagerService.toggleRecentAppsToType(I)V
com.android.server.AlarmManagerService$3.getNextAlarmClocks(I)Ljava/util/List;
com.android.server.AlarmManagerService$3.setAutoPowerUp(Ljava/lang/String;)V
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.activateVpnProfile(Lcom/samsung/android/knox/net/vpn/KnoxVpnContext;Ljava/lang/String;Z)Lcom/samsung/android/knox/net/vpn/EnterpriseResponseData;
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.addAllContainerPackagesToVpn(Lcom/samsung/android/knox/net/vpn/KnoxVpnContext;ILjava/lang/String;)Lcom/samsung/android/knox/net/vpn/EnterpriseResponseData;
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.addAllPackagesToVpn(Lcom/samsung/android/knox/net/vpn/KnoxVpnContext;Ljava/lang/String;)Lcom/samsung/android/knox/net/vpn/EnterpriseResponseData;
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.addContainerPackagesToVpn(Lcom/samsung/android/knox/net/vpn/KnoxVpnContext;I[Ljava/lang/String;Ljava/lang/String;)Lcom/samsung/android/knox/net/vpn/EnterpriseResponseData;
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.addExemptUidListForNetwork(Landroid/net/NetworkInfo;)V
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.addPackagesToVpn(Lcom/samsung/android/knox/net/vpn/KnoxVpnContext;[Ljava/lang/String;Ljava/lang/String;)Lcom/samsung/android/knox/net/vpn/EnterpriseResponseData;
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.addVpnUidRanges(Landroid/net/NetworkInfo;)V
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.allowUsbTetheringOverVpn(Lcom/samsung/android/knox/net/vpn/KnoxVpnContext;Ljava/lang/String;ZLandroid/os/Bundle;)I
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.bindKnoxVpnInterface(Lcom/samsung/android/knox/net/vpn/KnoxVpnContext;)Z
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.checkIfUidIsExempted(I)Z
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.checkIfVendorCreatedKnoxProfile(Ljava/lang/String;II)Z
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.createVpnProfile(Lcom/samsung/android/knox/net/vpn/KnoxVpnContext;Ljava/lang/String;)Lcom/samsung/android/knox/net/vpn/EnterpriseResponseData;
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.getAllContainerPackagesInVpnProfile(Lcom/samsung/android/knox/net/vpn/KnoxVpnContext;ILjava/lang/String;)Lcom/samsung/android/knox/net/vpn/EnterpriseResponseData;
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.getAllPackagesInVpnProfile(Lcom/samsung/android/knox/net/vpn/KnoxVpnContext;Ljava/lang/String;)Lcom/samsung/android/knox/net/vpn/EnterpriseResponseData;
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.getAllVpnProfiles(Lcom/samsung/android/knox/net/vpn/KnoxVpnContext;)Lcom/samsung/android/knox/net/vpn/EnterpriseResponseData;
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.getCACertificate(Lcom/samsung/android/knox/net/vpn/KnoxVpnContext;Ljava/lang/String;)Lcom/samsung/android/knox/net/vpn/EnterpriseResponseData;
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.getChainingEnabledForProfile(I)I
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.getDomainsByProfileName(Ljava/lang/String;)Ljava/util/List;
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.getErrorString(Lcom/samsung/android/knox/net/vpn/KnoxVpnContext;Ljava/lang/String;)Lcom/samsung/android/knox/net/vpn/EnterpriseResponseData;
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.getInterfaceNameForUid(I)Ljava/lang/String;
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.getKnoxVpnProfileType(Ljava/lang/String;)I
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.getProfilesByDomain(Ljava/lang/String;)Ljava/util/List;
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.getState(Lcom/samsung/android/knox/net/vpn/KnoxVpnContext;Ljava/lang/String;)Lcom/samsung/android/knox/net/vpn/EnterpriseResponseData;
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.getUidPidEnabled(ILjava/lang/String;)I
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.getUserCertificate(Lcom/samsung/android/knox/net/vpn/KnoxVpnContext;Ljava/lang/String;)Lcom/samsung/android/knox/net/vpn/EnterpriseResponseData;
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.getVendorNameForProfile(Ljava/lang/String;)Ljava/lang/String;
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.getVpnModeOfOperation(Lcom/samsung/android/knox/net/vpn/KnoxVpnContext;Ljava/lang/String;)Lcom/samsung/android/knox/net/vpn/EnterpriseResponseData;
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.getVpnProfile(Lcom/samsung/android/knox/net/vpn/KnoxVpnContext;Ljava/lang/String;)Lcom/samsung/android/knox/net/vpn/EnterpriseResponseData;
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.isNetworkBlockedForUid(I)Z
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.isUsbTetheringOverVpnEnabled(Lcom/samsung/android/knox/net/vpn/KnoxVpnContext;Ljava/lang/String;)I
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.removeAllContainerPackagesFromVpn(Lcom/samsung/android/knox/net/vpn/KnoxVpnContext;ILjava/lang/String;)Lcom/samsung/android/knox/net/vpn/EnterpriseResponseData;
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.removeAllPackagesFromVpn(Lcom/samsung/android/knox/net/vpn/KnoxVpnContext;Ljava/lang/String;)Lcom/samsung/android/knox/net/vpn/EnterpriseResponseData;
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.removeContainerPackagesFromVpn(Lcom/samsung/android/knox/net/vpn/KnoxVpnContext;I[Ljava/lang/String;Ljava/lang/String;)Lcom/samsung/android/knox/net/vpn/EnterpriseResponseData;
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.removePackagesFromVpn(Lcom/samsung/android/knox/net/vpn/KnoxVpnContext;[Ljava/lang/String;Ljava/lang/String;)Lcom/samsung/android/knox/net/vpn/EnterpriseResponseData;
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.removeVpnProfile(Lcom/samsung/android/knox/net/vpn/KnoxVpnContext;Ljava/lang/String;)Lcom/samsung/android/knox/net/vpn/EnterpriseResponseData;
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.removeVpnUidRanges(Landroid/net/NetworkInfo;)V
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.setAutoRetryOnConnectionError(Lcom/samsung/android/knox/net/vpn/KnoxVpnContext;Ljava/lang/String;Z)Lcom/samsung/android/knox/net/vpn/EnterpriseResponseData;
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.setCACertificate(Lcom/samsung/android/knox/net/vpn/KnoxVpnContext;Ljava/lang/String;[B)Lcom/samsung/android/knox/net/vpn/EnterpriseResponseData;
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.setDnsPropertyForNetwork(Landroid/net/NetworkInfo;)V
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.setServerCertValidationUserAcceptanceCriteria(Lcom/samsung/android/knox/net/vpn/KnoxVpnContext;Ljava/lang/String;ZLjava/util/List;I)Lcom/samsung/android/knox/net/vpn/EnterpriseResponseData;
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.setUserCertificate(Lcom/samsung/android/knox/net/vpn/KnoxVpnContext;Ljava/lang/String;[BLjava/lang/String;)Lcom/samsung/android/knox/net/vpn/EnterpriseResponseData;
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.setVpnModeOfOperation(Lcom/samsung/android/knox/net/vpn/KnoxVpnContext;Ljava/lang/String;I)Lcom/samsung/android/knox/net/vpn/EnterpriseResponseData;
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.showToastVpnEULA()V
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.startConnection(Lcom/samsung/android/knox/net/vpn/KnoxVpnContext;Ljava/lang/String;)Lcom/samsung/android/knox/net/vpn/EnterpriseResponseData;
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.stopConnection(Lcom/samsung/android/knox/net/vpn/KnoxVpnContext;Ljava/lang/String;)Lcom/samsung/android/knox/net/vpn/EnterpriseResponseData;
com.android.server.enterprise.vpn.knoxvpn.KnoxVpnEngineService.unsetDnsPropertyForNetwork(Landroid/net/NetworkInfo;)V
com.android.server.enterprise.shareddevice.EnterpriseSharedDevicePolicy.applyPasswordPolicy(I)Z
com.android.server.enterprise.shareddevice.EnterpriseSharedDevicePolicy.cancelProgressDialog()V
com.android.server.enterprise.shareddevice.EnterpriseSharedDevicePolicy.checkTIMAStatusSD(I)Z
com.android.server.enterprise.shareddevice.EnterpriseSharedDevicePolicy.clearData(I)I
com.android.server.enterprise.shareddevice.EnterpriseSharedDevicePolicy.clearDataWithUserID(II)I
com.android.server.enterprise.shareddevice.EnterpriseSharedDevicePolicy.clearSDTIMA(Ljava/lang/String;)I
com.android.server.enterprise.shareddevice.EnterpriseSharedDevicePolicy.getSDUserName()Ljava/lang/String;
com.android.server.enterprise.shareddevice.EnterpriseSharedDevicePolicy.getSharedDevicePolicies()Landroid/os/Bundle;
com.android.server.enterprise.shareddevice.EnterpriseSharedDevicePolicy.hideScrim()V
com.android.server.enterprise.shareddevice.EnterpriseSharedDevicePolicy.isSharedDeviceEnabled()Z
com.android.server.enterprise.shareddevice.EnterpriseSharedDevicePolicy.notifyUserSignedIn(Lcom/samsung/android/knox/shareddevice/UserCredentials;)V
com.android.server.enterprise.shareddevice.EnterpriseSharedDevicePolicy.performUserAuthentication(Lcom/samsung/android/knox/shareddevice/UserCredentials;)I
com.android.server.enterprise.shareddevice.EnterpriseSharedDevicePolicy.sendIntentforBroadcast(Landroid/content/Intent;Ljava/lang/String;)V
com.android.server.enterprise.shareddevice.EnterpriseSharedDevicePolicy.setSharedDeviceState(Lcom/samsung/android/knox/ContextInfo;IZ)I
com.android.server.enterprise.shareddevice.EnterpriseSharedDevicePolicy.showScrim()V
com.android.server.enterprise.shareddevice.EnterpriseSharedDevicePolicy.signOutUser(Z)Z
com.samsung.android.contextaware.manager.ContextAwareService.getContextInfo(Landroid/os/IBinder;I)V
com.samsung.android.contextaware.manager.ContextAwareService.getVersion()I
com.samsung.android.contextaware.manager.ContextAwareService.initializeAutoTest()V
com.samsung.android.contextaware.manager.ContextAwareService.registerCallback(Landroid/os/IBinder;I)V
com.samsung.android.contextaware.manager.ContextAwareService.registerWatcher(Landroid/os/IBinder;I)V
com.samsung.android.contextaware.manager.ContextAwareService.resetCAService(I)V
com.samsung.android.contextaware.manager.ContextAwareService.setCALogger(ZZIZ)V
com.samsung.android.contextaware.manager.ContextAwareService.setCAProperty(IILcom/samsung/android/contextaware/manager/ContextAwarePropertyBundle;)Z
com.samsung.android.contextaware.manager.ContextAwareService.setScenarioForDebugging(II[B)Z
com.samsung.android.contextaware.manager.ContextAwareService.setScenarioForTest(II)Z
com.samsung.android.contextaware.manager.ContextAwareService.setVersion(I)V
com.samsung.android.contextaware.manager.ContextAwareService.startAutoTest()V
com.samsung.android.contextaware.manager.ContextAwareService.stopAutoTest()V
com.samsung.android.contextaware.manager.ContextAwareService.unregisterCallback(Landroid/os/IBinder;I)Z
com.samsung.android.contextaware.manager.ContextAwareService.unregisterWatcher(Landroid/os/IBinder;I)Z
com.android.server.display.color.ColorDisplayService$BinderService.setSaturationLevelLimit(I)Z
com.android.server.enterprise.smartcard.SmartCardBrowserPolicy.disableAuthentication(Lcom/samsung/android/knox/ContextInfo;)Z
com.android.server.enterprise.smartcard.SmartCardBrowserPolicy.enableAuthentication(Lcom/samsung/android/knox/ContextInfo;)Z
com.android.server.enterprise.smartcard.SmartCardBrowserPolicy.getClientCertificateAlias(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;I)Ljava/lang/String;
com.android.server.enterprise.smartcard.SmartCardBrowserPolicy.isAuthenticationEnabled(Lcom/samsung/android/knox/ContextInfo;)Z
com.android.server.enterprise.smartcard.SmartCardBrowserPolicy.removeClientCertificateAlias(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;I)Z
com.android.server.enterprise.smartcard.SmartCardBrowserPolicy.setClientCertificateAlias(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;ILjava/lang/String;)Z
com.samsung.android.dapservice.MlDapService.checkDeviceCertificate()I
com.samsung.android.dapservice.MlDapService.deleteDeviceKey()I
com.samsung.android.dapservice.MlDapService.finalizeOta()I
com.samsung.android.dapservice.MlDapService.generateSignature([BI)Lcom/samsung/android/dapmanager/BufferData;
com.samsung.android.dapservice.MlDapService.getCaCertificate(I[B)[B
com.samsung.android.dapservice.MlDapService.getDeviceCertificate()Lcom/samsung/android/dapmanager/BufferData;
com.samsung.android.dapservice.MlDapService.getExtendPcr([BI)Lcom/samsung/android/dapmanager/BufferData;
com.samsung.android.dapservice.MlDapService.getManufacturerCertificate()Lcom/samsung/android/dapmanager/IoBufferData;
com.samsung.android.dapservice.MlDapService.getPcr()Lcom/samsung/android/dapmanager/BufferData;
com.samsung.android.dapservice.MlDapService.initializeOta()I
com.samsung.android.dapservice.MlDapService.registerMLTaskWatcher(Lcom/samsung/android/dapmanager/IMlTaskWatcherCallback;)V
com.samsung.android.dapservice.MlDapService.storeDeviceCertificate([B[B[BIII)I
com.samsung.android.dapservice.MlDapService.unregisterMLTaskWatcher(Lcom/samsung/android/dapmanager/IMlTaskWatcherCallback;)V
com.android.server.MdfService.initCCMode()I
com.android.server.sepunion.SemUnionMasterServiceImpl.getSemSystemService(Ljava/lang/String;Landroid/os/Bundle;)Landroid/os/IBinder;
com.android.server.sepunion.SemUnionMasterServiceImpl.setDumpEnabled(Ljava/lang/String;Ljava/lang/String;)V
com.android.server.DualAppManagerService.getAllInstalledWhitelistedPackages()Ljava/util/List;
com.android.server.DualAppManagerService.getAllWhitelistedPackages()[Ljava/lang/String;
com.android.server.DualAppManagerService.getDockedStackUserID()I
com.android.server.DualAppManagerService.isInstalledWhitelistedPackage(Ljava/lang/String;)Z
com.android.server.DualAppManagerService.updateDualAppData(Ljava/lang/String;ILandroid/os/Bundle;)Landroid/os/Bundle;
com.android.server.notification.NotificationManagerService$12.addAutomaticZenRule(Landroid/app/AutomaticZenRule;)Ljava/lang/String;
com.android.server.notification.NotificationManagerService$12.allowAssistantAdjustment(Ljava/lang/String;)V
com.android.server.notification.NotificationManagerService$12.applyAdjustmentFromAssistant(Landroid/service/notification/INotificationListener;Landroid/service/notification/Adjustment;)V
com.android.server.notification.NotificationManagerService$12.applyAdjustmentsFromAssistant(Landroid/service/notification/INotificationListener;Ljava/util/List;)V
com.android.server.notification.NotificationManagerService$12.applyEnqueuedAdjustmentFromAssistant(Landroid/service/notification/INotificationListener;Landroid/service/notification/Adjustment;)V
com.android.server.notification.NotificationManagerService$12.applyRestore([BI)V
com.android.server.notification.NotificationManagerService$12.areBubblesAllowed(Ljava/lang/String;)Z
com.android.server.notification.NotificationManagerService$12.areBubblesAllowedForPackage(Ljava/lang/String;I)Z
com.android.server.notification.NotificationManagerService$12.areChannelsBypassingDnd()Z
com.android.server.notification.NotificationManagerService$12.areNotificationsEnabled(Ljava/lang/String;)Z
com.android.server.notification.NotificationManagerService$12.areNotificationsEnabledForPackage(Ljava/lang/String;I)Z
com.android.server.notification.NotificationManagerService$12.canNotifyAsPackage(Ljava/lang/String;Ljava/lang/String;I)Z
com.android.server.notification.NotificationManagerService$12.canShowBadge(Ljava/lang/String;I)Z
com.android.server.notification.NotificationManagerService$12.cancelAllNotifications(Ljava/lang/String;I)V
com.android.server.notification.NotificationManagerService$12.cancelNotificationFromListener(Landroid/service/notification/INotificationListener;Ljava/lang/String;Ljava/lang/String;I)V
com.android.server.notification.NotificationManagerService$12.cancelNotificationWithTag(Ljava/lang/String;Ljava/lang/String;II)V
com.android.server.notification.NotificationManagerService$12.cancelNotificationsFromListener(Landroid/service/notification/INotificationListener;[Ljava/lang/String;)V
com.android.server.notification.NotificationManagerService$12.cancelToast(Ljava/lang/String;Landroid/app/ITransientNotification;)V
com.android.server.notification.NotificationManagerService$12.clearData(Ljava/lang/String;IZ)V
com.android.server.notification.NotificationManagerService$12.clearRequestedListenerHints(Landroid/service/notification/INotificationListener;)V
com.android.server.notification.NotificationManagerService$12.createNotificationChannelGroups(Ljava/lang/String;Landroid/content/pm/ParceledListSlice;)V
com.android.server.notification.NotificationManagerService$12.createNotificationChannels(Ljava/lang/String;Landroid/content/pm/ParceledListSlice;)V
com.android.server.notification.NotificationManagerService$12.createNotificationChannelsForPackage(Ljava/lang/String;ILandroid/content/pm/ParceledListSlice;)V
com.android.server.notification.NotificationManagerService$12.deleteNotificationChannel(Ljava/lang/String;Ljava/lang/String;)V
com.android.server.notification.NotificationManagerService$12.deleteNotificationChannelGroup(Ljava/lang/String;Ljava/lang/String;)V
com.android.server.notification.NotificationManagerService$12.disallowAssistantAdjustment(Ljava/lang/String;)V
com.android.server.notification.NotificationManagerService$12.enqueueEdgeNotification(Ljava/lang/String;Ljava/lang/String;ILandroid/os/Bundle;I)V
com.android.server.notification.NotificationManagerService$12.enqueueNotificationWithTag(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILandroid/app/Notification;I)V
com.android.server.notification.NotificationManagerService$12.enqueueToast(Ljava/lang/String;Landroid/app/ITransientNotification;II)V
com.android.server.notification.NotificationManagerService$12.enqueueToastForLog(Ljava/lang/String;Landroid/app/ITransientNotification;IILjava/lang/String;I)V
com.android.server.notification.NotificationManagerService$12.finishToken(Ljava/lang/String;Landroid/app/ITransientNotification;)V
com.android.server.notification.NotificationManagerService$12.getActiveNotifications(Ljava/lang/String;)[Landroid/service/notification/StatusBarNotification;
com.android.server.notification.NotificationManagerService$12.getActiveNotificationsFromListener(Landroid/service/notification/INotificationListener;[Ljava/lang/String;I)Landroid/content/pm/ParceledListSlice;
com.android.server.notification.NotificationManagerService$12.getAllowedAssistantAdjustments(Ljava/lang/String;)Ljava/util/List;
com.android.server.notification.NotificationManagerService$12.getAllowedNotificationAssistant()Landroid/content/ComponentName;
com.android.server.notification.NotificationManagerService$12.getAllowedNotificationAssistantForUser(I)Landroid/content/ComponentName;
com.android.server.notification.NotificationManagerService$12.getAppActiveNotifications(Ljava/lang/String;I)Landroid/content/pm/ParceledListSlice;
com.android.server.notification.NotificationManagerService$12.getAppsBypassingDndCount(I)I
com.android.server.notification.NotificationManagerService$12.getAutomaticZenRule(Ljava/lang/String;)Landroid/app/AutomaticZenRule;
com.android.server.notification.NotificationManagerService$12.getBackupPayload(I)[B
com.android.server.notification.NotificationManagerService$12.getBlockedAppCount(I)I
com.android.server.notification.NotificationManagerService$12.getBlockedChannelCount(Ljava/lang/String;I)I
com.android.server.notification.NotificationManagerService$12.getConsolidatedNotificationPolicy()Landroid/app/NotificationManager$Policy;
com.android.server.notification.NotificationManagerService$12.getDeletedChannelCount(Ljava/lang/String;I)I
com.android.server.notification.NotificationManagerService$12.getEffectsSuppressor()Landroid/content/ComponentName;
com.android.server.notification.NotificationManagerService$12.getEnabledNotificationListenerPackages()Ljava/util/List;
com.android.server.notification.NotificationManagerService$12.getEnabledNotificationListeners(I)Ljava/util/List;
com.android.server.notification.NotificationManagerService$12.getHintsFromListener(Landroid/service/notification/INotificationListener;)I
com.android.server.notification.NotificationManagerService$12.getHistoricalNotifications(Ljava/lang/String;I)[Landroid/service/notification/StatusBarNotification;
com.android.server.notification.NotificationManagerService$12.getInterruptionFilterFromListener(Landroid/service/notification/INotificationListener;)I
com.android.server.notification.NotificationManagerService$12.getNotificationChannel(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;)Landroid/app/NotificationChannel;
com.android.server.notification.NotificationManagerService$12.getNotificationChannelForPackage(Ljava/lang/String;ILjava/lang/String;Z)Landroid/app/NotificationChannel;
com.android.server.notification.NotificationManagerService$12.getNotificationChannelGroup(Ljava/lang/String;Ljava/lang/String;)Landroid/app/NotificationChannelGroup;
com.android.server.notification.NotificationManagerService$12.getNotificationChannelGroupForPackage(Ljava/lang/String;Ljava/lang/String;I)Landroid/app/NotificationChannelGroup;
com.android.server.notification.NotificationManagerService$12.getNotificationChannelGroups(Ljava/lang/String;)Landroid/content/pm/ParceledListSlice;
com.android.server.notification.NotificationManagerService$12.getNotificationChannelGroupsForPackage(Ljava/lang/String;IZ)Landroid/content/pm/ParceledListSlice;
com.android.server.notification.NotificationManagerService$12.getNotificationChannelGroupsFromPrivilegedListener(Landroid/service/notification/INotificationListener;Ljava/lang/String;Landroid/os/UserHandle;)Landroid/content/pm/ParceledListSlice;
com.android.server.notification.NotificationManagerService$12.getNotificationChannels(Ljava/lang/String;Ljava/lang/String;I)Landroid/content/pm/ParceledListSlice;
com.android.server.notification.NotificationManagerService$12.getNotificationChannelsBypassingDnd(Ljava/lang/String;I)Landroid/content/pm/ParceledListSlice;
com.android.server.notification.NotificationManagerService$12.getNotificationChannelsForPackage(Ljava/lang/String;IZ)Landroid/content/pm/ParceledListSlice;
com.android.server.notification.NotificationManagerService$12.getNotificationChannelsFromPrivilegedListener(Landroid/service/notification/INotificationListener;Ljava/lang/String;Landroid/os/UserHandle;)Landroid/content/pm/ParceledListSlice;
com.android.server.notification.NotificationManagerService$12.getNotificationDelegate(Ljava/lang/String;)Ljava/lang/String;
com.android.server.notification.NotificationManagerService$12.getNotificationPolicy(Ljava/lang/String;)Landroid/app/NotificationManager$Policy;
com.android.server.notification.NotificationManagerService$12.getNumNotificationChannelsForPackage(Ljava/lang/String;IZ)I
com.android.server.notification.NotificationManagerService$12.getPackageImportance(Ljava/lang/String;)I
com.android.server.notification.NotificationManagerService$12.getPopulatedNotificationChannelGroupForPackage(Ljava/lang/String;ILjava/lang/String;Z)Landroid/app/NotificationChannelGroup;
com.android.server.notification.NotificationManagerService$12.getPrivateNotificationsAllowed()Z
com.android.server.notification.NotificationManagerService$12.getRuleInstanceCount(Landroid/content/ComponentName;)I
com.android.server.notification.NotificationManagerService$12.getSnoozedNotificationsFromListener(Landroid/service/notification/INotificationListener;I)Landroid/content/pm/ParceledListSlice;
com.android.server.notification.NotificationManagerService$12.getZenMode()I
com.android.server.notification.NotificationManagerService$12.getZenModeConfig()Landroid/service/notification/ZenModeConfig;
com.android.server.notification.NotificationManagerService$12.getZenRules()Ljava/util/List;
com.android.server.notification.NotificationManagerService$12.hasUserApprovedBubblesForPackage(Ljava/lang/String;I)Z
com.android.server.notification.NotificationManagerService$12.isNotificationAssistantAccessGranted(Landroid/content/ComponentName;)Z
com.android.server.notification.NotificationManagerService$12.isNotificationListenerAccessGranted(Landroid/content/ComponentName;)Z
com.android.server.notification.NotificationManagerService$12.isNotificationListenerAccessGrantedForUser(Landroid/content/ComponentName;I)Z
com.android.server.notification.NotificationManagerService$12.isNotificationPolicyAccessGranted(Ljava/lang/String;)Z
com.android.server.notification.NotificationManagerService$12.isNotificationPolicyAccessGrantedForPackage(Ljava/lang/String;)Z
com.android.server.notification.NotificationManagerService$12.isPackagePaused(Ljava/lang/String;)Z
com.android.server.notification.NotificationManagerService$12.isSystemConditionProviderEnabled(Ljava/lang/String;)Z
com.android.server.notification.NotificationManagerService$12.matchesCallFilter(Landroid/os/Bundle;)Z
com.android.server.notification.NotificationManagerService$12.matchesMessageFilter(Landroid/os/Bundle;)Z
com.android.server.notification.NotificationManagerService$12.notifyConditions(Ljava/lang/String;Landroid/service/notification/IConditionProvider;[Landroid/service/notification/Condition;)V
com.android.server.notification.NotificationManagerService$12.onlyHasDefaultChannel(Ljava/lang/String;I)Z
com.android.server.notification.NotificationManagerService$12.registerListener(Landroid/service/notification/INotificationListener;Landroid/content/ComponentName;I)V
com.android.server.notification.NotificationManagerService$12.removeAutomaticZenRule(Ljava/lang/String;)Z
com.android.server.notification.NotificationManagerService$12.removeAutomaticZenRules(Ljava/lang/String;)Z
com.android.server.notification.NotificationManagerService$12.removeEdgeNotification(Ljava/lang/String;ILandroid/os/Bundle;I)V
com.android.server.notification.NotificationManagerService$12.requestBindListener(Landroid/content/ComponentName;)V
com.android.server.notification.NotificationManagerService$12.requestBindProvider(Landroid/content/ComponentName;)V
com.android.server.notification.NotificationManagerService$12.requestHintsFromListener(Landroid/service/notification/INotificationListener;I)V
com.android.server.notification.NotificationManagerService$12.requestInterruptionFilterFromListener(Landroid/service/notification/INotificationListener;I)V
com.android.server.notification.NotificationManagerService$12.requestUnbindListener(Landroid/service/notification/INotificationListener;)V
com.android.server.notification.NotificationManagerService$12.requestUnbindProvider(Landroid/service/notification/IConditionProvider;)V
com.android.server.notification.NotificationManagerService$12.setAutomaticZenRuleState(Ljava/lang/String;Landroid/service/notification/Condition;)V
com.android.server.notification.NotificationManagerService$12.setBubblesAllowed(Ljava/lang/String;IZ)V
com.android.server.notification.NotificationManagerService$12.setHideSilentStatusIcons(Z)V
com.android.server.notification.NotificationManagerService$12.setInterruptionFilter(Ljava/lang/String;I)V
com.android.server.notification.NotificationManagerService$12.setNotificationAssistantAccessGranted(Landroid/content/ComponentName;Z)V
com.android.server.notification.NotificationManagerService$12.setNotificationAssistantAccessGrantedForUser(Landroid/content/ComponentName;IZ)V
com.android.server.notification.NotificationManagerService$12.setNotificationDelegate(Ljava/lang/String;Ljava/lang/String;)V
com.android.server.notification.NotificationManagerService$12.setNotificationListenerAccessGranted(Landroid/content/ComponentName;Z)V
com.android.server.notification.NotificationManagerService$12.setNotificationListenerAccessGrantedForUser(Landroid/content/ComponentName;IZ)V
com.android.server.notification.NotificationManagerService$12.setNotificationPolicy(Ljava/lang/String;Landroid/app/NotificationManager$Policy;)V
com.android.server.notification.NotificationManagerService$12.setNotificationPolicyAccessGranted(Ljava/lang/String;Z)V
com.android.server.notification.NotificationManagerService$12.setNotificationPolicyAccessGrantedForUser(Ljava/lang/String;IZ)V
com.android.server.notification.NotificationManagerService$12.setNotificationsEnabledForPackage(Ljava/lang/String;IZ)V
com.android.server.notification.NotificationManagerService$12.setNotificationsEnabledWithImportanceLockForPackage(Ljava/lang/String;IZ)V
com.android.server.notification.NotificationManagerService$12.setNotificationsShownFromListener(Landroid/service/notification/INotificationListener;[Ljava/lang/String;)V
com.android.server.notification.NotificationManagerService$12.setOnNotificationPostedTrimFromListener(Landroid/service/notification/INotificationListener;I)V
com.android.server.notification.NotificationManagerService$12.setPrivateNotificationsAllowed(Z)V
com.android.server.notification.NotificationManagerService$12.setShowBadge(Ljava/lang/String;IZ)V
com.android.server.notification.NotificationManagerService$12.setZenMode(ILandroid/net/Uri;Ljava/lang/String;)V
com.android.server.notification.NotificationManagerService$12.shouldHideSilentStatusIcons(Ljava/lang/String;)Z
com.android.server.notification.NotificationManagerService$12.snoozeNotificationUntilContextFromListener(Landroid/service/notification/INotificationListener;Ljava/lang/String;Ljava/lang/String;)V
com.android.server.notification.NotificationManagerService$12.snoozeNotificationUntilFromListener(Landroid/service/notification/INotificationListener;Ljava/lang/String;J)V
com.android.server.notification.NotificationManagerService$12.unregisterListener(Landroid/service/notification/INotificationListener;I)V
com.android.server.notification.NotificationManagerService$12.unsnoozeNotificationFromAssistant(Landroid/service/notification/INotificationListener;Ljava/lang/String;)V
com.android.server.notification.NotificationManagerService$12.updateAutomaticZenRule(Ljava/lang/String;Landroid/app/AutomaticZenRule;)Z
com.android.server.notification.NotificationManagerService$12.updateNotificationChannelForPackage(Ljava/lang/String;ILandroid/app/NotificationChannel;)V
com.android.server.notification.NotificationManagerService$12.updateNotificationChannelFromPrivilegedListener(Landroid/service/notification/INotificationListener;Ljava/lang/String;Landroid/os/UserHandle;Landroid/app/NotificationChannel;)V
com.android.server.notification.NotificationManagerService$12.updateNotificationChannelGroupForPackage(Ljava/lang/String;ILandroid/app/NotificationChannelGroup;)V
com.android.server.notification.NotificationManagerService$12.updateNotificationChannelGroupFromPrivilegedListener(Landroid/service/notification/INotificationListener;Ljava/lang/String;Landroid/os/UserHandle;Landroid/app/NotificationChannelGroup;)V
com.android.server.notification.NotificationManagerService$12.updateNotificationChannels(Ljava/lang/String;Landroid/content/pm/ParceledListSlice;)V
com.android.server.usage.UsageStatsService$BinderService.deleteUsageStats()V
com.android.server.usage.UsageStatsService$BinderService.registerUsageStatsWatcher(Lcom/samsung/android/app/usage/IUsageStatsWatcher;)V
com.android.server.usage.UsageStatsService$BinderService.registerUsageStatsWatcherWithComponent(Lcom/samsung/android/app/usage/IUsageStatsWatcher;Ljava/util/List;)V
com.android.server.usage.UsageStatsService$BinderService.unregisterUsageStatsWatcher(Lcom/samsung/android/app/usage/IUsageStatsWatcher;)V
com.android.server.semclipboard.SemClipboardService.addClip(Landroid/content/ClipData;Ljava/lang/String;I)V
com.android.server.semclipboard.SemClipboardService.addClipboardEventListener(Lcom/samsung/android/content/clipboard/IOnClipboardEventListener;Ljava/lang/String;)V
com.android.server.semclipboard.SemClipboardService.addUserChangedListener(Lcom/samsung/android/content/clipboard/IOnUserChangedListener;Ljava/lang/String;)V
com.android.server.semclipboard.SemClipboardService.dismissDialog()V
com.android.server.semclipboard.SemClipboardService.getClip(Ljava/lang/String;Ljava/lang/String;I)Lcom/samsung/android/content/clipboard/data/SemClipData;
com.android.server.semclipboard.SemClipboardService.getClipData(ILjava/lang/String;I)Lcom/samsung/android/content/clipboard/data/SemClipData;
com.android.server.semclipboard.SemClipboardService.getClipedStrings(II)Ljava/util/List;
com.android.server.semclipboard.SemClipboardService.getClips(Ljava/lang/String;I)Ljava/util/List;
com.android.server.semclipboard.SemClipboardService.getCount()I
com.android.server.semclipboard.SemClipboardService.getFilter()I
com.android.server.semclipboard.SemClipboardService.isClipboardAllowed(I)Z
com.android.server.semclipboard.SemClipboardService.isClipboardShareAllowed(I)Z
com.android.server.semclipboard.SemClipboardService.isEnabled()Z
com.android.server.semclipboard.SemClipboardService.isPackageAllowed(I)Z
com.android.server.semclipboard.SemClipboardService.isShowing()Z
com.android.server.semclipboard.SemClipboardService.pasteClip(Ljava/lang/String;Ljava/lang/String;I)Z
com.android.server.semclipboard.SemClipboardService.registClipboardWorkingFormUiInterfaces(Landroid/sec/clipboard/IClipboardWorkingFormUiInterface;)V
com.android.server.semclipboard.SemClipboardService.removeAll(Ljava/lang/String;I)Z
com.android.server.semclipboard.SemClipboardService.removeClip(Ljava/lang/String;Ljava/lang/String;I)Z
com.android.server.semclipboard.SemClipboardService.removeClipboardEventListener(Lcom/samsung/android/content/clipboard/IOnClipboardEventListener;)V
com.android.server.semclipboard.SemClipboardService.removeUserChangedListener(Lcom/samsung/android/content/clipboard/IOnUserChangedListener;)V
com.android.server.semclipboard.SemClipboardService.setClipData(ILcom/samsung/android/content/clipboard/data/SemClipData;Ljava/lang/String;IZ)I
com.android.server.semclipboard.SemClipboardService.setClipDataFromOriginal(ILcom/samsung/android/content/clipboard/data/SemClipData;)I
com.android.server.semclipboard.SemClipboardService.setData(ILcom/samsung/android/content/clipboard/data/SemClipData;ZI)I
com.android.server.semclipboard.SemClipboardService.showDialog()V
com.android.server.semclipboard.SemClipboardService.showDialogWithType(ILandroid/sec/clipboard/IClipboardDataPasteEvent;)V
com.android.server.semclipboard.SemClipboardService.unRegistClipboardWorkingFormUiInterfaces(Landroid/sec/clipboard/IClipboardWorkingFormUiInterface;)V
com.android.server.semclipboard.SemClipboardService.updateClip(Ljava/lang/String;Lcom/samsung/android/content/clipboard/data/SemClipData;Ljava/lang/String;I)Z
com.android.server.semclipboard.SemClipboardService.updateDialogShowingState(Z)V
com.android.server.semclipboard.SemClipboardService.updateFilter(ILandroid/sec/clipboard/IClipboardDataPasteEvent;)V
com.android.server.semclipboard.SemClipboardService.updateFilterWithInputType(IILandroid/sec/clipboard/IClipboardDataPasteEvent;)V
com.android.server.desktopmode.DesktopModeService.commandDesktopModeService(II)Z
com.android.server.desktopmode.DesktopModeService.getDesktopModeKillPolicy()Landroid/os/Bundle;
com.android.server.desktopmode.DesktopModeService.getDesktopModeState()Lcom/samsung/android/desktopmode/SemDesktopModeState;
com.android.server.desktopmode.DesktopModeService.getLaunchPolicyForPackage(Landroid/content/pm/ApplicationInfo;Landroid/content/pm/ActivityInfo;)I
com.android.server.desktopmode.DesktopModeService.getLaunchPolicyRunnable(Landroid/content/pm/ApplicationInfo;)Z
com.android.server.desktopmode.DesktopModeService.isAllowed()Z
com.android.server.desktopmode.DesktopModeService.isDesktopDockConnected()Z
com.android.server.desktopmode.DesktopModeService.isDesktopMode()Z
com.android.server.desktopmode.DesktopModeService.isDeviceConnected()Z
com.android.server.desktopmode.DesktopModeService.onSecuredAppLaunched(Landroid/os/IBinder;Ljava/lang/String;)V
com.android.server.desktopmode.DesktopModeService.registerBlocker(Lcom/samsung/android/desktopmode/IDesktopModeBlocker;Ljava/lang/String;)Z
com.android.server.desktopmode.DesktopModeService.registerDesktopLauncher(Lcom/samsung/android/desktopmode/IDesktopModeLauncher;)V
com.android.server.desktopmode.DesktopModeService.registerDesktopModeListener(Lcom/samsung/android/desktopmode/IDesktopModeListener;Ljava/lang/String;)Z
com.android.server.desktopmode.DesktopModeService.registerEventListener(Lcom/samsung/android/desktopmode/IEventListener;Ljava/lang/String;)Z
com.android.server.desktopmode.DesktopModeService.setHdmiSettings(Z)V
com.android.server.desktopmode.DesktopModeService.unregisterBlocker(Lcom/samsung/android/desktopmode/IDesktopModeBlocker;)Z
com.android.server.desktopmode.DesktopModeService.unregisterDesktopModeListener(Lcom/samsung/android/desktopmode/IDesktopModeListener;)Z
com.android.server.desktopmode.DesktopModeService.unregisterEventListener(Lcom/samsung/android/desktopmode/IEventListener;)Z
com.android.server.FMRadioService.cancelAFSwitching()V
com.android.server.FMRadioService.cancelScan()Z
com.android.server.FMRadioService.cancelSeek()V
com.android.server.FMRadioService.disableAF()V
com.android.server.FMRadioService.disableDNS()V
com.android.server.FMRadioService.disableRDS()V
com.android.server.FMRadioService.enableAF()V
com.android.server.FMRadioService.enableDNS()V
com.android.server.FMRadioService.enableRDS()V
com.android.server.FMRadioService.getCurrentChannel()J
com.android.server.FMRadioService.getIntegerTunningParameter(Ljava/lang/String;I)I
com.android.server.FMRadioService.getLastScanResult()[J
com.android.server.FMRadioService.getLongTunningParameter(Ljava/lang/String;J)J
com.android.server.FMRadioService.getMaxVolume()J
com.android.server.FMRadioService.getPlayedFreq()J
com.android.server.FMRadioService.getSoftMuteMode()Z
com.android.server.FMRadioService.getStringTunningParameter(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
com.android.server.FMRadioService.getVolume()J
com.android.server.FMRadioService.isAFEnable()Z
com.android.server.FMRadioService.isAirPlaneMode()Z
com.android.server.FMRadioService.isBatteryLow()Z
com.android.server.FMRadioService.isBusy()I
com.android.server.FMRadioService.isDNSEnable()Z
com.android.server.FMRadioService.isDeviceSpeakerEnabled()Z
com.android.server.FMRadioService.isHeadsetPlugged()Z
com.android.server.FMRadioService.isOn()Z
com.android.server.FMRadioService.isRDSEnable()Z
com.android.server.FMRadioService.isScanning()Z
com.android.server.FMRadioService.isSeeking()Z
com.android.server.FMRadioService.isTvOutPlugged()Z
com.android.server.FMRadioService.mute(Z)V
com.android.server.FMRadioService.off()Z
com.android.server.FMRadioService.on()Z
com.android.server.FMRadioService.on_in_testmode()Z
com.android.server.FMRadioService.removeListener(Lcom/samsung/android/media/fmradio/internal/IFMEventListener;)V
com.android.server.FMRadioService.scan()V
com.android.server.FMRadioService.searchAll()J
com.android.server.FMRadioService.searchDown()J
com.android.server.FMRadioService.searchUp()J
com.android.server.FMRadioService.seekDown()J
com.android.server.FMRadioService.seekUp()J
com.android.server.FMRadioService.setBand(I)V
com.android.server.FMRadioService.setChannelSpacing(I)V
com.android.server.FMRadioService.setFMIntenna(Z)V
com.android.server.FMRadioService.setIntegerTunningParameter(Ljava/lang/String;I)V
com.android.server.FMRadioService.setInternetStreamingMode(Z)V
com.android.server.FMRadioService.setListener(Lcom/samsung/android/media/fmradio/internal/IFMEventListener;)V
com.android.server.FMRadioService.setLongTunningParameter(Ljava/lang/String;J)V
com.android.server.FMRadioService.setMono()V
com.android.server.FMRadioService.setRecordMode(Z)V
com.android.server.FMRadioService.setSoftmute(Z)V
com.android.server.FMRadioService.setSpeakerOn(Z)V
com.android.server.FMRadioService.setStereo()V
com.android.server.FMRadioService.setStringTunningParameter(Ljava/lang/String;Ljava/lang/String;)V
com.android.server.FMRadioService.setVolume(J)V
com.android.server.FMRadioService.tune(J)V
com.android.server.pm.ShortcutService.applyRestoreSmartSwitch(Landroid/os/ParcelFileDescriptor;I)I
com.android.server.pm.ShortcutService.getBackupShortcut(I)Landroid/os/ParcelFileDescriptor;
com.android.server.pm.ShortcutService.getBitmapPathList(I)[Ljava/lang/String;
com.android.server.pm.ShortcutService.getShortcutBitmapsFileDescriptor()Lcom/android/internal/os/IParcelFileDescriptorFactory;
com.android.server.pm.ShortcutService.requestPinShortcutAsDisplay(Ljava/lang/String;Landroid/content/pm/ShortcutInfo;Landroid/content/IntentSender;II)Z
com.android.server.pm.ShortcutService.restoreBitmapsFromBackupService(Landroid/os/ParcelFileDescriptor;Ljava/lang/String;Ljava/lang/String;)V
com.android.server.enterprise.ucm.UniversalCredentialManagerService.addPackagesToExemptList(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;ILjava/util/List;)I
com.android.server.enterprise.ucm.UniversalCredentialManagerService.addPackagesToWhiteList(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;Ljava/util/List;Landroid/os/Bundle;)I
com.android.server.enterprise.ucm.UniversalCredentialManagerService.addPackagesToWhiteListInternal(IILcom/samsung/android/knox/ucm/configurator/CredentialStorage;Ljava/util/List;Landroid/os/Bundle;)I
com.android.server.enterprise.ucm.UniversalCredentialManagerService.clearWhiteList(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;Landroid/os/Bundle;)I
com.android.server.enterprise.ucm.UniversalCredentialManagerService.configureCredentialStorageForODESettings(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;Landroid/os/Bundle;)I
com.android.server.enterprise.ucm.UniversalCredentialManagerService.configureCredentialStoragePlugin(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;Landroid/os/Bundle;)I
com.android.server.enterprise.ucm.UniversalCredentialManagerService.deleteCACertificate(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)I
com.android.server.enterprise.ucm.UniversalCredentialManagerService.deleteCertificate(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;Ljava/lang/String;)I
com.android.server.enterprise.ucm.UniversalCredentialManagerService.deleteCertificateInternal(IILcom/samsung/android/knox/ucm/configurator/CredentialStorage;Ljava/lang/String;)I
com.android.server.enterprise.ucm.UniversalCredentialManagerService.enableCredentialStorageForLockType(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;Z)I
com.android.server.enterprise.ucm.UniversalCredentialManagerService.enforceCredentialStorageAsLockType(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;Landroid/os/Bundle;)I
com.android.server.enterprise.ucm.UniversalCredentialManagerService.getAdminForEnforcedCredentialStorageAsUser(I)I
com.android.server.enterprise.ucm.UniversalCredentialManagerService.getAliases(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;)[Ljava/lang/String;
com.android.server.enterprise.ucm.UniversalCredentialManagerService.getAllCertificateAliases(Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;)[Ljava/lang/String;
com.android.server.enterprise.ucm.UniversalCredentialManagerService.getAuthType(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;)I
com.android.server.enterprise.ucm.UniversalCredentialManagerService.getAvailableCredentialStorages(Lcom/samsung/android/knox/ContextInfo;)[Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;
com.android.server.enterprise.ucm.UniversalCredentialManagerService.getCACertificate(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)Lcom/samsung/android/knox/ucm/configurator/CACertificateInfo;
com.android.server.enterprise.ucm.UniversalCredentialManagerService.getCACertificateAliases(Lcom/samsung/android/knox/ContextInfo;Landroid/os/Bundle;)[Ljava/lang/String;
com.android.server.enterprise.ucm.UniversalCredentialManagerService.getCertificateAliases(ILcom/samsung/android/knox/ucm/configurator/CredentialStorage;)[Ljava/lang/String;
com.android.server.enterprise.ucm.UniversalCredentialManagerService.getCertificateAliasesAsUser(ILcom/samsung/android/knox/ucm/configurator/CredentialStorage;)[Ljava/lang/String;
com.android.server.enterprise.ucm.UniversalCredentialManagerService.getCredentialStoragePluginConfiguration(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;)Landroid/os/Bundle;
com.android.server.enterprise.ucm.UniversalCredentialManagerService.getCredentialStorageProperty(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;Landroid/os/Bundle;)Landroid/os/Bundle;
com.android.server.enterprise.ucm.UniversalCredentialManagerService.getCredentialStorages(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)[Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;
com.android.server.enterprise.ucm.UniversalCredentialManagerService.getDefaultInstallStorage(Lcom/samsung/android/knox/ContextInfo;)Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;
com.android.server.enterprise.ucm.UniversalCredentialManagerService.getDefaultInstallStorageAsUser(I)Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;
com.android.server.enterprise.ucm.UniversalCredentialManagerService.getEnforcedCredentialStorageForLockType(Lcom/samsung/android/knox/ContextInfo;)Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;
com.android.server.enterprise.ucm.UniversalCredentialManagerService.getEnforcedCredentialStorageForLockTypeAsUser(I)Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;
com.android.server.enterprise.ucm.UniversalCredentialManagerService.getODESettingsConfiguration(Lcom/samsung/android/knox/ContextInfo;)Landroid/os/Bundle;
com.android.server.enterprise.ucm.UniversalCredentialManagerService.getPackagesFromExemptList(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;I)Ljava/util/List;
com.android.server.enterprise.ucm.UniversalCredentialManagerService.getPackagesFromWhiteList(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;Landroid/os/Bundle;)Ljava/util/List;
com.android.server.enterprise.ucm.UniversalCredentialManagerService.getStorageAuthenticationType(ILcom/samsung/android/knox/ucm/configurator/CredentialStorage;)I
com.android.server.enterprise.ucm.UniversalCredentialManagerService.getSupportedAlgorithms(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;)[Ljava/lang/String;
com.android.server.enterprise.ucm.UniversalCredentialManagerService.getWifiCertificateAliasesAsUser(ILcom/samsung/android/knox/ucm/configurator/CredentialStorage;)[Ljava/lang/String;
com.android.server.enterprise.ucm.UniversalCredentialManagerService.installCACertificate(Lcom/samsung/android/knox/ContextInfo;[BLjava/lang/String;Landroid/os/Bundle;)I
com.android.server.enterprise.ucm.UniversalCredentialManagerService.installCertificate(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;[BLjava/lang/String;Ljava/lang/String;Landroid/os/Bundle;)I
com.android.server.enterprise.ucm.UniversalCredentialManagerService.installCertificateInternal(IILcom/samsung/android/knox/ucm/configurator/CredentialStorage;[BLjava/lang/String;Landroid/os/Bundle;Z)I
com.android.server.enterprise.ucm.UniversalCredentialManagerService.isAccessAllowed(ILcom/samsung/android/knox/ucm/configurator/CredentialStorage;Landroid/os/Bundle;)Z
com.android.server.enterprise.ucm.UniversalCredentialManagerService.isCallerDelegated(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;I)Z
com.android.server.enterprise.ucm.UniversalCredentialManagerService.isCredentialStorageEnabledForLockType(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;)Z
com.android.server.enterprise.ucm.UniversalCredentialManagerService.isCredentialStorageEnabledForLockTypeAsUser(ILcom/samsung/android/knox/ucm/configurator/CredentialStorage;)Z
com.android.server.enterprise.ucm.UniversalCredentialManagerService.isCredentialStorageLocked(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;)Z
com.android.server.enterprise.ucm.UniversalCredentialManagerService.isCredentialStorageLockedAsUser(ILcom/samsung/android/knox/ucm/configurator/CredentialStorage;)Z
com.android.server.enterprise.ucm.UniversalCredentialManagerService.isCredentialStorageManaged(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;)Z
com.android.server.enterprise.ucm.UniversalCredentialManagerService.isCredentialStorageManagedAsUser(ILcom/samsung/android/knox/ucm/configurator/CredentialStorage;)Z
com.android.server.enterprise.ucm.UniversalCredentialManagerService.isPackageFromExemptList(ILcom/samsung/android/knox/ucm/configurator/CredentialStorage;I)Z
com.android.server.enterprise.ucm.UniversalCredentialManagerService.lockCredentialStorage(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;Z)I
com.android.server.enterprise.ucm.UniversalCredentialManagerService.manageCredentialStorage(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;Z)I
com.android.server.enterprise.ucm.UniversalCredentialManagerService.notifyLicenseStatus(ILjava/lang/String;)Z
com.android.server.enterprise.ucm.UniversalCredentialManagerService.removePackagesFromExemptList(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;ILjava/util/List;)I
com.android.server.enterprise.ucm.UniversalCredentialManagerService.removePackagesFromWhiteList(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;Ljava/util/List;Landroid/os/Bundle;)I
com.android.server.enterprise.ucm.UniversalCredentialManagerService.setAuthType(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;I)I
com.android.server.enterprise.ucm.UniversalCredentialManagerService.setCredentialStorageProperty(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;Landroid/os/Bundle;)Landroid/os/Bundle;
com.android.server.enterprise.ucm.UniversalCredentialManagerService.setDefaultInstallStorage(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/ucm/configurator/CredentialStorage;)I
android.app.BarBeamService.addListener(Landroid/os/IBinder;)V
android.app.BarBeamService.getCurrentStatus()Z
android.app.BarBeamService.isImplementationCompatible()Z
android.app.BarBeamService.removeListener(Landroid/os/IBinder;)V
android.app.BarBeamService.setBarcode([B)V
android.app.BarBeamService.setHopSequence([BII)V
android.app.BarBeamService.startBeaming()V
android.app.BarBeamService.startBeaming_repeat(I)V
android.app.BarBeamService.stopBeaming()V
com.android.server.SdpManagerService.addEngine(Lcom/samsung/android/knox/sdp/core/SdpCreationParam;Ljava/lang/String;Ljava/lang/String;)I
com.android.server.SdpManagerService.allow(Ljava/lang/String;Ljava/lang/String;)I
com.android.server.SdpManagerService.clearEncPkgCache(ILjava/lang/String;)Z
com.android.server.SdpManagerService.clearEncPkgData(ILjava/lang/String;)Z
com.android.server.SdpManagerService.createEncPkgDir(ILjava/lang/String;)I
com.android.server.SdpManagerService.deleteToeknFromTrusted(Ljava/lang/String;)I
com.android.server.SdpManagerService.disallow(Ljava/lang/String;Ljava/lang/String;)I
com.android.server.SdpManagerService.enroll(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
com.android.server.SdpManagerService.exists(Ljava/lang/String;)I
com.android.server.SdpManagerService.getEncPkgDataSizeInfo(ILjava/lang/String;)Landroid/content/pm/PackageStats;
com.android.server.SdpManagerService.getEngineInfo(Ljava/lang/String;)Lcom/samsung/android/knox/sdp/core/SdpEngineInfo;
com.android.server.SdpManagerService.getSupportedSDKVersion()D
com.android.server.SdpManagerService.isDefaultPathUser(I)Z
com.android.server.SdpManagerService.isLegacyEncryption(I)Z
com.android.server.SdpManagerService.isLicensed()I
com.android.server.SdpManagerService.isSDPEnabled(I)Z
com.android.server.SdpManagerService.isSdpSupported()Z
com.android.server.SdpManagerService.lock(Ljava/lang/String;)I
com.android.server.SdpManagerService.migrate(Ljava/lang/String;)I
com.android.server.SdpManagerService.onBiometricsAuthenticated(I)V
com.android.server.SdpManagerService.onDeviceOwnerLocked(I)V
com.android.server.SdpManagerService.registerClient(ILandroid/os/ISdpListener;)V
com.android.server.SdpManagerService.registerListener(Ljava/lang/String;Landroid/os/ISdpListener;)I
com.android.server.SdpManagerService.removeEngine(Ljava/lang/String;)I
com.android.server.SdpManagerService.resetPassword(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
com.android.server.SdpManagerService.saveTokenIntoTrusted(Ljava/lang/String;Ljava/lang/String;)I
com.android.server.SdpManagerService.setPassword(Ljava/lang/String;Ljava/lang/String;)I
com.android.server.SdpManagerService.systemReady()V
com.android.server.SdpManagerService.unlock(Ljava/lang/String;Ljava/lang/String;)I
com.android.server.SdpManagerService.unlockViaTrusted(Ljava/lang/String;Ljava/lang/String;)I
com.android.server.SdpManagerService.unregisterClient(ILandroid/os/ISdpListener;)V
com.android.server.SdpManagerService.unregisterListener(Ljava/lang/String;Landroid/os/ISdpListener;)I
com.android.server.SdpManagerService.verify(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
com.android.server.media.MediaResourceMonitorService$MediaResourceMonitorImpl.notifyMediaError(ILjava/lang/String;IILjava/lang/String;)V
com.android.server.media.MediaResourceMonitorService$MediaResourceMonitorImpl.notifyMediaInfo(ILjava/lang/String;IIJ)V
com.android.server.enterprise.restriction.SPDControlPolicy.getAutoSecurityPolicyUpdateMode()I
com.android.server.enterprise.restriction.SPDControlPolicy.setAutoSecurityPolicyUpdateMode(Lcom/samsung/android/knox/ContextInfo;I)Z
com.android.server.aod.AODManagerService$BinderService.acquireDoze(Landroid/os/IBinder;Ljava/lang/String;Ljava/lang/String;)V
com.android.server.aod.AODManagerService$BinderService.addLogText(Ljava/util/List;)V
com.android.server.aod.AODManagerService$BinderService.getActiveImageInfo()Ljava/lang/String;
com.android.server.aod.AODManagerService$BinderService.isAODState()Z
com.android.server.aod.AODManagerService$BinderService.isSViewCoverBrightnessHigh()Z
com.android.server.aod.AODManagerService$BinderService.readyToScreenTurningOn()V
com.android.server.aod.AODManagerService$BinderService.registerAODDozeCallback(Landroid/os/IBinder;)V
com.android.server.aod.AODManagerService$BinderService.registerAODListener(Landroid/os/IBinder;)V
com.android.server.aod.AODManagerService$BinderService.releaseDoze(Landroid/os/IBinder;)V
com.android.server.aod.AODManagerService$BinderService.requestAODToast(Ljava/lang/String;Lcom/samsung/android/aod/AODToast;)V
com.android.server.aod.AODManagerService$BinderService.requestExpandNotificationPanel(Landroid/service/notification/StatusBarNotification;)V
com.android.server.aod.AODManagerService$BinderService.setLiveClockCommand(III[I)I
com.android.server.aod.AODManagerService$BinderService.setLiveClockImage(II[BLjava/lang/String;)I
com.android.server.aod.AODManagerService$BinderService.setLiveClockInfo(IJJJJJJJJ)I
com.android.server.aod.AODManagerService$BinderService.setLiveClockNeedle([B)V
com.android.server.aod.AODManagerService$BinderService.unregisterAODDozeCallback(Landroid/os/IBinder;)V
com.android.server.aod.AODManagerService$BinderService.unregisterAODListener(Landroid/os/IBinder;)V
com.android.server.aod.AODManagerService$BinderService.updateAODTspRect(IIII)V
com.android.server.aod.AODManagerService$BinderService.writeAODCommand(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.server.wifioffload.WifiOffloadService.checkAppForWiFiOffloading(Ljava/lang/String;)V
com.android.server.wifioffload.WifiOffloadService.checkAppNeedsMoveToFront(I)V
com.android.server.wifioffload.WifiOffloadService.startTimer()V
com.samsung.android.game.GameManagerService.addGame(Ljava/lang/String;Z)Z
com.samsung.android.game.GameManagerService.cancelDeathRestart(Landroid/os/IBinder;)V
com.samsung.android.game.GameManagerService.getForegroundApp()Ljava/lang/String;
com.samsung.android.game.GameManagerService.getGameList()Ljava/util/List;
com.samsung.android.game.GameManagerService.getGameMap()Ljava/util/Map;
com.samsung.android.game.GameManagerService.getGamePkgDataIncServer(Ljava/lang/String;)Lcom/samsung/android/game/GamePkgData;
com.samsung.android.game.GameManagerService.getMode()I
com.samsung.android.game.GameManagerService.getSosPolicy(Ljava/lang/String;)Ljava/lang/String;
com.samsung.android.game.GameManagerService.getTopActivityName()Ljava/lang/String;
com.samsung.android.game.GameManagerService.getVersion()Ljava/lang/String;
com.samsung.android.game.GameManagerService.identifyForegroundApp()I
com.samsung.android.game.GameManagerService.identifyGamePackage(Ljava/lang/String;)I
com.samsung.android.game.GameManagerService.initGameManager(ILjava/util/Map;)Z
com.samsung.android.game.GameManagerService.notifyMultiWindowStyleChangedLocked(Landroid/content/ComponentName;Z)V
com.samsung.android.game.GameManagerService.registerCallback(Lcom/samsung/android/game/IGameManagerCallback;)Z
com.samsung.android.game.GameManagerService.requestDeathRestart(Landroid/os/IBinder;Landroid/content/Intent;)V
com.samsung.android.game.GameManagerService.requestWithJson(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
com.samsung.android.game.GameManagerService.setMode(I)Z
com.samsung.android.game.GameManagerService.setPackageConfigurations(Ljava/util/List;)Z
com.samsung.android.game.GameManagerService.setPeformanceMode(ILjava/lang/String;)Z
com.samsung.android.game.GameManagerService.setTargetFrameRate(Landroid/os/IBinder;I)Z
com.samsung.android.game.GameManagerService.unregisterCallback(Lcom/samsung/android/game/IGameManagerCallback;)Z
com.android.server.inputmethod.InputMethodManagerService.addServiceForDirectPenInput(Ljava/lang/String;Landroid/os/IBinder;)V
com.android.server.inputmethod.InputMethodManagerService.dismissAndShowAgainInputMethodPicker()V
com.android.server.inputmethod.InputMethodManagerService.getCurTokenDisplayId()I
com.android.server.inputmethod.InputMethodManagerService.getCurrentFocusDisplayID()I
com.android.server.inputmethod.InputMethodManagerService.getDexSettingsValue(Ljava/lang/String;Ljava/lang/String;)Z
com.android.server.inputmethod.InputMethodManagerService.getWACOMPen()Z
com.android.server.inputmethod.InputMethodManagerService.isAccessoryKeyboard()I
com.android.server.inputmethod.InputMethodManagerService.isCurrentInputMethodAsSamsungKeyboard()Z
com.android.server.inputmethod.InputMethodManagerService.isInputMethodShown()Z
com.android.server.inputmethod.InputMethodManagerService.minimizeSoftInput(Lcom/android/internal/view/IInputMethodClient;I)Z
com.android.server.inputmethod.InputMethodManagerService.setInputMethodSwitchDisable(Lcom/android/internal/view/IInputMethodClient;Z)V
com.android.server.inputmethod.InputMethodManagerService.undoMinimizeSoftInput()V
com.android.server.inputmethod.InputMethodManagerService.userActivity(JII)V
com.samsung.android.authnrservice.service.SemAuthnrService.deleteFile(Ljava/lang/String;)Z
com.samsung.android.authnrservice.service.SemAuthnrService.getDrkKeyHandle()[B
com.samsung.android.authnrservice.service.SemAuthnrService.getFiles(Ljava/lang/String;Ljava/lang/String;)Ljava/util/List;
com.samsung.android.authnrservice.service.SemAuthnrService.getMatchedFilePaths(Ljava/lang/String;Ljava/lang/String;)Ljava/util/List;
com.samsung.android.authnrservice.service.SemAuthnrService.getVersion()I
com.samsung.android.authnrservice.service.SemAuthnrService.getWrappedObject([B)[B
com.samsung.android.authnrservice.service.SemAuthnrService.initialize(Landroid/os/ParcelFileDescriptor;JJ)Z
com.samsung.android.authnrservice.service.SemAuthnrService.initializeDrk()Z
com.samsung.android.authnrservice.service.SemAuthnrService.initializePreloadedTa(I)Z
com.samsung.android.authnrservice.service.SemAuthnrService.initializeWithPreloadedTa()Z
com.samsung.android.authnrservice.service.SemAuthnrService.process([B)[B
com.samsung.android.authnrservice.service.SemAuthnrService.processPreloadedTa(I[B)[B
com.samsung.android.authnrservice.service.SemAuthnrService.processWithPreloadedTa([BLjava/lang/String;)[B
com.samsung.android.authnrservice.service.SemAuthnrService.readFile(Ljava/lang/String;)Ljava/lang/String;
com.samsung.android.authnrservice.service.SemAuthnrService.setChallenge([B)Z
com.samsung.android.authnrservice.service.SemAuthnrService.terminate()Z
com.samsung.android.authnrservice.service.SemAuthnrService.terminateDrk()Z
com.samsung.android.authnrservice.service.SemAuthnrService.terminatePreloadedTa(I)Z
com.samsung.android.authnrservice.service.SemAuthnrService.terminateWithPreloadedTa()Z
com.samsung.android.authnrservice.service.SemAuthnrService.writeFile([BLjava/lang/String;)Z
com.android.server.power.PowerManagerService$BinderService.getCurrentBrightness(Z)F
com.android.server.power.PowerManagerService$BinderService.getLastUserActivityTime(I)J
com.android.server.power.PowerManagerService$BinderService.isInteractiveForDisplay(I)Z
com.android.server.power.PowerManagerService$BinderService.resetPersonalAutoBrightnessData()V
com.android.server.power.PowerManagerService$BinderService.semWakeUp(JILjava/lang/String;I)V
com.android.server.power.PowerManagerService$BinderService.setAutoBrightnessForEbookOnly(Z)V
com.android.server.power.PowerManagerService$BinderService.setAutoBrightnessLimit(IIZ)V
com.android.server.power.PowerManagerService$BinderService.setButtonBrightnessLimit(I)V
com.android.server.power.PowerManagerService$BinderService.setCameraMode(ZLandroid/os/IBinder;)V
com.android.server.power.PowerManagerService$BinderService.setCoverType(I)V
com.android.server.power.PowerManagerService$BinderService.setDozeOverrideFromAod(IIILandroid/os/IBinder;)V
com.android.server.power.PowerManagerService$BinderService.setDualScreenPolicy(I)V
com.android.server.power.PowerManagerService$BinderService.setEarlyWakeUp(Z)V
com.android.server.power.PowerManagerService$BinderService.setFreezingScreenBrightness(Z)V
com.android.server.power.PowerManagerService$BinderService.setKeyboardVisibility(Z)V
com.android.server.power.PowerManagerService$BinderService.setLCDFlashMode(ZLandroid/os/IBinder;)V
com.android.server.power.PowerManagerService$BinderService.setMasterBrightnessLimit(II)V
com.android.server.power.PowerManagerService$BinderService.setProximityDebounceTime(Landroid/os/IBinder;II)V
com.android.server.power.PowerManagerService$BinderService.setScreenBrightnessScaleFactor(FLandroid/os/IBinder;)V
com.android.server.power.PowerManagerService$BinderService.setSmartGlowState(IIIIIIIIIIIIII)V
com.android.server.power.PowerManagerService$BinderService.setTemporaryMarkerScreenBrightnessSettingOverride(I)V
com.android.server.power.PowerManagerService$BinderService.switchForceLcdBacklightOffState()V
com.android.server.power.PowerManagerService$BinderService.systemReboot(Ljava/lang/String;)V
com.android.server.power.PowerManagerService$BinderService.updateCoverState(Z)V
com.android.server.power.PowerManagerService$BinderService.wakeUpWithReason(JII)V
com.android.server.enterprise.container.KnoxMUMContainerPolicy.addConfigurationType(Lcom/samsung/android/knox/ContextInfo;Ljava/util/List;)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.addHomeShortcutToPersonal(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;Ljava/lang/String;)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.addNetworkSSID(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.addPackageToExternalStorageBlackList(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/AppIdentity;)I
com.android.server.enterprise.container.KnoxMUMContainerPolicy.addPackageToExternalStorageWhiteList(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/AppIdentity;)I
com.android.server.enterprise.container.KnoxMUMContainerPolicy.addPackageToInstallWhiteList(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/AppIdentity;)I
com.android.server.enterprise.container.KnoxMUMContainerPolicy.addSecureKeyPad(ILjava/lang/String;)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.allowLayoutSwitching(Lcom/samsung/android/knox/ContextInfo;Z)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.cancelCreateContainer(Lcom/samsung/android/knox/container/ContainerCreationParams;)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.checkProvisioningPreCondition(Ljava/lang/String;I)I
com.android.server.enterprise.container.KnoxMUMContainerPolicy.clearNetworkSSID(Lcom/samsung/android/knox/ContextInfo;)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.clearPackagesFromExternalStorageBlackList(Lcom/samsung/android/knox/ContextInfo;)I
com.android.server.enterprise.container.KnoxMUMContainerPolicy.clearPackagesFromExternalStorageWhiteList(Lcom/samsung/android/knox/ContextInfo;)I
com.android.server.enterprise.container.KnoxMUMContainerPolicy.createContainer(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/container/CreationParams;I)I
com.android.server.enterprise.container.KnoxMUMContainerPolicy.createContainerInternal(Lcom/samsung/android/knox/container/ContainerCreationParams;)I
com.android.server.enterprise.container.KnoxMUMContainerPolicy.createContainerMarkSuccess(Lcom/samsung/android/knox/container/ContainerCreationParams;)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.createContainerWithCallback(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/container/CreationParams;ILcom/samsung/android/knox/IEnterpriseContainerCallback;)I
com.android.server.enterprise.container.KnoxMUMContainerPolicy.deleteHomeShortcutFromPersonal(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;Ljava/lang/String;)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.doSelfUninstall()V
com.android.server.enterprise.container.KnoxMUMContainerPolicy.enableBluetooth(Lcom/samsung/android/knox/ContextInfo;ZLandroid/os/Bundle;)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.enableExternalStorage(Lcom/samsung/android/knox/ContextInfo;Z)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.enableNFC(Lcom/samsung/android/knox/ContextInfo;ZLandroid/os/Bundle;)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.enableUsbAccess(Lcom/samsung/android/knox/ContextInfo;ZLandroid/os/Bundle;)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.enforceMultifactorAuthentication(Lcom/samsung/android/knox/ContextInfo;Z)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.forceResetPassword(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;I)I
com.android.server.enterprise.container.KnoxMUMContainerPolicy.getConfigurationType(Lcom/samsung/android/knox/ContextInfo;I)Ljava/util/List;
com.android.server.enterprise.container.KnoxMUMContainerPolicy.getConfigurationTypeByName(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)Ljava/util/List;
com.android.server.enterprise.container.KnoxMUMContainerPolicy.getConfigurationTypes(Lcom/samsung/android/knox/ContextInfo;)Ljava/util/List;
com.android.server.enterprise.container.KnoxMUMContainerPolicy.getContainerCreationParams(I)Lcom/samsung/android/knox/container/ContainerCreationParams;
com.android.server.enterprise.container.KnoxMUMContainerPolicy.getContainers(Lcom/samsung/android/knox/ContextInfo;)Ljava/util/List;
com.android.server.enterprise.container.KnoxMUMContainerPolicy.getCustomResource(ILjava/lang/String;)Ljava/lang/String;
com.android.server.enterprise.container.KnoxMUMContainerPolicy.getDefaultConfigurationTypes()Ljava/util/List;
com.android.server.enterprise.container.KnoxMUMContainerPolicy.getEnforceAuthForContainer(Lcom/samsung/android/knox/ContextInfo;)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.getFIDOInfo(Lcom/samsung/android/knox/ContextInfo;)Landroid/os/Bundle;
com.android.server.enterprise.container.KnoxMUMContainerPolicy.getHibernationTimeout(Lcom/samsung/android/knox/ContextInfo;)J
com.android.server.enterprise.container.KnoxMUMContainerPolicy.getKnoxCustomBadgePolicy()Ljava/util/List;
com.android.server.enterprise.container.KnoxMUMContainerPolicy.getNetworkSSID(Lcom/samsung/android/knox/ContextInfo;)Ljava/util/List;
com.android.server.enterprise.container.KnoxMUMContainerPolicy.getOwnContainers()[Lcom/samsung/android/knox/container/EnterpriseContainerObject;
com.android.server.enterprise.container.KnoxMUMContainerPolicy.getPackageSignaturesFromExternalStorageWhiteList(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)[Landroid/content/pm/Signature;
com.android.server.enterprise.container.KnoxMUMContainerPolicy.getPackagesFromExternalStorageBlackList(Lcom/samsung/android/knox/ContextInfo;)Ljava/util/List;
com.android.server.enterprise.container.KnoxMUMContainerPolicy.getPackagesFromExternalStorageWhiteList(Lcom/samsung/android/knox/ContextInfo;)Ljava/util/List;
com.android.server.enterprise.container.KnoxMUMContainerPolicy.getPackagesFromInstallWhiteList(Lcom/samsung/android/knox/ContextInfo;)Ljava/util/List;
com.android.server.enterprise.container.KnoxMUMContainerPolicy.getProvisioningState()Landroid/os/Bundle;
com.android.server.enterprise.container.KnoxMUMContainerPolicy.getSecureKeyPad(I)Ljava/util/List;
com.android.server.enterprise.container.KnoxMUMContainerPolicy.getStatus(Lcom/samsung/android/knox/ContextInfo;)I
com.android.server.enterprise.container.KnoxMUMContainerPolicy.getStatusInternal(I)I
com.android.server.enterprise.container.KnoxMUMContainerPolicy.isBluetoothEnabled(Lcom/samsung/android/knox/ContextInfo;)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.isBluetoothEnabledBeforeFOTA(Lcom/samsung/android/knox/ContextInfo;)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.isContactsSharingEnabled(Lcom/samsung/android/knox/ContextInfo;)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.isEmergencyModeSupported()Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.isExternalStorageEnabled(Lcom/samsung/android/knox/ContextInfo;)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.isLayoutSwitchingAllowed(Lcom/samsung/android/knox/ContextInfo;)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.isMultifactorAuthenticationEnforced(Lcom/samsung/android/knox/ContextInfo;)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.isNFCEnabled(Lcom/samsung/android/knox/ContextInfo;)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.isPackageAllowedToAccessExternalSdcard(Lcom/samsung/android/knox/ContextInfo;I)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.isPackageInInstallWhiteList(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.isResetContainerOnRebootEnabled(Lcom/samsung/android/knox/ContextInfo;)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.isSettingsOptionEnabled(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.isSettingsOptionEnabledInternal(ILjava/lang/String;Z)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.isUsbAccessEnabled(Lcom/samsung/android/knox/ContextInfo;)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.lockContainer(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.registerBroadcastReceiverIntent(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;Ljava/lang/String;)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.removeConfigurationType(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.removeContainer(Lcom/samsung/android/knox/ContextInfo;)I
com.android.server.enterprise.container.KnoxMUMContainerPolicy.removeContainerInternal(I)I
com.android.server.enterprise.container.KnoxMUMContainerPolicy.removeNetworkSSID(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.removePackageFromExternalStorageBlackList(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/AppIdentity;)I
com.android.server.enterprise.container.KnoxMUMContainerPolicy.removePackageFromExternalStorageWhiteList(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/AppIdentity;)I
com.android.server.enterprise.container.KnoxMUMContainerPolicy.removePackageFromInstallWhiteList(Lcom/samsung/android/knox/ContextInfo;Lcom/samsung/android/knox/AppIdentity;)I
com.android.server.enterprise.container.KnoxMUMContainerPolicy.removeSecureKeyPad(ILjava/lang/String;)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.resetContainerOnReboot(Lcom/samsung/android/knox/ContextInfo;Z)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.setContactsSharingEnabled(Lcom/samsung/android/knox/ContextInfo;Z)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.setCustomResource(ILcom/samsung/android/knox/ContextInfo;Landroid/os/Bundle;)I
com.android.server.enterprise.container.KnoxMUMContainerPolicy.setEnforceAuthForContainer(Lcom/samsung/android/knox/ContextInfo;Z)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.setFIDOInfo(Lcom/samsung/android/knox/ContextInfo;Landroid/os/Bundle;)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.setHibernationTimeout(Lcom/samsung/android/knox/ContextInfo;J)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.setSettingsOptionEnabled(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;Z)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.unlockContainer(Lcom/samsung/android/knox/ContextInfo;)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.unregisterBroadcastReceiverIntent(Lcom/samsung/android/knox/ContextInfo;Ljava/lang/String;Ljava/lang/String;)Z
com.android.server.enterprise.container.KnoxMUMContainerPolicy.updateProvisioningState(Landroid/os/Bundle;)Z
com.android.server.spay.UpdateReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.kddi.android.CpaNotiReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.server.pm.ShortcutBackupReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.samsung.android.security.mdf.MdfService.MdfReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
com.android.server.DrmEventReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
