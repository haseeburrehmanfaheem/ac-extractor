com.amazon.android.service.lockscreen.LockScreenService$BinderService.checkPassword(ILjava/lang/String;)I
com.amazon.android.service.lockscreen.LockScreenService$BinderService.clearResetPasswordToken()Z
com.amazon.android.service.lockscreen.LockScreenService$BinderService.getCurrentFailedPasswordAttempts(I)I
com.amazon.android.service.lockscreen.LockScreenService$BinderService.getLockType(I)I
com.amazon.android.service.lockscreen.LockScreenService$BinderService.getResetPasswordToken()[B
com.amazon.android.service.lockscreen.LockScreenService$BinderService.isLockScreenDisabled(I)Z
com.amazon.android.service.lockscreen.LockScreenService$BinderService.isResetPasswordTokenActive()Z
com.amazon.android.service.lockscreen.LockScreenService$BinderService.isResetPasswordTokenActiveForUser(I)Z
com.amazon.android.service.lockscreen.LockScreenService$BinderService.isSecure(I)Z
com.amazon.android.service.lockscreen.LockScreenService$BinderService.lockNow(I)V
com.amazon.android.service.lockscreen.LockScreenService$BinderService.reportFailedPasswordAttempt(I)V
com.amazon.android.service.lockscreen.LockScreenService$BinderService.reportSuccessfulPasswordAttempt(I)V
com.amazon.android.service.lockscreen.LockScreenService$BinderService.resetPasswordWithToken(Ljava/lang/String;[B)Z
com.amazon.android.service.lockscreen.LockScreenService$BinderService.setLockScreenDisabled(IZ)V
com.amazon.android.service.lockscreen.LockScreenService$BinderService.setResetPasswordToken([B)Z
com.android.server.net.NetworkStatsService.forceUpdateIfaces([Landroid/net/Network;)V
com.android.server.LocationManagerService.clearTestProviderEnabled(Ljava/lang/String;Ljava/lang/String;)V
com.android.server.LocationManagerService.clearTestProviderLocation(Ljava/lang/String;Ljava/lang/String;)V
com.android.server.LocationManagerService.clearTestProviderStatus(Ljava/lang/String;Ljava/lang/String;)V
com.android.server.LocationManagerService.getNetworkProviderPackage()Ljava/lang/String;
com.android.server.LocationManagerService.providerMeetsCriteria(Ljava/lang/String;Landroid/location/Criteria;)Z
com.android.server.LocationManagerService.reportLocation(Landroid/location/Location;Z)V
com.android.server.LocationManagerService.reportLocationBatch(Ljava/util/List;)V
com.android.server.LocationManagerService.setLocationEnabledForUser(ZI)V
com.android.server.LocationManagerService.setProviderEnabledForUser(Ljava/lang/String;ZI)Z
com.amazon.android.server.db.AmazonDropBoxManagerService$BinderService.getNextEntry(Ljava/lang/String;J)Lamazon/os/AmazonDropboxManagerEntryImpl;
com.amazon.android.server.db.AmazonDropBoxManagerService$BinderService.sync()V
com.android.server.location.ContextHubService.createClient(Landroid/hardware/location/IContextHubClientCallback;I)Landroid/hardware/location/IContextHubClient;
com.amazon.appcompatwhitelist.AppCompatWhitelistService$AppCompatWhitelistBinderService.isPackageWhitelisted(Ljava/lang/String;Ljava/lang/String;)Z
com.amazon.android.service.MarketplaceService$BinderService.readMarketplaceInfo()Lcom/amazon/android/marketplace/MarketplaceInfo;
com.amazon.android.service.MarketplaceService$BinderService.readPfm()Ljava/lang/String;
com.amazon.android.service.MarketplaceService$BinderService.writeMarketplaceInfo(Lcom/amazon/android/marketplace/MarketplaceInfo;)V
com.amazon.android.service.MarketplaceService$BinderService.writePfm(Ljava/lang/String;)V
com.amazon.android.service.amazonprofile.AmazonProfileService$BinderService.delistProfile(Ljava/lang/String;Ljava/lang/String;)I
com.amazon.android.service.amazonprofile.AmazonProfileService$BinderService.delistProfileUserSpecified(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
com.amazon.android.service.amazonprofile.AmazonProfileService$BinderService.disableAppForProfile(Ljava/lang/String;Ljava/lang/String;)I
com.amazon.android.service.amazonprofile.AmazonProfileService$BinderService.disableAppForProfileUserSpecified(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
com.amazon.android.service.amazonprofile.AmazonProfileService$BinderService.enableAppForProfile(Ljava/lang/String;Ljava/lang/String;)I
com.amazon.android.service.amazonprofile.AmazonProfileService$BinderService.enableAppForProfileUserSpecified(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
com.amazon.android.service.amazonprofile.AmazonProfileService$BinderService.filterEvent(I)Z
com.amazon.android.service.amazonprofile.AmazonProfileService$BinderService.filterKeyEvent(Landroid/view/KeyEvent;)Z
com.amazon.android.service.amazonprofile.AmazonProfileService$BinderService.getActiveProfileForApp(Ljava/lang/String;)Lcom/amazon/android/amazonprofile/Profile;
com.amazon.android.service.amazonprofile.AmazonProfileService$BinderService.getActiveProfileForAppUserSpecified(Ljava/lang/String;Ljava/lang/String;)Lcom/amazon/android/amazonprofile/Profile;
com.amazon.android.service.amazonprofile.AmazonProfileService$BinderService.getActiveProfileForProgramId(Ljava/lang/String;)Lcom/amazon/android/amazonprofile/Profile;
com.amazon.android.service.amazonprofile.AmazonProfileService$BinderService.getActiveProfileForProgramIdUserSpecified(Ljava/lang/String;Ljava/lang/String;)Lcom/amazon/android/amazonprofile/Profile;
com.amazon.android.service.amazonprofile.AmazonProfileService$BinderService.getAdultValidatedState()Z
com.amazon.android.service.amazonprofile.AmazonProfileService$BinderService.getAppListForProfile(Ljava/lang/String;)Ljava/util/List;
com.amazon.android.service.amazonprofile.AmazonProfileService$BinderService.getAppListForProfileUserSpecified(Ljava/lang/String;Ljava/lang/String;)Ljava/util/List;
com.amazon.android.service.amazonprofile.AmazonProfileService$BinderService.getDefaultProgramIdOnDevice()Ljava/lang/String;
com.amazon.android.service.amazonprofile.AmazonProfileService$BinderService.initiateLauncher()I
com.amazon.android.service.amazonprofile.AmazonProfileService$BinderService.isAppEnabledForProfile(Ljava/lang/String;Ljava/lang/String;)Z
com.amazon.android.service.amazonprofile.AmazonProfileService$BinderService.isAppEnabledForProfileUserSpecified(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z
com.amazon.android.service.amazonprofile.AmazonProfileService$BinderService.isChildPINEnabled()Z
com.amazon.android.service.amazonprofile.AmazonProfileService$BinderService.isChildPinValidated()Z
com.amazon.android.service.amazonprofile.AmazonProfileService$BinderService.isDeviceSleeping()Z
com.amazon.android.service.amazonprofile.AmazonProfileService$BinderService.isLastKeyEventLongPress()Z
com.amazon.android.service.amazonprofile.AmazonProfileService$BinderService.isProfilePickerReady()Z
com.amazon.android.service.amazonprofile.AmazonProfileService$BinderService.pendingReleaseNote(I)I
com.amazon.android.service.amazonprofile.AmazonProfileService$BinderService.profileSyncUpdate()I
com.amazon.android.service.amazonprofile.AmazonProfileService$BinderService.registerActiveProfileEventCallback(Ljava/util/List;Lcom/amazon/android/amazonprofile/IActiveProfileEventCallback;)I
com.amazon.android.service.amazonprofile.AmazonProfileService$BinderService.registerActiveProfileEventCallbackAllPrograms(Lcom/amazon/android/amazonprofile/IActiveProfileEventCallback;)I
com.amazon.android.service.amazonprofile.AmazonProfileService$BinderService.registerPartnerKeyInputCallback(Lcom/amazon/android/amazonprofile/IPartnerKeyInputCallback;)I
com.amazon.android.service.amazonprofile.AmazonProfileService$BinderService.registerProfileValidateCallback(Lcom/amazon/android/amazonprofile/IProfileValidateCallback;)I
com.amazon.android.service.amazonprofile.AmazonProfileService$BinderService.sendProfileBroadcast(Landroid/content/Intent;)Z
com.amazon.android.service.amazonprofile.AmazonProfileService$BinderService.setActiveProfile(Lcom/amazon/android/amazonprofile/Profile;)I
com.amazon.android.service.amazonprofile.AmazonProfileService$BinderService.setBlackCurtain(Z)Z
com.amazon.android.service.amazonprofile.AmazonProfileService$BinderService.setChildPIN(Z)Z
com.amazon.android.service.amazonprofile.AmazonProfileService$BinderService.setOrientationVideoOnTop(Z)Z
com.amazon.android.service.amazonprofile.AmazonProfileService$BinderService.setStatus(I)Z
com.amazon.android.service.amazonprofile.AmazonProfileService$BinderService.startProfilePicker(I)V
com.amazon.android.service.amazonprofile.AmazonProfileService$BinderService.unregisterAccount(Ljava/lang/String;Ljava/lang/String;Z)I
com.amazon.android.service.amazonprofile.AmazonProfileService$BinderService.unregisterActiveProfileEventCallback(Lcom/amazon/android/amazonprofile/IActiveProfileEventCallback;)I
com.amazon.android.service.amazonprofile.AmazonProfileService$BinderService.unregisterPartnerKeyInputCallback(Lcom/amazon/android/amazonprofile/IPartnerKeyInputCallback;)I
com.amazon.android.service.amazonprofile.AmazonProfileService$BinderService.unregisterProfileValidateCallback(Lcom/amazon/android/amazonprofile/IProfileValidateCallback;)I
com.amazon.android.service.amazonprofile.AmazonProfileService$BinderService.unregisterUser(Ljava/lang/String;Ljava/lang/String;)I
com.amazon.android.service.amazonprofile.AmazonProfileService$BinderService.updateProfileCount(Ljava/lang/String;I)Z
com.amazon.android.service.amazonprofile.AmazonProfileService$BinderService.validateAdultState()I
com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub.startRecognitionForIntent(Landroid/os/ParcelUuid;Landroid/app/PendingIntent;Landroid/hardware/soundtrigger/SoundTrigger$RecognitionConfig;)I
com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub.stopRecognitionForIntent(Landroid/os/ParcelUuid;)I
com.android.server.am.ActivityManagerService.activityDestroyed(Landroid/os/IBinder;)V
com.android.server.am.ActivityManagerService.activityIdle(Landroid/os/IBinder;Landroid/content/res/Configuration;Z)V
com.android.server.am.ActivityManagerService.activityPaused(Landroid/os/IBinder;)V
com.android.server.am.ActivityManagerService.activityRelaunched(Landroid/os/IBinder;)V
com.android.server.am.ActivityManagerService.activityResumed(Landroid/os/IBinder;)V
com.android.server.am.ActivityManagerService.activitySlept(Landroid/os/IBinder;)V
com.android.server.am.ActivityManagerService.activityStopped(Landroid/os/IBinder;Landroid/os/Bundle;Landroid/os/PersistableBundle;Ljava/lang/CharSequence;)V
com.android.server.am.ActivityManagerService.addAppTask(Landroid/os/IBinder;Landroid/content/Intent;Landroid/app/ActivityManager$TaskDescription;Landroid/graphics/Bitmap;)I
com.android.server.am.ActivityManagerService.alwaysShowUnsupportedCompileSdkWarning(Landroid/content/ComponentName;)V
com.android.server.am.ActivityManagerService.backupAgentCreated(Ljava/lang/String;Landroid/os/IBinder;)V
com.android.server.am.ActivityManagerService.checkGrantUriPermission(ILjava/lang/String;Landroid/net/Uri;II)I
com.android.server.am.ActivityManagerService.clearGrantedUriPermissions(Ljava/lang/String;I)V
com.android.server.am.ActivityManagerService.clearPendingBackup()V
com.android.server.am.ActivityManagerService.convertFromTranslucent(Landroid/os/IBinder;)Z
com.android.server.am.ActivityManagerService.convertToTranslucent(Landroid/os/IBinder;Landroid/os/Bundle;)Z
com.android.server.am.ActivityManagerService.crashApplication(IILjava/lang/String;ILjava/lang/String;Z)V
com.android.server.am.ActivityManagerService.createStackOnDisplay(I)I
com.android.server.am.ActivityManagerService.dismissKeyguard(Landroid/os/IBinder;Lcom/android/internal/policy/IKeyguardDismissCallback;Ljava/lang/CharSequence;)V
com.android.server.am.ActivityManagerService.dismissPip(ZI)V
com.android.server.am.ActivityManagerService.dismissSplitScreenMode(Z)V
com.android.server.am.ActivityManagerService.dumpHeap(Ljava/lang/String;IZZZLjava/lang/String;Landroid/os/ParcelFileDescriptor;)Z
com.android.server.am.ActivityManagerService.enterPictureInPictureMode(Landroid/os/IBinder;Landroid/app/PictureInPictureParams;)Z
com.android.server.am.ActivityManagerService.exitFreeformMode(Landroid/os/IBinder;)V
com.android.server.am.ActivityManagerService.finishActivityAffinity(Landroid/os/IBinder;)Z
com.android.server.am.ActivityManagerService.finishSubActivity(Landroid/os/IBinder;Ljava/lang/String;I)V
com.android.server.am.ActivityManagerService.finishVoiceTask(Landroid/service/voice/IVoiceInteractionSession;)V
com.android.server.am.ActivityManagerService.getActivityClassForToken(Landroid/os/IBinder;)Landroid/content/ComponentName;
com.android.server.am.ActivityManagerService.getActivityDisplayId(Landroid/os/IBinder;)I
com.android.server.am.ActivityManagerService.getActivityOptions(Landroid/os/IBinder;)Landroid/os/Bundle;
com.android.server.am.ActivityManagerService.getAppTaskThumbnailSize()Landroid/graphics/Point;
com.android.server.am.ActivityManagerService.getAppTasks(Ljava/lang/String;)Ljava/util/List;
com.android.server.am.ActivityManagerService.getAssistContextExtras(I)Landroid/os/Bundle;
com.android.server.am.ActivityManagerService.getCallingActivity(Landroid/os/IBinder;)Landroid/content/ComponentName;
com.android.server.am.ActivityManagerService.getCallingPackage(Landroid/os/IBinder;)Ljava/lang/String;
com.android.server.am.ActivityManagerService.getContentProvider(Landroid/app/IApplicationThread;Ljava/lang/String;IZ)Landroid/app/ContentProviderHolder;
com.android.server.am.ActivityManagerService.getContentProviderExternal(Ljava/lang/String;ILandroid/os/IBinder;)Landroid/app/ContentProviderHolder;
com.android.server.am.ActivityManagerService.getDeviceConfigurationInfo()Landroid/content/pm/ConfigurationInfo;
com.android.server.am.ActivityManagerService.getFrontActivityScreenCompatMode()I
com.android.server.am.ActivityManagerService.getGrantedUriPermissions(Ljava/lang/String;I)Landroid/content/pm/ParceledListSlice;
com.android.server.am.ActivityManagerService.getLastResumedActivityUserId()I
com.android.server.am.ActivityManagerService.getMaxNumPictureInPictureActions(Landroid/os/IBinder;)I
com.android.server.am.ActivityManagerService.getPackageAskScreenCompat(Ljava/lang/String;)Z
com.android.server.am.ActivityManagerService.getPackageForToken(Landroid/os/IBinder;)Ljava/lang/String;
com.android.server.am.ActivityManagerService.getPackageScreenCompatMode(Ljava/lang/String;)I
com.android.server.am.ActivityManagerService.getPersistedUriPermissions(Ljava/lang/String;Z)Landroid/content/pm/ParceledListSlice;
com.android.server.am.ActivityManagerService.getRequestedOrientation(Landroid/os/IBinder;)I
com.android.server.am.ActivityManagerService.getStackInfo(II)Landroid/app/ActivityManager$StackInfo;
com.android.server.am.ActivityManagerService.getTaskDescription(I)Landroid/app/ActivityManager$TaskDescription;
com.android.server.am.ActivityManagerService.getTaskDescriptionIcon(Ljava/lang/String;I)Landroid/graphics/Bitmap;
com.android.server.am.ActivityManagerService.getUriPermissionOwnerForActivity(Landroid/os/IBinder;)Landroid/os/IBinder;
com.android.server.am.ActivityManagerService.grantUriPermissionFromOwner(Landroid/os/IBinder;ILjava/lang/String;Landroid/net/Uri;III)V
com.android.server.am.ActivityManagerService.inputDispatchingTimedOut(IZLjava/lang/String;)J
com.android.server.am.ActivityManagerService.isAppForeground(I)Z
com.android.server.am.ActivityManagerService.isAssistDataAllowedOnCurrentActivity()Z
com.android.server.am.ActivityManagerService.isImmersive(Landroid/os/IBinder;)Z
com.android.server.am.ActivityManagerService.isInMultiWindowMode(Landroid/os/IBinder;)Z
com.android.server.am.ActivityManagerService.isInPictureInPictureMode(Landroid/os/IBinder;)Z
com.android.server.am.ActivityManagerService.isRootVoiceInteraction(Landroid/os/IBinder;)Z
com.android.server.am.ActivityManagerService.keyguardGoingAway(I)V
com.android.server.am.ActivityManagerService.launchAssistIntent(Landroid/content/Intent;ILjava/lang/String;ILandroid/os/Bundle;)Z
com.android.server.am.ActivityManagerService.moveStackToDisplay(II)V
com.android.server.am.ActivityManagerService.moveTaskBackwards(I)V
com.android.server.am.ActivityManagerService.moveTaskToFront(IILandroid/os/Bundle;)V
com.android.server.am.ActivityManagerService.moveTasksToFullscreenStack(IZ)V
com.android.server.am.ActivityManagerService.navigateUpTo(Landroid/os/IBinder;Landroid/content/Intent;ILandroid/content/Intent;)Z
com.android.server.am.ActivityManagerService.newUriPermissionOwner(Ljava/lang/String;)Landroid/os/IBinder;
com.android.server.am.ActivityManagerService.notifyActivityDrawn(Landroid/os/IBinder;)V
com.android.server.am.ActivityManagerService.notifyEnterAnimationComplete(Landroid/os/IBinder;)V
com.android.server.am.ActivityManagerService.notifyLaunchTaskBehindComplete(Landroid/os/IBinder;)V
com.android.server.am.ActivityManagerService.notifyPinnedStackAnimationEnded()V
com.android.server.am.ActivityManagerService.notifyPinnedStackAnimationStarted()V
com.android.server.am.ActivityManagerService.overridePendingTransition(Landroid/os/IBinder;Ljava/lang/String;II)V
com.android.server.am.ActivityManagerService.registerRemoteAnimationForNextActivityStart(Ljava/lang/String;Landroid/view/RemoteAnimationAdapter;)V
com.android.server.am.ActivityManagerService.registerRemoteAnimations(Landroid/os/IBinder;Landroid/view/RemoteAnimationDefinition;)V
com.android.server.am.ActivityManagerService.releaseActivityInstance(Landroid/os/IBinder;)Z
com.android.server.am.ActivityManagerService.releasePersistableUriPermission(Landroid/net/Uri;ILjava/lang/String;I)V
com.android.server.am.ActivityManagerService.releaseSomeActivities(Landroid/app/IApplicationThread;)V
com.android.server.am.ActivityManagerService.removeStacksInWindowingModes([I)V
com.android.server.am.ActivityManagerService.removeStacksWithActivityTypes([I)V
com.android.server.am.ActivityManagerService.reportActivityFullyDrawn(Landroid/os/IBinder;Z)V
com.android.server.am.ActivityManagerService.reportAssistContextExtras(Landroid/os/IBinder;Landroid/os/Bundle;Landroid/app/assist/AssistStructure;Landroid/app/assist/AssistContent;Landroid/net/Uri;)V
com.android.server.am.ActivityManagerService.reportSizeConfigurations(Landroid/os/IBinder;[I[I[I)V
com.android.server.am.ActivityManagerService.requestAssistContextExtras(ILandroid/app/IAssistDataReceiver;Landroid/os/Bundle;Landroid/os/IBinder;ZZ)Z
com.android.server.am.ActivityManagerService.requestAutofillData(Landroid/app/IAssistDataReceiver;Landroid/os/Bundle;Landroid/os/IBinder;I)Z
com.android.server.am.ActivityManagerService.resizePinnedStack(Landroid/graphics/Rect;Landroid/graphics/Rect;)V
com.android.server.am.ActivityManagerService.revokeUriPermissionFromOwner(Landroid/os/IBinder;Landroid/net/Uri;II)V
com.android.server.am.ActivityManagerService.setDisablePreviewScreenshots(Landroid/os/IBinder;Z)V
com.android.server.am.ActivityManagerService.setFocusedTask(I)V
com.android.server.am.ActivityManagerService.setFrontActivityScreenCompatMode(I)V
com.android.server.am.ActivityManagerService.setImmersive(Landroid/os/IBinder;Z)V
com.android.server.am.ActivityManagerService.setLockScreenShown(ZZI)V
com.android.server.am.ActivityManagerService.setPackageAskScreenCompat(Ljava/lang/String;Z)V
com.android.server.am.ActivityManagerService.setPictureInPictureParams(Landroid/os/IBinder;Landroid/app/PictureInPictureParams;)V
com.android.server.am.ActivityManagerService.setServiceForeground(Landroid/content/ComponentName;Landroid/os/IBinder;ILandroid/app/Notification;I)V
com.android.server.am.ActivityManagerService.setShowWhenLocked(Landroid/os/IBinder;Z)V
com.android.server.am.ActivityManagerService.setSplitScreenResizing(Z)V
com.android.server.am.ActivityManagerService.setTaskDescription(Landroid/os/IBinder;Landroid/app/ActivityManager$TaskDescription;)V
com.android.server.am.ActivityManagerService.setTaskWindowingMode(IIZ)V
com.android.server.am.ActivityManagerService.setTaskWindowingModeSplitScreenPrimary(IIZZLandroid/graphics/Rect;Z)Z
com.android.server.am.ActivityManagerService.setTurnScreenOn(Landroid/os/IBinder;Z)V
com.android.server.am.ActivityManagerService.setVoiceKeepAwake(Landroid/service/voice/IVoiceInteractionSession;Z)V
com.android.server.am.ActivityManagerService.setVrMode(Landroid/os/IBinder;ZLandroid/content/ComponentName;)I
com.android.server.am.ActivityManagerService.setVrThread(I)V
com.android.server.am.ActivityManagerService.shouldUpRecreateTask(Landroid/os/IBinder;Ljava/lang/String;)Z
com.android.server.am.ActivityManagerService.showAssistFromActivity(Landroid/os/IBinder;Landroid/os/Bundle;)Z
com.android.server.am.ActivityManagerService.showLockTaskEscapeMessage(Landroid/os/IBinder;)V
com.android.server.am.ActivityManagerService.startActivities(Landroid/app/IApplicationThread;Ljava/lang/String;[Landroid/content/Intent;[Ljava/lang/String;Landroid/os/IBinder;Landroid/os/Bundle;I)I
com.android.server.am.ActivityManagerService.startActivityAndWait(Landroid/app/IApplicationThread;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/os/IBinder;Ljava/lang/String;IILandroid/app/ProfilerInfo;Landroid/os/Bundle;I)Landroid/app/WaitResult;
com.android.server.am.ActivityManagerService.startActivityAsCaller(Landroid/app/IApplicationThread;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/os/IBinder;Ljava/lang/String;IILandroid/app/ProfilerInfo;Landroid/os/Bundle;ZI)I
com.android.server.am.ActivityManagerService.startActivityIntentSender(Landroid/app/IApplicationThread;Landroid/content/IIntentSender;Landroid/os/IBinder;Landroid/content/Intent;Ljava/lang/String;Landroid/os/IBinder;Ljava/lang/String;IIILandroid/os/Bundle;)I
com.android.server.am.ActivityManagerService.startActivityWithConfig(Landroid/app/IApplicationThread;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/os/IBinder;Ljava/lang/String;IILandroid/content/res/Configuration;Landroid/os/Bundle;I)I
com.android.server.am.ActivityManagerService.startAssistantActivity(Ljava/lang/String;IILandroid/content/Intent;Ljava/lang/String;Landroid/os/Bundle;I)I
com.android.server.am.ActivityManagerService.startInPlaceAnimationOnFrontMostApplication(Landroid/os/Bundle;)V
com.android.server.am.ActivityManagerService.startLocalVoiceInteraction(Landroid/os/IBinder;Landroid/os/Bundle;)V
com.android.server.am.ActivityManagerService.startLockTaskModeByToken(Landroid/os/IBinder;)V
com.android.server.am.ActivityManagerService.startNextMatchingActivity(Landroid/os/IBinder;Landroid/content/Intent;Landroid/os/Bundle;)Z
com.android.server.am.ActivityManagerService.startVoiceActivity(Ljava/lang/String;IILandroid/content/Intent;Ljava/lang/String;Landroid/service/voice/IVoiceInteractionSession;Lcom/android/internal/app/IVoiceInteractor;ILandroid/app/ProfilerInfo;Landroid/os/Bundle;I)I
com.android.server.am.ActivityManagerService.stopLocalVoiceInteraction(Landroid/os/IBinder;)V
com.android.server.am.ActivityManagerService.stopLockTaskModeByToken(Landroid/os/IBinder;)V
com.android.server.am.ActivityManagerService.stopSystemLockTaskMode()V
com.android.server.am.ActivityManagerService.supportsLocalVoiceInteraction()Z
com.android.server.am.ActivityManagerService.takePersistableUriPermission(Landroid/net/Uri;ILjava/lang/String;I)V
com.android.server.am.ActivityManagerService.updateDisplayOverrideConfiguration(Landroid/content/res/Configuration;I)Z
com.android.server.am.ActivityManagerService.updateLockTaskFeatures(II)V
com.android.server.am.ActivityManagerService.willActivityBeVisible(Landroid/os/IBinder;)Z
com.amazon.fireos.runtimepersistent.RuntimePersistentService$BinderService.publishFeature(Ljava/lang/String;Z)V
com.amazon.service.speech.AmazonSpeechService$AmazonSpeechServiceBinder.registerWakeWordObserver(Lcom/amazon/speech/IAmazonWakeWordObserver;)Z
com.amazon.service.speech.AmazonSpeechService$AmazonSpeechServiceBinder.unregisterWakeWordObserver(Lcom/amazon/speech/IAmazonWakeWordObserver;)Z
com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper.addClientActiveCallback(Landroid/hardware/fingerprint/IFingerprintClientActiveCallback;)V
com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper.addLockoutResetCallback(Landroid/hardware/fingerprint/IFingerprintServiceLockoutResetCallback;)V
com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper.authenticate(Landroid/os/IBinder;JILandroid/hardware/fingerprint/IFingerprintServiceReceiver;ILjava/lang/String;Landroid/os/Bundle;Landroid/hardware/biometrics/IBiometricPromptReceiver;)V
com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper.cancelAuthentication(Landroid/os/IBinder;Ljava/lang/String;)V
com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper.cancelEnrollment(Landroid/os/IBinder;)V
com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper.enroll(Landroid/os/IBinder;[BILandroid/hardware/fingerprint/IFingerprintServiceReceiver;ILjava/lang/String;)V
com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper.enumerate(Landroid/os/IBinder;ILandroid/hardware/fingerprint/IFingerprintServiceReceiver;)V
com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper.getAuthenticatorId(Ljava/lang/String;)J
com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper.getEnrolledFingerprints(ILjava/lang/String;)Ljava/util/List;
com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper.hasEnrolledFingerprints(ILjava/lang/String;)Z
com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper.isClientActive()Z
com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper.isHardwareDetected(JLjava/lang/String;)Z
com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper.postEnroll(Landroid/os/IBinder;)I
com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper.preEnroll(Landroid/os/IBinder;)J
com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper.remove(Landroid/os/IBinder;IIILandroid/hardware/fingerprint/IFingerprintServiceReceiver;)V
com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper.removeClientActiveCallback(Landroid/hardware/fingerprint/IFingerprintClientActiveCallback;)V
com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper.rename(IILjava/lang/String;)V
com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper.resetTimeout([B)V
com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper.setActiveUser(I)V
com.android.server.job.JobSchedulerService$JobSchedulerStub.getAllPendingJobs()Ljava/util/List;
com.android.server.ConnectivityService.getAllVpnInfo()[Lcom/android/internal/net/VpnInfo;
com.android.server.ConnectivityService.registerNetworkAgent(Landroid/os/Messenger;Landroid/net/NetworkInfo;Landroid/net/LinkProperties;Landroid/net/NetworkCapabilities;ILandroid/net/NetworkMisc;)I
com.android.server.ConnectivityService.registerNetworkFactory(Landroid/os/Messenger;Ljava/lang/String;)V
com.android.server.ConnectivityService.setAlwaysOnVpnPackage(ILjava/lang/String;Z)Z
com.android.server.ConnectivityService.startNattKeepalive(Landroid/net/Network;ILandroid/os/Messenger;Landroid/os/IBinder;Ljava/lang/String;ILjava/lang/String;)V
com.amazon.android.internal.server.input.AmazonInputManagerService$KeyEventBinderService.addPartnerAppConfig(Lcom/amazon/android/server/amazoninputmanager/PartnerAppInfo;)Z
com.amazon.android.internal.server.input.AmazonInputManagerService$KeyEventBinderService.createPartnerAppInfo(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;)Lcom/amazon/android/server/amazoninputmanager/PartnerAppInfo;
com.amazon.android.internal.server.input.AmazonInputManagerService$KeyEventBinderService.getInputLockingMode()I
com.amazon.android.internal.server.input.AmazonInputManagerService$KeyEventBinderService.getKeyEventDescription(Landroid/view/KeyEvent;)Lcom/amazon/android/server/amazoninputmanager/KeyEventDescription;
com.amazon.android.internal.server.input.AmazonInputManagerService$KeyEventBinderService.getLastPairedRemoteSkuId()I
com.amazon.android.internal.server.input.AmazonInputManagerService$KeyEventBinderService.setInputLockingMode(I)Z
com.amazon.android.internal.server.input.AmazonInputManagerService$KeyEventBinderService.showInputLockingNotification(I)V
com.amazon.android.internal.server.input.AmazonInputManagerService$KeyEventBinderService.updatePartnerIntentExtras(Ljava/lang/String;Landroid/os/Bundle;)Z
com.android.server.accessibility.AccessibilityManagerService.notifyAccessibilityButtonClicked()V
com.amazon.server.crash.CrashReporterService$BinderService.deleteCrashes()Z
com.amazon.server.crash.CrashReporterService$BinderService.getCrashHeader()Lcom/amazon/android/crash/CrashCountHeader;
com.amazon.server.crash.CrashReporterService$BinderService.getCrashMetadata()Ljava/util/List;
com.amazon.android.service.devicemodelinfo.DeviceModelInfoService$BinderService.getCountryOfPurchase()Ljava/lang/String;
com.amazon.android.service.devicemodelinfo.DeviceModelInfoService$BinderService.getListOfCountries()Ljava/util/List;
com.amazon.android.service.devicemodelinfo.DeviceModelInfoService$BinderService.getOemSerialNumber()Ljava/lang/String;
com.amazon.android.service.devicemodelinfo.DeviceModelInfoService$BinderService.getPictureQualityVersion(Ljava/lang/String;)Ljava/lang/String;
com.amazon.android.service.devicemodelinfo.DeviceModelInfoService$BinderService.getRemoteType()I
com.amazon.android.service.devicemodelinfo.DeviceModelInfoService$BinderService.isCountryPickerEnabled()Z
com.amazon.android.service.devicemodelinfo.DeviceModelInfoService$BinderService.registerCountryOfPurchaseChangeCallback(Lcom/amazon/android/devicemodelinfo/ICountryOfPurchaseCallback;)Z
com.amazon.android.service.devicemodelinfo.DeviceModelInfoService$BinderService.setCountryOfPurchase(Lcom/amazon/android/devicemodelinfo/Country;)Z
com.amazon.android.service.devicemodelinfo.DeviceModelInfoService$BinderService.unRegisterCountryOfPurchaseChangeCallback(Lcom/amazon/android/devicemodelinfo/ICountryOfPurchaseCallback;)Z
com.android.server.wm.WindowManagerService.createInputConsumer(Landroid/os/IBinder;Ljava/lang/String;Landroid/view/InputChannel;)V
com.android.server.wm.WindowManagerService.destroyInputConsumer(Ljava/lang/String;)Z
com.android.server.wm.WindowManagerService.disableKeyguard(Landroid/os/IBinder;Ljava/lang/String;)V
com.android.server.wm.WindowManagerService.getNavBarPosition()I
com.android.server.wm.WindowManagerService.getPendingAppTransition()I
com.android.server.wm.WindowManagerService.getPreferredOptionsPanelGravity()I
com.android.server.wm.WindowManagerService.hasNavigationBar()Z
com.android.server.wm.WindowManagerService.inputMethodClientHasFocus(Lcom/android/internal/view/IInputMethodClient;)Z
com.android.server.wm.WindowManagerService.isKeyguardSecure()Z
com.android.server.wm.WindowManagerService.openSession(Landroid/view/IWindowSessionCallback;Lcom/android/internal/view/IInputMethodClient;Lcom/android/internal/view/IInputContext;)Landroid/view/IWindowSession;
com.android.server.wm.WindowManagerService.overridePendingAppTransition(Ljava/lang/String;IILandroid/os/IRemoteCallback;)V
com.android.server.wm.WindowManagerService.overridePendingAppTransitionAspectScaledThumb(Landroid/graphics/GraphicBuffer;IIIILandroid/os/IRemoteCallback;Z)V
com.android.server.wm.WindowManagerService.overridePendingAppTransitionClipReveal(IIII)V
com.android.server.wm.WindowManagerService.overridePendingAppTransitionInPlace(Ljava/lang/String;I)V
com.android.server.wm.WindowManagerService.overridePendingAppTransitionMultiThumb([Landroid/view/AppTransitionAnimationSpec;Landroid/os/IRemoteCallback;Landroid/os/IRemoteCallback;Z)V
com.android.server.wm.WindowManagerService.overridePendingAppTransitionMultiThumbFuture(Landroid/view/IAppTransitionAnimationSpecsFuture;Landroid/os/IRemoteCallback;Z)V
com.android.server.wm.WindowManagerService.overridePendingAppTransitionRemote(Landroid/view/RemoteAnimationAdapter;)V
com.android.server.wm.WindowManagerService.overridePendingAppTransitionScaleUp(IIII)V
com.android.server.wm.WindowManagerService.overridePendingAppTransitionThumb(Landroid/graphics/GraphicBuffer;IILandroid/os/IRemoteCallback;Z)V
com.android.server.wm.WindowManagerService.reenableKeyguard(Landroid/os/IBinder;)V
com.android.server.wm.WindowManagerService.setFocusedApp(Landroid/os/IBinder;Z)V
com.android.server.wm.WindowManagerService.setNewDisplayOverrideConfiguration(Landroid/content/res/Configuration;I)[I
com.android.server.wm.WindowManagerService.statusBarVisibilityChanged(I)V
com.android.server.wm.WindowManagerService.updateOrientationFromAppTokens(Landroid/content/res/Configuration;Landroid/os/IBinder;I)Landroid/content/res/Configuration;
com.android.server.display.DisplayManagerService$BinderService.setSaturationLevel(F)V
com.amazon.android.service.audioeffects.AmazonAudioDapService$BinderService.clearAllAudioEffects()Z
com.amazon.android.service.audioeffects.AmazonAudioDapService$BinderService.fetchSettings(Z)Ljava/lang/String;
com.amazon.android.service.audioeffects.AmazonAudioDapService$BinderService.getPackageNameOfAudioEffectsOwner()Ljava/lang/String;
com.amazon.android.service.audioeffects.AmazonAudioDapService$BinderService.isAudioEffectsTableEmpty()Z
com.amazon.android.service.audioeffects.AmazonAudioDapService$BinderService.registerAudioEffect(IIII)Z
com.amazon.android.service.audioeffects.AmazonAudioDapService$BinderService.setDapProfile(I)Z
com.amazon.android.service.audioeffects.AmazonAudioDapService$BinderService.setFeatureConfig(II)V
com.android.server.backup.Trampoline.adbBackup(Landroid/os/ParcelFileDescriptor;ZZZZZZZZ[Ljava/lang/String;)V
com.android.server.backup.Trampoline.adbRestore(Landroid/os/ParcelFileDescriptor;)V
com.android.server.backup.Trampoline.beginRestoreSession(Ljava/lang/String;Ljava/lang/String;)Landroid/app/backup/IRestoreSession;
com.android.server.backup.Trampoline.filterAppsEligibleForBackup([Ljava/lang/String;)[Ljava/lang/String;
com.android.server.backup.Trampoline.fullTransportBackup([Ljava/lang/String;)V
com.android.server.backup.Trampoline.getAvailableRestoreToken(Ljava/lang/String;)J
com.android.server.backup.Trampoline.getDataManagementLabel(Ljava/lang/String;)Ljava/lang/String;
com.android.server.backup.Trampoline.initializeTransports([Ljava/lang/String;Landroid/app/backup/IBackupObserver;)V
com.android.server.backup.Trampoline.isAppEligibleForBackup(Ljava/lang/String;)Z
com.android.server.backup.Trampoline.listAllTransportComponents()[Landroid/content/ComponentName;
com.android.server.backup.Trampoline.selectBackupTransportAsync(Landroid/content/ComponentName;Landroid/app/backup/ISelectBackupTransportCallback;)V
com.android.server.backup.Trampoline.setBackupProvisioned(Z)V
com.android.server.backup.Trampoline.updateTransportAttributes(Landroid/content/ComponentName;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;)V
com.android.server.BatteryService$BatteryPropertiesRegistrar.registerListener(Landroid/os/IBatteryPropertiesListener;)V
com.android.server.BatteryService$BatteryPropertiesRegistrar.unregisterListener(Landroid/os/IBatteryPropertiesListener;)V
android.app.IWallpaperManager.getHeightHint()I
android.app.IWallpaperManager.getWallpaperColors(II)Landroid/app/WallpaperColors;
android.app.IWallpaperManager.getWidthHint()I
android.app.IWallpaperManager.registerWallpaperColorsCallback(Landroid/app/IWallpaperManagerCallback;I)V
android.app.IWallpaperManager.setDimensionHints(IILjava/lang/String;)V
android.app.IWallpaperManager.setDisplayPadding(Landroid/graphics/Rect;Ljava/lang/String;)V
android.app.IWallpaperManager.setInAmbientMode(ZZ)V
android.app.IWallpaperManager.unregisterWallpaperColorsCallback(Landroid/app/IWallpaperManagerCallback;I)V
com.android.server.TelephonyRegistry.notifyDataConnection(IZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/net/LinkProperties;Landroid/net/NetworkCapabilities;IZ)V
com.android.server.TelephonyRegistry.notifyDataConnectionFailed(Ljava/lang/String;Ljava/lang/String;)V
com.android.server.TelephonyRegistry.notifyDataConnectionFailedForSubscriber(ILjava/lang/String;Ljava/lang/String;)V
com.android.server.TelephonyRegistry.notifyDataConnectionForSubscriber(IIZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/net/LinkProperties;Landroid/net/NetworkCapabilities;IZ)V
com.android.server.TelephonyRegistry.notifyDisconnectCause(II)V
com.android.server.TelephonyRegistry.notifyOemHookRawEventForSubscriber(I[B)V
com.android.server.TelephonyRegistry.notifyOtaspChanged(I)V
com.android.server.TelephonyRegistry.notifyPreciseCallState(III)V
com.android.server.TelephonyRegistry.notifyPreciseDataConnectionFailed(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.server.TelephonyRegistry.notifyVoLteServiceStateChanged(Landroid/telephony/VoLteServiceState;)V
com.android.server.power.PowerManagerService$BinderService.setPowerSaveMode(Z)Z
com.android.server.power.PowerManagerService$BinderService.wakeUp(JLjava/lang/String;Ljava/lang/String;)V
com.amazon.android.service.thermal.AmazonThermalService$BinderService.thermal_get_data_native(II)I
com.android.server.TextServicesManagerService.finishSpellCheckerService(Lcom/android/internal/textservice/ISpellCheckerSessionListener;)V
com.android.server.TextServicesManagerService.getCurrentSpellChecker(Ljava/lang/String;)Landroid/view/textservice/SpellCheckerInfo;
com.android.server.TextServicesManagerService.getCurrentSpellCheckerSubtype(Ljava/lang/String;Z)Landroid/view/textservice/SpellCheckerSubtype;
com.android.server.TextServicesManagerService.getEnabledSpellCheckers()[Landroid/view/textservice/SpellCheckerInfo;
com.android.server.TextServicesManagerService.getSpellCheckerService(Ljava/lang/String;Ljava/lang/String;Lcom/android/internal/textservice/ITextServicesSessionListener;Lcom/android/internal/textservice/ISpellCheckerSessionListener;Landroid/os/Bundle;)V
com.android.server.TextServicesManagerService.isSpellCheckerEnabled()Z
com.amazon.server.UsageStats.AmazonUsageStatsService$BinderService.processHeartbeat()V
com.amazon.server.UsageStats.AmazonUsageStatsService$BinderService.reportUsageEvent(Lcom/amazon/UsageStats/ReasonCode;)I
com.android.server.StorageManagerService.mountObb(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/os/storage/IObbActionListener;I)V
com.android.server.clipboard.ClipboardService$ClipboardImpl.addPrimaryClipChangedListener(Landroid/content/IOnPrimaryClipChangedListener;Ljava/lang/String;)V
com.android.server.clipboard.ClipboardService$ClipboardImpl.clearPrimaryClip(Ljava/lang/String;)V
com.android.server.clipboard.ClipboardService$ClipboardImpl.getPrimaryClip(Ljava/lang/String;)Landroid/content/ClipData;
com.android.server.clipboard.ClipboardService$ClipboardImpl.getPrimaryClipDescription(Ljava/lang/String;)Landroid/content/ClipDescription;
com.android.server.clipboard.ClipboardService$ClipboardImpl.hasClipboardText(Ljava/lang/String;)Z
com.android.server.clipboard.ClipboardService$ClipboardImpl.hasPrimaryClip(Ljava/lang/String;)Z
com.android.server.clipboard.ClipboardService$ClipboardImpl.removePrimaryClipChangedListener(Landroid/content/IOnPrimaryClipChangedListener;)V
com.android.server.clipboard.ClipboardService$ClipboardImpl.setPrimaryClip(Landroid/content/ClipData;Ljava/lang/String;)V
com.android.server.AlarmManagerService$2.currentNetworkTimeMillis()J
com.android.server.AlarmManagerService$2.getNextAlarmClock(I)Landroid/app/AlarmManager$AlarmClockInfo;
com.android.server.AlarmManagerService$2.getNextWakeFromIdleTime()J
com.android.server.AlarmManagerService$2.remove(Landroid/app/PendingIntent;Landroid/app/IAlarmListener;)V
com.android.server.AlarmManagerService$2.set(Ljava/lang/String;IJJJILandroid/app/PendingIntent;Landroid/app/IAlarmListener;Ljava/lang/String;Landroid/os/WorkSource;Landroid/app/AlarmManager$AlarmClockInfo;)V
com.android.server.AlarmManagerService$2.setTime(J)Z
com.android.server.AlarmManagerService$2.setTimeZone(Ljava/lang/String;)V
com.fireos.service.eve.EveService$BinderService.addActivityLifeCycleData(Lcom/fireos/eve/ActivityLifeCycleData;)V
com.fireos.service.eve.EveService$BinderService.addAnrData(Lcom/fireos/eve/AnrData;)V
com.fireos.service.eve.EveService$BinderService.addEventData(Lcom/fireos/eve/EventData;)V
com.fireos.service.eve.EveService$BinderService.addFrameData(Lcom/fireos/eve/FrameData;)V
com.fireos.service.eve.EveService$BinderService.addLmkData(Lcom/fireos/eve/LmkData;)V
com.fireos.service.eve.EveService$BinderService.addProcessLifeCycleData(Lcom/fireos/eve/ProcessLifeCycleData;)V
com.fireos.service.eve.EveService$BinderService.addServiceLifeCycleData(Lcom/fireos/eve/ServiceLifeCycleData;)V
com.fireos.service.eve.EveService$BinderService.addThermalData(Lcom/fireos/eve/ThermalData;)V
com.android.server.pm.PackageManagerService.getPermissionGrantBackup(I)[B
com.android.server.pm.PackageManagerService.installExistingPackageAsUser(Ljava/lang/String;III)I
com.android.server.pm.PackageManagerService.isUpgrade()Z
com.android.server.pm.PackageManagerService.nextPackageToClean(Landroid/content/pm/PackageCleanItem;)Landroid/content/pm/PackageCleanItem;
com.android.server.pm.PackageManagerService.restorePermissionGrants([BI)V
com.android.server.pm.PackageManagerService.setPackagesSuspendedAsUser([Ljava/lang/String;ZLandroid/os/PersistableBundle;Landroid/os/PersistableBundle;Ljava/lang/String;Ljava/lang/String;I)[Ljava/lang/String;
com.android.server.pm.PackageManagerService.updatePermissionFlags(Ljava/lang/String;Ljava/lang/String;III)V
com.android.server.wifi.WifiServiceImpl.disconnect(Ljava/lang/String;)V
com.android.server.wifi.WifiServiceImpl.getAllMatchingWifiConfigs(Landroid/net/wifi/ScanResult;)Ljava/util/List;
com.android.server.wifi.WifiServiceImpl.getConfiguredNetworks()Landroid/content/pm/ParceledListSlice;
com.android.server.wifi.WifiServiceImpl.getMatchingOsuProviders(Landroid/net/wifi/ScanResult;)Ljava/util/List;
com.android.server.wifi.WifiServiceImpl.getMatchingWifiConfig(Landroid/net/wifi/ScanResult;)Landroid/net/wifi/WifiConfiguration;
com.android.server.wifi.WifiServiceImpl.getPasspointConfigurations()Ljava/util/List;
com.android.server.wifi.WifiServiceImpl.getPrivilegedConfiguredNetworks()Landroid/content/pm/ParceledListSlice;
com.android.server.wifi.WifiServiceImpl.getSupportedFeatures()I
com.android.server.wifi.WifiServiceImpl.reassociate(Ljava/lang/String;)V
com.android.server.wifi.WifiServiceImpl.reconnect(Ljava/lang/String;)V
com.android.server.wifi.WifiServiceImpl.releaseMulticastLock()V
com.android.server.devicepolicy.BaseIDevicePolicyManager.addOverrideApn(Landroid/content/ComponentName;Landroid/telephony/data/ApnSetting;)I
com.android.server.devicepolicy.BaseIDevicePolicyManager.forceSecurityLogs()J
com.android.server.devicepolicy.BaseIDevicePolicyManager.generateKeyPair(Landroid/content/ComponentName;Ljava/lang/String;Ljava/lang/String;Landroid/security/keystore/ParcelableKeyGenParameterSpec;ILandroid/security/keymaster/KeymasterCertificateChain;)Z
com.android.server.devicepolicy.BaseIDevicePolicyManager.getEndUserSessionMessage(Landroid/content/ComponentName;)Ljava/lang/CharSequence;
com.android.server.devicepolicy.BaseIDevicePolicyManager.getMeteredDataDisabledPackages(Landroid/content/ComponentName;)Ljava/util/List;
com.android.server.devicepolicy.BaseIDevicePolicyManager.getOverrideApns(Landroid/content/ComponentName;)Ljava/util/List;
com.android.server.devicepolicy.BaseIDevicePolicyManager.getStartUserSessionMessage(Landroid/content/ComponentName;)Ljava/lang/CharSequence;
com.android.server.devicepolicy.BaseIDevicePolicyManager.getTransferOwnershipBundle()Landroid/os/PersistableBundle;
com.android.server.devicepolicy.BaseIDevicePolicyManager.isMeteredDataDisabledPackageForUser(Landroid/content/ComponentName;Ljava/lang/String;I)Z
com.android.server.devicepolicy.BaseIDevicePolicyManager.isOverrideApnEnabled(Landroid/content/ComponentName;)Z
com.android.server.devicepolicy.BaseIDevicePolicyManager.isUsingUnifiedPassword(Landroid/content/ComponentName;)Z
com.android.server.devicepolicy.BaseIDevicePolicyManager.removeOverrideApn(Landroid/content/ComponentName;I)Z
com.android.server.devicepolicy.BaseIDevicePolicyManager.setDefaultSmsApplication(Landroid/content/ComponentName;Ljava/lang/String;)V
com.android.server.devicepolicy.BaseIDevicePolicyManager.setEndUserSessionMessage(Landroid/content/ComponentName;Ljava/lang/CharSequence;)V
com.android.server.devicepolicy.BaseIDevicePolicyManager.setKeyPairCertificate(Landroid/content/ComponentName;Ljava/lang/String;Ljava/lang/String;[B[BZ)Z
com.android.server.devicepolicy.BaseIDevicePolicyManager.setMeteredDataDisabledPackages(Landroid/content/ComponentName;Ljava/util/List;)Ljava/util/List;
com.android.server.devicepolicy.BaseIDevicePolicyManager.setOverrideApnsEnabled(Landroid/content/ComponentName;Z)V
com.android.server.devicepolicy.BaseIDevicePolicyManager.setStartUserSessionMessage(Landroid/content/ComponentName;Ljava/lang/CharSequence;)V
com.android.server.devicepolicy.BaseIDevicePolicyManager.setSystemSetting(Landroid/content/ComponentName;Ljava/lang/String;Ljava/lang/String;)V
com.android.server.devicepolicy.BaseIDevicePolicyManager.transferOwnership(Landroid/content/ComponentName;Landroid/content/ComponentName;Landroid/os/PersistableBundle;)V
com.android.server.devicepolicy.BaseIDevicePolicyManager.updateOverrideApn(Landroid/content/ComponentName;ILandroid/telephony/data/ApnSetting;)Z
com.amazon.liquiddetection.LiquidDetectionService$LiquidDetectionBinder.getCurrentState()I
com.amazon.liquiddetection.LiquidDetectionService$LiquidDetectionBinder.registerListener(Lcom/amazon/liquiddetection/ILiquidDetectionEventListener;)V
com.amazon.liquiddetection.LiquidDetectionService$LiquidDetectionBinder.unregisterListener(Lcom/amazon/liquiddetection/ILiquidDetectionEventListener;)V
com.android.server.InputMethodManagerService.addClient(Lcom/android/internal/view/IInputMethodClient;Lcom/android/internal/view/IInputContext;II)V
com.android.server.InputMethodManagerService.clearLastInputMethodWindowForTransition(Landroid/os/IBinder;)V
com.android.server.InputMethodManagerService.createInputContentUriToken(Landroid/os/IBinder;Landroid/net/Uri;Ljava/lang/String;)Lcom/android/internal/inputmethod/IInputContentUriToken;
com.android.server.InputMethodManagerService.finishInput(Lcom/android/internal/view/IInputMethodClient;)V
com.android.server.InputMethodManagerService.getCurrentInputMethodSubtype()Landroid/view/inputmethod/InputMethodSubtype;
com.android.server.InputMethodManagerService.getEnabledInputMethodList()Ljava/util/List;
com.android.server.InputMethodManagerService.getEnabledInputMethodSubtypeList(Ljava/lang/String;Z)Ljava/util/List;
com.android.server.InputMethodManagerService.getInputMethodList()Ljava/util/List;
com.android.server.InputMethodManagerService.getInputMethodWindowVisibleHeight()I
com.android.server.InputMethodManagerService.getLastInputMethodSubtype()Landroid/view/inputmethod/InputMethodSubtype;
com.android.server.InputMethodManagerService.getShortcutInputMethodsAndSubtypes()Ljava/util/List;
com.android.server.InputMethodManagerService.getVrInputMethodList()Ljava/util/List;
com.android.server.InputMethodManagerService.hideMySoftInput(Landroid/os/IBinder;I)V
com.android.server.InputMethodManagerService.hideSoftInput(Lcom/android/internal/view/IInputMethodClient;ILandroid/os/ResultReceiver;)Z
com.android.server.InputMethodManagerService.isInputMethodPickerShownForTest()Z
com.android.server.InputMethodManagerService.notifySuggestionPicked(Landroid/text/style/SuggestionSpan;Ljava/lang/String;I)Z
com.android.server.InputMethodManagerService.notifyUserAction(I)V
com.android.server.InputMethodManagerService.registerSuggestionSpansForNotification([Landroid/text/style/SuggestionSpan;)V
com.android.server.InputMethodManagerService.removeClient(Lcom/android/internal/view/IInputMethodClient;)V
com.android.server.InputMethodManagerService.reportFullscreenMode(Landroid/os/IBinder;Z)V
com.android.server.InputMethodManagerService.setAdditionalInputMethodSubtypes(Ljava/lang/String;[Landroid/view/inputmethod/InputMethodSubtype;)V
com.android.server.InputMethodManagerService.setCurrentInputMethodSubtype(Landroid/view/inputmethod/InputMethodSubtype;)Z
com.android.server.InputMethodManagerService.setImeWindowStatus(Landroid/os/IBinder;Landroid/os/IBinder;II)V
com.android.server.InputMethodManagerService.setInputMethod(Landroid/os/IBinder;Ljava/lang/String;)V
com.android.server.InputMethodManagerService.setInputMethodAndSubtype(Landroid/os/IBinder;Ljava/lang/String;Landroid/view/inputmethod/InputMethodSubtype;)V
com.android.server.InputMethodManagerService.shouldOfferSwitchingToNextInputMethod(Landroid/os/IBinder;)Z
com.android.server.InputMethodManagerService.showInputMethodAndSubtypeEnablerFromClient(Lcom/android/internal/view/IInputMethodClient;Ljava/lang/String;)V
com.android.server.InputMethodManagerService.showInputMethodPickerFromClient(Lcom/android/internal/view/IInputMethodClient;I)V
com.android.server.InputMethodManagerService.showMySoftInput(Landroid/os/IBinder;I)V
com.android.server.InputMethodManagerService.showSoftInput(Lcom/android/internal/view/IInputMethodClient;ILandroid/os/ResultReceiver;)Z
com.android.server.InputMethodManagerService.startInputOrWindowGainedFocus(ILcom/android/internal/view/IInputMethodClient;Landroid/os/IBinder;IIILandroid/view/inputmethod/EditorInfo;Lcom/android/internal/view/IInputContext;II)Lcom/android/internal/view/InputBindResult;
com.android.server.InputMethodManagerService.switchToNextInputMethod(Landroid/os/IBinder;Z)Z
com.android.server.InputMethodManagerService.switchToPreviousInputMethod(Landroid/os/IBinder;)Z
com.android.server.InputMethodManagerService.updateStatusIcon(Landroid/os/IBinder;Ljava/lang/String;I)V
com.amazon.service.MultiWindowExtensionsService.showUiForDualSecureCodecError()V
com.amazon.android.server.media.AmazonAudioService$BinderService.adjustStreamVolumeOnDevice(IIIILjava/lang/String;)V
com.amazon.android.server.media.AmazonAudioService$BinderService.enableStereoToMono(Z)V
com.amazon.android.server.media.AmazonAudioService$BinderService.getAdvancedAudioSettingState(I)Z
com.amazon.android.server.media.AmazonAudioService$BinderService.getDeviceForStream(I)I
com.amazon.android.server.media.AmazonAudioService$BinderService.getDolbyDapEnabled()Z
com.amazon.android.server.media.AmazonAudioService$BinderService.getHdmiOutStateHint()I
com.amazon.android.server.media.AmazonAudioService$BinderService.getPackageInFocus()Ljava/lang/String;
com.amazon.android.server.media.AmazonAudioService$BinderService.getStreamVolumeOnDevice(II)I
com.amazon.android.server.media.AmazonAudioService$BinderService.getSystemSettingsData(I)Ljava/util/Map;
com.amazon.android.server.media.AmazonAudioService$BinderService.isSpeakerMute()Z
com.amazon.android.server.media.AmazonAudioService$BinderService.notifySpeechState(II)V
com.amazon.android.server.media.AmazonAudioService$BinderService.onAcquired(II)V
com.amazon.android.server.media.AmazonAudioService$BinderService.onReleased()V
com.amazon.android.server.media.AmazonAudioService$BinderService.registerAudioFocusSwitchObserver(Lamazon/media/IAmazonAudioFocusSwitchObserver;)V
com.amazon.android.server.media.AmazonAudioService$BinderService.registerAudioIOObserver(Lamazon/media/IAmazonAudioIOObserver;)V
com.amazon.android.server.media.AmazonAudioService$BinderService.resetAudioRoutingMode(I)I
com.amazon.android.server.media.AmazonAudioService$BinderService.setAdvancedAudioSettingState(IZ)I
com.amazon.android.server.media.AmazonAudioService$BinderService.setAudioMute(Z)V
com.amazon.android.server.media.AmazonAudioService$BinderService.setAudioOutputFormat(Ljava/lang/String;)V
com.amazon.android.server.media.AmazonAudioService$BinderService.setAudioRoutingMode(II)I
com.amazon.android.server.media.AmazonAudioService$BinderService.setDolbyDapEnabled(Z)Z
com.amazon.android.server.media.AmazonAudioService$BinderService.setForceDeviceRouting(I)V
com.amazon.android.server.media.AmazonAudioService$BinderService.setForceUse(II)V
com.amazon.android.server.media.AmazonAudioService$BinderService.setHdmiOutStateHint(I)I
com.amazon.android.server.media.AmazonAudioService$BinderService.setSpeakerMute(Z)V
com.amazon.android.server.media.AmazonAudioService$BinderService.setSystemSettingsData(ILjava/util/Map;)Z
com.amazon.android.server.media.AmazonAudioService$BinderService.switchWakeWordModel(Ljava/lang/String;Ljava/lang/String;)I
com.amazon.android.server.media.AmazonAudioService$BinderService.unregisterAudioFocusSwitchObserver(Lamazon/media/IAmazonAudioFocusSwitchObserver;)V
com.amazon.android.server.media.AmazonAudioService$BinderService.unregisterAudioIOObserver(Lamazon/media/IAmazonAudioIOObserver;)V
com.amazon.android.server.media.AmazonAudioService$BinderService.updateHdmiEncodingsForAudioCapabilities(I)V
com.android.server.content.ContentService.notifyChange(Landroid/net/Uri;Landroid/database/IContentObserver;ZIII)V
com.android.server.content.ContentService.requestSync(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;)V
com.android.server.content.ContentService.sync(Landroid/content/SyncRequest;)V
com.android.server.content.ContentService.syncAsUser(Landroid/content/SyncRequest;I)V
com.android.server.usb.UsbService.allowUsbDebugging(ZLjava/lang/String;)V
com.android.server.usb.UsbService.clearUsbDebuggingKeys()V
com.android.server.usb.UsbService.denyUsbDebugging()V
com.android.server.usb.UsbService.getPorts()[Landroid/hardware/usb/UsbPort;
com.amazon.android.service.asp.AmazonAspService$BinderService.command(I[B[B)I
com.amazon.android.service.asp.AmazonAspService$BinderService.onWakeWordModelChanged(Ljava/lang/String;Ljava/lang/String;)I
com.amazon.android.service.asp.AmazonAspService$BinderService.registerListener(Lcom/amazon/asp/IAudioEventListener;)V
com.amazon.android.service.asp.AmazonAspService$BinderService.setActiveInputSource(I[B)I
com.amazon.android.service.asp.AmazonAspService$BinderService.startCapture(ILjava/io/FileDescriptor;Ljava/io/FileDescriptor;Ljava/io/FileDescriptor;Ljava/io/FileDescriptor;)I
com.amazon.android.service.asp.AmazonAspService$BinderService.startInjection(IILjava/io/FileDescriptor;Ljava/io/FileDescriptor;Ljava/io/FileDescriptor;Ljava/io/FileDescriptor;ZZZZ)I
com.amazon.android.service.asp.AmazonAspService$BinderService.startIrCodeDetection(Z)I
com.amazon.android.service.asp.AmazonAspService$BinderService.stopCapture(I)I
com.amazon.android.service.asp.AmazonAspService$BinderService.stopInjection(I)I
com.amazon.android.service.asp.AmazonAspService$BinderService.unregisterListener(Lcom/amazon/asp/IAudioEventListener;)V
com.amazon.android.service.pm.AmazonPackageManagerService$BinderService.deregisterProxyReceiver(Landroid/content/Intent;)Z
com.amazon.android.service.pm.AmazonPackageManagerService$BinderService.getAmazonFlagsForUser(Ljava/lang/String;I)I
com.amazon.android.service.pm.AmazonPackageManagerService$BinderService.registerProxyReceiver(Landroid/content/Intent;Landroid/app/PendingIntent;)Z
com.amazon.android.service.pm.AmazonPackageManagerService$BinderService.removeAmazonFlagsForUser(Ljava/util/List;II)V
com.amazon.android.service.pm.AmazonPackageManagerService$BinderService.removeAmazonMetadataForUser(Ljava/lang/String;Ljava/util/List;I)V
com.amazon.android.service.pm.AmazonPackageManagerService$BinderService.setAmazonFlagsForUser(Ljava/util/List;II)V
com.amazon.android.service.pm.AmazonPackageManagerService$BinderService.setAmazonMetadataForUser(Ljava/lang/String;Ljava/util/List;Ljava/util/List;I)V
com.amazon.android.service.pm.AmazonPackageManagerService$BinderService.shouldAllowMicAccess(Ljava/lang/String;)Z
com.android.server.pm.CrossProfileAppsServiceImpl.startActivityAsUser(Landroid/app/IApplicationThread;Ljava/lang/String;Landroid/content/ComponentName;Landroid/os/UserHandle;)V
com.amazon.android.internal.packagerecency.PackageRecencyFilterConfigService$BinderService.updatePackageRecencyFilters(Landroid/content/ComponentName;[Ljava/lang/String;[Ljava/lang/String;)V
com.amazon.server.statusbar.AmazonStatusBarManagerService$BinderService.registerStatusBar(Lcom/amazon/server/statusbar/IAmazonStatusBar;)V
com.amazon.server.statusbar.AmazonStatusBarManagerService$BinderService.setExtraSystemUiVisibility(I)V
com.android.server.power.FireOSPowerSupportService$BinderService.getAppStandbyBucket(Ljava/lang/String;)I
com.android.server.power.FireOSPowerSupportService$BinderService.isTempWhitelisted(Ljava/lang/String;)Z
com.android.server.power.FireOSPowerSupportService$BinderService.whitelistAppTemporarily(Ljava/lang/String;J)V
com.android.server.webkit.WebViewUpdateService$BinderService.enableFallbackLogic(Z)V
com.android.server.webkit.WebViewUpdateService$BinderService.isFallbackPackage(Ljava/lang/String;)Z
com.amazon.android.internal.server.input.AmazonInputManagerService$BinderService.createKeyboardDevice()Z
com.amazon.android.internal.server.input.AmazonInputManagerService$BinderService.createMouseDevice()Z
com.amazon.android.internal.server.input.AmazonInputManagerService$BinderService.destroyKeyboardDevice()Z
com.amazon.android.internal.server.input.AmazonInputManagerService$BinderService.destroyMouseDevice()Z
com.amazon.android.internal.server.input.AmazonInputManagerService$BinderService.dispatchKeyEventListenerCallbacks(Landroid/view/InputEvent;)V
com.amazon.android.internal.server.input.AmazonInputManagerService$BinderService.endVolumeAdjustment()V
com.amazon.android.internal.server.input.AmazonInputManagerService$BinderService.getLastKeyEventTime()J
com.amazon.android.internal.server.input.AmazonInputManagerService$BinderService.getToggleBitRegister()B
com.amazon.android.internal.server.input.AmazonInputManagerService$BinderService.inject(IIII)I
com.amazon.android.internal.server.input.AmazonInputManagerService$BinderService.injectSequence(I[I[I[I[J)I
com.amazon.android.internal.server.input.AmazonInputManagerService$BinderService.postInputEventCallback(Landroid/view/InputEvent;)V
com.amazon.android.internal.server.input.AmazonInputManagerService$BinderService.registerKeyEventIdleTimeListener(Lcom/amazon/android/internal/hardware/input/IKeyEventIdleCallback;J[I)V
com.amazon.android.internal.server.input.AmazonInputManagerService$BinderService.registerKeyEventInterceptor(Lcom/amazon/android/internal/hardware/input/IKeyEventCallback;[IZZ)Z
com.amazon.android.internal.server.input.AmazonInputManagerService$BinderService.registerKeyEventListListener(Lcom/amazon/android/internal/hardware/input/IKeyEventCallback;[I)V
com.amazon.android.internal.server.input.AmazonInputManagerService$BinderService.registerKeyEventListener(Lcom/amazon/android/internal/hardware/input/IKeyEventCallback;)V
com.amazon.android.internal.server.input.AmazonInputManagerService$BinderService.registerNextKeyEventListener(Lcom/amazon/android/internal/hardware/input/IKeyEventNextCallback;)V
com.amazon.android.internal.server.input.AmazonInputManagerService$BinderService.setInputFilter(Landroid/view/IInputFilter;)V
com.amazon.android.internal.server.input.AmazonInputManagerService$BinderService.setLedState(IIZ)V
com.amazon.android.internal.server.input.AmazonInputManagerService$BinderService.setToggleBitButtonMap(Lcom/amazon/android/internal/hardware/input/ToggleBitButtonMap;)V
com.amazon.android.internal.server.input.AmazonInputManagerService$BinderService.setToggleBitRegister(B)Z
com.amazon.android.internal.server.input.AmazonInputManagerService$BinderService.startVolumeAdjustment(II)V
com.amazon.android.internal.server.input.AmazonInputManagerService$BinderService.unRegisterKeyEventIdleTimeListener(Lcom/amazon/android/internal/hardware/input/IKeyEventIdleCallback;)V
com.amazon.android.internal.server.input.AmazonInputManagerService$BinderService.unRegisterKeyEventInterceptor(Lcom/amazon/android/internal/hardware/input/IKeyEventCallback;[I)V
com.amazon.android.internal.server.input.AmazonInputManagerService$BinderService.unRegisterKeyEventListListener(Lcom/amazon/android/internal/hardware/input/IKeyEventCallback;)V
com.amazon.android.internal.server.input.AmazonInputManagerService$BinderService.unRegisterKeyEventListener(Lcom/amazon/android/internal/hardware/input/IKeyEventCallback;)V
com.amazon.android.internal.server.input.AmazonInputManagerService$BinderService.unRegisterNextKeyEventListener(Lcom/amazon/android/internal/hardware/input/IKeyEventNextCallback;)V
com.amazon.android.server.pm.AmazonUserManagerService$BinderService.enableKftLauncher(Landroid/content/pm/UserInfo;)Z
com.amazon.android.server.pm.AmazonUserManagerService$BinderService.getUserSortedList()Ljava/util/List;
com.amazon.android.server.pm.AmazonUserManagerService$BinderService.setUserSetupComplete(Landroid/content/pm/UserInfo;)Z
com.amazon.android.server.pm.AmazonUserManagerService$BinderService.setUserSortedList(Ljava/util/List;)V
com.android.server.notification.NotificationManagerService$10.enqueueToast(Ljava/lang/String;Landroid/app/ITransientNotification;I)V
com.android.server.notification.NotificationManagerService$10.getNotificationChannel(Ljava/lang/String;Ljava/lang/String;)Landroid/app/NotificationChannel;
com.android.server.notification.NotificationManagerService$10.getNotificationChannels(Ljava/lang/String;)Landroid/content/pm/ParceledListSlice;
com.android.server.notification.NotificationManagerService$10.getRecentNotifyingAppsForUser(I)Landroid/content/pm/ParceledListSlice;
com.amazon.android.server.am.AmazonActivityManagerService$BinderService.checkKillAppGoingIntoBg(Ljava/lang/String;I)Z
com.amazon.android.server.am.AmazonActivityManagerService$BinderService.disablePipWindows()V
com.amazon.android.server.am.AmazonActivityManagerService$BinderService.dismissMultiWindow()V
com.amazon.android.server.am.AmazonActivityManagerService$BinderService.dismissPipWindow()V
com.amazon.android.server.am.AmazonActivityManagerService$BinderService.enablePipWindows()V
com.amazon.android.server.am.AmazonActivityManagerService$BinderService.getCpuLoad()F
com.amazon.android.server.am.AmazonActivityManagerService$BinderService.getRecentCrashes()[Lamazon/app/CrashDescription;
com.amazon.android.server.am.AmazonActivityManagerService$BinderService.isOnHomeStack()Z
com.amazon.android.server.am.AmazonActivityManagerService$BinderService.onActivityResume(Landroid/content/ComponentName;)V
com.amazon.android.server.am.AmazonActivityManagerService$BinderService.packageLifetimeHint(Ljava/lang/String;FZI)I
com.amazon.android.server.am.AmazonActivityManagerService$BinderService.preWarmApplicationForUser(Ljava/lang/String;II)I
com.amazon.android.server.am.AmazonActivityManagerService$BinderService.registerActivitySwitchObserver(Lamazon/app/IAmazonActivitySwitchObserver;)V
com.amazon.android.server.am.AmazonActivityManagerService$BinderService.requestCpuBoost(II)Z
com.amazon.android.server.am.AmazonActivityManagerService$BinderService.unregisterActivitySwitchObserver(Lamazon/app/IAmazonActivitySwitchObserver;)V
com.android.server.trust.TrustManagerService$1.clearAllFingerprints()V
com.android.server.trust.TrustManagerService$1.unlockedByFingerprintForUser(I)V
com.amazon.android.service.audioeffects.AmazonAudioEffectsHolderService$BinderService.clearAllAudioEffects()Z
com.amazon.android.service.audioeffects.AmazonAudioEffectsHolderService$BinderService.fetchSettings(Z)Ljava/lang/String;
com.amazon.android.service.audioeffects.AmazonAudioEffectsHolderService$BinderService.getPackageNameOfAudioEffectsOwner()Ljava/lang/String;
com.amazon.android.service.audioeffects.AmazonAudioEffectsHolderService$BinderService.isAudioEffectsTableEmpty()Z
com.amazon.android.service.audioeffects.AmazonAudioEffectsHolderService$BinderService.registerAudioEffect(IIII)Z
com.amazon.android.service.audioeffects.AmazonAudioEffectsHolderService$BinderService.setDapProfile(I)Z
com.amazon.android.service.audioeffects.AmazonAudioEffectsHolderService$BinderService.setFeatureConfig(II)V
com.amazon.android.service.AmazonWifiService$BinderService.convertFrequencyToChannel(I)I
com.amazon.android.service.AmazonWifiService$BinderService.fastConnect(II)Z
com.amazon.android.service.AmazonWifiService$BinderService.getAvailableChannels()[I
com.amazon.android.service.AmazonWifiService$BinderService.getBandwidth()I
com.amazon.android.service.AmazonWifiService$BinderService.getCongestion()I
com.amazon.android.service.AmazonWifiService$BinderService.getCountryCode()Ljava/lang/String;
com.amazon.android.service.AmazonWifiService$BinderService.getHostApChannel()Ljava/lang/String;
com.amazon.android.service.AmazonWifiService$BinderService.getHostApCountry()Ljava/lang/String;
com.amazon.android.service.AmazonWifiService$BinderService.getHostApInfo()Landroid/os/Bundle;
com.amazon.android.service.AmazonWifiService$BinderService.getHostApPassphrase()Ljava/lang/String;
com.amazon.android.service.AmazonWifiService$BinderService.getHostApSsid()Ljava/lang/String;
com.amazon.android.service.AmazonWifiService$BinderService.getNoise()Ljava/lang/String;
com.amazon.android.service.AmazonWifiService$BinderService.getRssi()Ljava/lang/String;
com.amazon.android.service.AmazonWifiService$BinderService.isWpa3SaeSupported()Z
com.amazon.android.service.AmazonWifiService$BinderService.registerWifiEventCallback(Lcom/amazon/android/service/IWifiEventCallback;)V
com.amazon.android.service.AmazonWifiService$BinderService.setBwThrottling(Z)Z
com.amazon.android.service.AmazonWifiService$BinderService.startHostAp(Ljava/lang/String;Ljava/lang/String;II)I
com.amazon.android.service.AmazonWifiService$BinderService.startHostApNoParams()I
com.amazon.android.service.AmazonWifiService$BinderService.stopHostAp()V
com.amazon.android.service.AmazonWifiService$BinderService.unregisterWifiEventCallback(Lcom/amazon/android/service/IWifiEventCallback;)V
com.amazon.android.modeswitch.service.AlexaModeSwitchManagerService$AlexaModeSwitchAPIImpl.dismissPIP()V
com.amazon.android.modeswitch.service.AlexaModeSwitchManagerService$AlexaModeSwitchAPIImpl.dismissSplitScreenMode()V
com.amazon.android.modeswitch.service.AlexaModeSwitchManagerService$AlexaModeSwitchAPIImpl.enableOrDisableTapOnWake(Z)V
com.amazon.android.modeswitch.service.AlexaModeSwitchManagerService$AlexaModeSwitchAPIImpl.getRunningTasks()Ljava/util/List;
com.amazon.android.modeswitch.service.AlexaModeSwitchManagerService$AlexaModeSwitchAPIImpl.registerToDeath(Landroid/os/IBinder;)V
com.amazon.android.modeswitch.service.AlexaModeSwitchManagerService$AlexaModeSwitchAPIImpl.removeShowModeOnlyApplicationTasks()V
com.amazon.android.modeswitch.service.AlexaModeSwitchManagerService$AlexaModeSwitchAPIImpl.resetSystemFontSize()V
com.amazon.android.modeswitch.service.AlexaModeSwitchManagerService$AlexaModeSwitchAPIImpl.setAndGetDeferModeStatus(II)Z
com.amazon.android.modeswitch.service.AlexaModeSwitchManagerService$AlexaModeSwitchAPIImpl.setOrientation(ZIZ)V
com.amazon.android.modeswitch.service.AlexaModeSwitchManagerService$AlexaModeSwitchAPIImpl.setSystemFontSize(F)V
com.amazon.android.modeswitch.service.AlexaModeSwitchManagerService$AlexaModeSwitchAPIImpl.startActivityFromRecents(I)V
com.amazon.android.modeswitch.service.AlexaModeSwitchManagerService$AlexaModeSwitchAPIImpl.toggleStatusBarIconVisibility(Z)V
com.amazon.android.modeswitch.service.AlexaModeSwitchManagerService$AlexaModeSwitchAPIImpl.unRegisterToDeath()V
com.amazon.android.server.accessibility.AmazonAccessibilityManagerService$BinderService.magnificationCanvasAddLine(FFFFFI)V
com.amazon.android.server.accessibility.AmazonAccessibilityManagerService$BinderService.magnificationCanvasAddRect(FFFFI)V
com.amazon.android.server.accessibility.AmazonAccessibilityManagerService$BinderService.magnificationCanvasClear()V
com.amazon.android.server.ads.identifier.AdvertisingIdManagerService$BinderService.resetAdIdInfo()Ljava/lang/String;
com.amazon.android.server.ads.identifier.AdvertisingIdManagerService$BinderService.setLimitAdTracking(Z)V
com.amazon.android.service.DeviceInfoService$BinderService.getValue(Ljava/lang/String;)Ljava/lang/String;
com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub.addClient(Landroid/view/autofill/IAutoFillManagerClient;I)I
com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub.getAutofillServiceComponentName()Landroid/content/ComponentName;
com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub.getAvailableFieldClassificationAlgorithms()[Ljava/lang/String;
com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub.getDefaultFieldClassificationAlgorithm()Ljava/lang/String;
com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub.getFillEventHistory()Landroid/service/autofill/FillEventHistory;
com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub.getUserData()Landroid/service/autofill/UserData;
com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub.getUserDataId()Ljava/lang/String;
com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub.isFieldClassificationEnabled()Z
com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub.isServiceEnabled(ILjava/lang/String;)Z
com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub.isServiceSupported(I)Z
com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub.restoreSession(ILandroid/os/IBinder;Landroid/os/IBinder;)Z
com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub.startSession(Landroid/os/IBinder;Landroid/os/IBinder;Landroid/view/autofill/AutofillId;Landroid/graphics/Rect;Landroid/view/autofill/AutofillValue;IZILandroid/content/ComponentName;Z)I
com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub.updateOrRestartSession(Landroid/os/IBinder;Landroid/os/IBinder;Landroid/view/autofill/AutofillId;Landroid/graphics/Rect;Landroid/view/autofill/AutofillValue;IZILandroid/content/ComponentName;IIZ)I
com.amazon.gamemode.GameModeService$GameModeBinder.getCurrentState()I
com.amazon.gamemode.GameModeService$GameModeBinder.registerListener(Lcom/amazon/gamemode/IGameModeEventListener;)V
com.amazon.gamemode.GameModeService$GameModeBinder.registerProcessWatcher(Landroid/os/IBinder;)V
com.amazon.gamemode.GameModeService$GameModeBinder.setInGameModeForAlexa(ZZ)Z
com.amazon.gamemode.GameModeService$GameModeBinder.unregisterListener(Lcom/amazon/gamemode/IGameModeEventListener;)V
com.android.server.VibratorService.vibrate(ILjava/lang/String;Landroid/os/VibrationEffect;ILandroid/os/IBinder;)V
com.android.server.power.AmazonPowerManagerService$BinderService.getActiveWakeLocks()Ljava/util/List;
com.android.server.power.AmazonPowerManagerService$BinderService.getAutoShutdownTimerDialogDuration()J
com.android.server.power.AmazonPowerManagerService$BinderService.getInstantStrRequest()Z
com.android.server.power.AmazonPowerManagerService$BinderService.getLastDeviceWakeUpReason()Ljava/lang/String;
com.android.server.power.AmazonPowerManagerService$BinderService.getLastUserActivityInElapsedRealtime()J
com.android.server.power.AmazonPowerManagerService$BinderService.getScreensaverDisplayTime()J
com.android.server.power.AmazonPowerManagerService$BinderService.getWakeOnNetworkSetting()I
com.android.server.power.AmazonPowerManagerService$BinderService.hasFullWakeLock(Landroid/os/IBinder;)Z
com.android.server.power.AmazonPowerManagerService$BinderService.makeWakeUpCallbacks(Ljava/lang/String;)V
com.android.server.power.AmazonPowerManagerService$BinderService.putDeviceToSleep()V
com.android.server.power.AmazonPowerManagerService$BinderService.putDeviceToSuspendToRam()V
com.android.server.power.AmazonPowerManagerService$BinderService.registerScreenStateCallback(Lcom/android/server/power/IScreenStateCallback;)Z
com.android.server.power.AmazonPowerManagerService$BinderService.registerWakeUpKeyEventListener(Lcom/android/server/power/IWakeUpCallback;)V
com.android.server.power.AmazonPowerManagerService$BinderService.setBatteryChargingVoltage(Ljava/lang/String;)V
com.android.server.power.AmazonPowerManagerService$BinderService.setInstantStrRequest(Z)V
com.android.server.power.AmazonPowerManagerService$BinderService.setLastUserActivityInElapsedRealtime(J)V
com.android.server.power.AmazonPowerManagerService$BinderService.setWakeOnNetworkSetting(Z)Z
com.android.server.power.AmazonPowerManagerService$BinderService.unRegisterScreenStateCallback(Lcom/android/server/power/IScreenStateCallback;)Z
com.android.server.power.AmazonPowerManagerService$BinderService.unRegisterWakeUpKeyEventListener(Lcom/android/server/power/IWakeUpCallback;)V
com.android.server.input.InputManagerService.createInputForwarder(I)Landroid/app/IInputForwarder;
com.amazon.android.server.wm.AmazonWindowManagerService$BinderService.getLidState()I
com.amazon.android.server.wm.AmazonWindowManagerService$BinderService.isPipActive()Z
com.amazon.android.server.wm.AmazonWindowManagerService$BinderService.lockNow(Landroid/os/Bundle;)V
com.amazon.android.server.wm.AmazonWindowManagerService$BinderService.setOverscan(IIIII)V
com.amazon.android.server.wm.AmazonWindowManagerService$BinderService.setPipVisibility(Z)V
com.android.internal.telephony.UiccSmsController.copyMessageToIccEfForSubscriber(ILjava/lang/String;I[B[B)Z
com.android.internal.telephony.UiccSmsController.createAppSpecificSmsToken(ILjava/lang/String;Landroid/app/PendingIntent;)Ljava/lang/String;
com.android.internal.telephony.UiccSmsController.disableCellBroadcastForSubscriber(III)Z
com.android.internal.telephony.UiccSmsController.disableCellBroadcastRangeForSubscriber(IIII)Z
com.android.internal.telephony.UiccSmsController.enableCellBroadcastForSubscriber(III)Z
com.android.internal.telephony.UiccSmsController.enableCellBroadcastRangeForSubscriber(IIII)Z
com.android.internal.telephony.UiccSmsController.getAllMessagesFromIccEfForSubscriber(ILjava/lang/String;)Ljava/util/List;
com.android.internal.telephony.UiccSmsController.getImsSmsFormatForSubscriber(I)Ljava/lang/String;
com.android.internal.telephony.UiccSmsController.getPreferredSmsSubscription()I
com.android.internal.telephony.UiccSmsController.getPremiumSmsPermission(Ljava/lang/String;)I
com.android.internal.telephony.UiccSmsController.getPremiumSmsPermissionForSubscriber(ILjava/lang/String;)I
com.android.internal.telephony.UiccSmsController.injectSmsPduForSubscriber(I[BLjava/lang/String;Landroid/app/PendingIntent;)V
com.android.internal.telephony.UiccSmsController.isImsSmsSupportedForSubscriber(I)Z
com.android.internal.telephony.UiccSmsController.isSMSPromptEnabled()Z
com.android.internal.telephony.UiccSmsController.isSmsSimPickActivityNeeded(I)Z
com.android.internal.telephony.UiccSmsController.sendDataForSubscriber(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;I[BLandroid/app/PendingIntent;Landroid/app/PendingIntent;)V
com.android.internal.telephony.UiccSmsController.sendDataForSubscriberWithSelfPermissions(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;I[BLandroid/app/PendingIntent;Landroid/app/PendingIntent;)V
com.android.internal.telephony.UiccSmsController.sendMultipartTextForSubscriber(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/util/List;Ljava/util/List;Z)V
com.android.internal.telephony.UiccSmsController.sendMultipartTextForSubscriberWithOptions(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/util/List;Ljava/util/List;ZIZI)V
com.android.internal.telephony.UiccSmsController.sendStoredMultipartText(ILjava/lang/String;Landroid/net/Uri;Ljava/lang/String;Ljava/util/List;Ljava/util/List;)V
com.android.internal.telephony.UiccSmsController.sendStoredText(ILjava/lang/String;Landroid/net/Uri;Ljava/lang/String;Landroid/app/PendingIntent;Landroid/app/PendingIntent;)V
com.android.internal.telephony.UiccSmsController.sendTextForSubscriber(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/app/PendingIntent;Landroid/app/PendingIntent;Z)V
com.android.internal.telephony.UiccSmsController.sendTextForSubscriberWithOptions(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/app/PendingIntent;Landroid/app/PendingIntent;ZIZI)V
com.android.internal.telephony.UiccSmsController.sendTextForSubscriberWithSelfPermissions(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/app/PendingIntent;Landroid/app/PendingIntent;Z)V
com.android.internal.telephony.UiccSmsController.setPremiumSmsPermission(Ljava/lang/String;I)V
com.android.internal.telephony.UiccSmsController.setPremiumSmsPermissionForSubscriber(ILjava/lang/String;I)V
com.android.internal.telephony.UiccSmsController.updateMessageOnIccEfForSubscriber(ILjava/lang/String;II[B)Z
com.android.internal.telephony.SubscriptionController.clearDefaultsForInactiveSubIds()V
com.android.internal.telephony.SubscriptionController.getActiveSubIdList()[I
com.android.internal.telephony.SubscriptionController.isActiveSubId(I)Z
com.android.internal.telephony.SubscriptionController.requestEmbeddedSubscriptionInfoListRefresh()V
com.android.internal.telephony.SubscriptionController.setDisplayName(Ljava/lang/String;I)I
com.android.internal.telephony.SubscriptionController.setDisplayNameUsingSrc(Ljava/lang/String;IJ)I
com.android.internal.telephony.SubscriptionController.setSubscriptionProperty(ILjava/lang/String;Ljava/lang/String;)V
com.amazon.android.service.mtp.AmazonMtpObserverService$BinderService.getMtpAvailable()Z
com.amazon.android.service.mtp.AmazonMtpObserverService$BinderService.setPlugged(Z)V
com.amazon.android.service.mtp.AmazonMtpObserverService$BinderService.setState(I)V
com.android.server.am.BatteryStatsService.noteJobFinish(Ljava/lang/String;II)V
com.android.server.am.BatteryStatsService.noteJobStart(Ljava/lang/String;I)V
com.android.server.AppOpsService.checkAudioOperation(IIILjava/lang/String;)I
com.android.server.AppOpsService.checkOperation(IILjava/lang/String;)I
com.android.server.AppOpsService.checkPackage(ILjava/lang/String;)I
com.android.server.AppOpsService.finishOperation(Landroid/os/IBinder;IILjava/lang/String;)V
com.android.server.AppOpsService.getOpsForPackage(ILjava/lang/String;[I)Ljava/util/List;
com.android.server.AppOpsService.getPackagesForOps([I)Ljava/util/List;
com.android.server.AppOpsService.getToken(Landroid/os/IBinder;)Landroid/os/IBinder;
com.android.server.AppOpsService.getUidOps(I[I)Ljava/util/List;
com.android.server.AppOpsService.isOperationActive(IILjava/lang/String;)Z
com.android.server.AppOpsService.noteOperation(IILjava/lang/String;)I
com.android.server.AppOpsService.noteProxyOperation(ILjava/lang/String;ILjava/lang/String;)I
com.android.server.AppOpsService.permissionToOpCode(Ljava/lang/String;)I
com.android.server.AppOpsService.removeUser(I)V
com.android.server.AppOpsService.resetAllModes(ILjava/lang/String;)V
com.android.server.AppOpsService.setAudioRestriction(IIII[Ljava/lang/String;)V
com.android.server.AppOpsService.setMode(IILjava/lang/String;I)V
com.android.server.AppOpsService.setUidMode(III)V
com.android.server.AppOpsService.setUserRestriction(IZLandroid/os/IBinder;I[Ljava/lang/String;)V
com.android.server.AppOpsService.setUserRestrictions(Landroid/os/Bundle;Landroid/os/IBinder;I)V
com.android.server.AppOpsService.startOperation(Landroid/os/IBinder;IILjava/lang/String;Z)I
com.android.server.AppOpsService.startWatchingActive([ILcom/android/internal/app/IAppOpsActiveCallback;)V
com.android.server.AppOpsService.startWatchingMode(ILjava/lang/String;Lcom/android/internal/app/IAppOpsCallback;)V
com.android.server.AppOpsService.startWatchingModeWithFlags(ILjava/lang/String;ILcom/android/internal/app/IAppOpsCallback;)V
com.android.server.AppOpsService.stopWatchingActive(Lcom/android/internal/app/IAppOpsActiveCallback;)V
com.android.server.AppOpsService.stopWatchingMode(Lcom/android/internal/app/IAppOpsCallback;)V
com.android.server.audio.AudioService.registerAudioPolicy(Landroid/media/audiopolicy/AudioPolicyConfig;Landroid/media/audiopolicy/IAudioPolicyCallback;ZZZ)Ljava/lang/String;
com.android.server.audio.AudioService.setBluetoothA2dpDeviceConnectionState(Landroid/bluetooth/BluetoothDevice;II)I
com.android.server.audio.AudioService.setBluetoothA2dpDeviceConnectionStateSuppressNoisyIntent(Landroid/bluetooth/BluetoothDevice;IIZI)I
com.android.server.audio.AudioService.setHearingAidDeviceConnectionState(Landroid/bluetooth/BluetoothDevice;I)V
com.android.server.statusbar.StatusBarManagerService.hideFingerprintDialog()V
com.android.server.statusbar.StatusBarManagerService.onFingerprintAuthenticated()V
com.android.server.statusbar.StatusBarManagerService.onFingerprintError(Ljava/lang/String;)V
com.android.server.statusbar.StatusBarManagerService.onFingerprintHelp(Ljava/lang/String;)V
com.android.server.statusbar.StatusBarManagerService.onNotificationActionClick(Ljava/lang/String;ILcom/android/internal/statusbar/NotificationVisibility;)V
com.android.server.statusbar.StatusBarManagerService.onNotificationClear(Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;ILcom/android/internal/statusbar/NotificationVisibility;)V
com.android.server.statusbar.StatusBarManagerService.onNotificationExpansionChanged(Ljava/lang/String;ZZ)V
com.android.server.statusbar.StatusBarManagerService.onNotificationSmartRepliesAdded(Ljava/lang/String;I)V
com.android.server.statusbar.StatusBarManagerService.onNotificationSmartReplySent(Ljava/lang/String;I)V
com.android.server.statusbar.StatusBarManagerService.registerStatusBar(Lcom/android/internal/statusbar/IStatusBar;Ljava/util/List;Ljava/util/List;[ILjava/util/List;Landroid/graphics/Rect;Landroid/graphics/Rect;)V
com.android.server.statusbar.StatusBarManagerService.setImeWindowStatus(Landroid/os/IBinder;IIZ)V
com.android.server.statusbar.StatusBarManagerService.setSystemUiVisibility(IILjava/lang/String;)V
com.android.server.statusbar.StatusBarManagerService.showFingerprintDialog(Landroid/os/Bundle;Landroid/hardware/biometrics/IBiometricPromptReceiver;)V
com.android.server.locksettings.LockSettingsService.checkCredential(Ljava/lang/String;IILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse;
com.android.server.locksettings.LockSettingsService.getHashFactor(Ljava/lang/String;I)[B
com.android.server.locksettings.LockSettingsService.setLockCredential(Ljava/lang/String;ILjava/lang/String;II)V
com.android.server.locksettings.LockSettingsService.setSeparateProfileChallengeEnabled(IZLjava/lang/String;)V
com.android.server.locksettings.LockSettingsService.verifyCredential(Ljava/lang/String;IJI)Lcom/android/internal/widget/VerifyCredentialResponse;
com.android.server.locksettings.LockSettingsService.verifyTiedProfileChallenge(Ljava/lang/String;IJI)Lcom/android/internal/widget/VerifyCredentialResponse;
com.fireos.service.eve.EveService$BinderServiceNative.addAudioPlaybackData(IIIII)V
com.fireos.service.eve.EveService$BinderServiceNative.addAudioRecordData(IIIII)V
com.fireos.service.eve.EveService$BinderServiceNative.addAudioRecordOverrun(I)V
com.fireos.service.eve.EveService$BinderServiceNative.addFramedropData(Ljava/lang/String;IIIIIIIIII)V
com.fireos.service.eve.EveService$BinderServiceNative.dumpAutotrace(Ljava/lang/String;Ljava/lang/String;D)V
com.fireos.service.eve.EveService$BinderServiceNative.startAutotrace(Ljava/lang/String;)V
com.amazon.android.server.bulkmoveappstosdcard.BulkMoveAppsToSDCardService$BinderService.dumpDebug()V
com.amazon.android.server.bulkmoveappstosdcard.BulkMoveAppsToSDCardService$BinderService.getAppCountBmats()I
com.amazon.android.server.bulkmoveappstosdcard.BulkMoveAppsToSDCardService$BinderService.getAppListBmats()Ljava/util/List;
com.amazon.android.server.bulkmoveappstosdcard.BulkMoveAppsToSDCardService$BinderService.getFailCountBmats()I
com.amazon.android.server.bulkmoveappstosdcard.BulkMoveAppsToSDCardService$BinderService.getPassCountBmats()I
com.amazon.android.server.bulkmoveappstosdcard.BulkMoveAppsToSDCardService$BinderService.getUserProfileBmats()I
com.amazon.android.server.bulkmoveappstosdcard.BulkMoveAppsToSDCardService$BinderService.inProgressBmats()Z
com.amazon.android.server.bulkmoveappstosdcard.BulkMoveAppsToSDCardService$BinderService.isAppTransferDoneBmats(Ljava/lang/String;)Z
com.amazon.android.server.bulkmoveappstosdcard.BulkMoveAppsToSDCardService$BinderService.isProcessingAppBmats(Ljava/lang/String;)Z
com.amazon.android.server.bulkmoveappstosdcard.BulkMoveAppsToSDCardService$BinderService.moveAppsToSdCard()Z
com.amazon.android.mediacodeclogger.AmazonMediaCodecLoggerService$BinderService.getVideoSessionsWindowInfo()Ljava/util/List;
com.amazon.android.mediacodeclogger.AmazonMediaCodecLoggerService$BinderService.registerVideoSessionListener(Lcom/amazon/android/mediacodeclogger/IAmazonVideoSessionListener;)V
com.amazon.android.mediacodeclogger.AmazonMediaCodecLoggerService$BinderService.unregisterVideoSessionListener(Lcom/amazon/android/mediacodeclogger/IAmazonVideoSessionListener;)V
com.android.server.NetworkManagementService.attachPppd(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.server.NetworkManagementService.clearPermission([I)V
com.android.server.NetworkManagementService.createPhysicalNetwork(ILjava/lang/String;)V
com.android.server.NetworkManagementService.createVirtualNetwork(IZZ)V
com.android.server.NetworkManagementService.detachPppd(Ljava/lang/String;)V
com.android.server.NetworkManagementService.getNetdService()Landroid/net/INetd;
com.android.server.NetworkManagementService.isClatdStarted(Ljava/lang/String;)Z
com.android.server.NetworkManagementService.listTtys()[Ljava/lang/String;
com.android.server.NetworkManagementService.removeNetwork(I)V
com.android.server.NetworkManagementService.setDnsConfigurationForNetwork(I[Ljava/lang/String;[Ljava/lang/String;[ILjava/lang/String;[Ljava/lang/String;)V
com.android.server.NetworkManagementService.setNetworkPermission(ILjava/lang/String;)V
com.android.server.NetworkManagementService.setPermission(Ljava/lang/String;[I)V
com.android.server.NetworkManagementService.startClatd(Ljava/lang/String;)V
com.android.server.NetworkManagementService.stopClatd(Ljava/lang/String;)V
com.amazon.android.server.devicepolicy.AmazonDevicePolicyManagerService$BinderService.clearRestrictionForUser(Landroid/content/ComponentName;Ljava/lang/String;I)V
com.amazon.android.server.devicepolicy.AmazonDevicePolicyManagerService$BinderService.getBackedUpPoliciesFile()[B
com.amazon.android.server.devicepolicy.AmazonDevicePolicyManagerService$BinderService.setRestrictionForUser(Landroid/content/ComponentName;Ljava/lang/String;I)V
com.amazon.android.os.MigrationService$BinderService.getMigrateDataInfo()Lcom/amazon/android/os/SharedAssetStorage$MigrateDataInfo;
com.amazon.android.os.MigrationService$BinderService.getSharedStorageUuid()Ljava/lang/String;
com.amazon.android.os.MigrationService$BinderService.migrateData(Ljava/lang/String;)I
com.android.internal.telephony.euicc.EuiccController.continueOperation(Landroid/content/Intent;Landroid/os/Bundle;)V
com.android.internal.telephony.euicc.EuiccController.deleteSubscription(ILjava/lang/String;Landroid/app/PendingIntent;)V
com.android.internal.telephony.euicc.EuiccController.downloadSubscription(Landroid/telephony/euicc/DownloadableSubscription;ZLjava/lang/String;Landroid/app/PendingIntent;)V
com.android.internal.telephony.euicc.EuiccController.eraseSubscriptions(Landroid/app/PendingIntent;)V
com.android.internal.telephony.euicc.EuiccController.getDefaultDownloadableSubscriptionList(Ljava/lang/String;Landroid/app/PendingIntent;)V
com.android.internal.telephony.euicc.EuiccController.getDownloadableSubscriptionMetadata(Landroid/telephony/euicc/DownloadableSubscription;Ljava/lang/String;Landroid/app/PendingIntent;)V
com.android.internal.telephony.euicc.EuiccController.getEid()Ljava/lang/String;
com.android.internal.telephony.euicc.EuiccController.getEuiccInfo()Landroid/telephony/euicc/EuiccInfo;
com.android.internal.telephony.euicc.EuiccController.getOtaStatus()I
com.android.internal.telephony.euicc.EuiccController.retainSubscriptionsForFactoryReset(Landroid/app/PendingIntent;)V
com.android.internal.telephony.euicc.EuiccController.switchToSubscription(ILjava/lang/String;Landroid/app/PendingIntent;)V
com.android.internal.telephony.euicc.EuiccController.updateSubscriptionNickname(ILjava/lang/String;Landroid/app/PendingIntent;)V
com.android.internal.telephony.PhoneSubInfoController.getCompleteVoiceMailNumber()Ljava/lang/String;
com.android.internal.telephony.PhoneSubInfoController.getCompleteVoiceMailNumberForSubscriber(I)Ljava/lang/String;
com.android.server.textclassifier.TextClassificationManagerService.onClassifyText(Landroid/view/textclassifier/TextClassificationSessionId;Landroid/view/textclassifier/TextClassification$Request;Landroid/service/textclassifier/ITextClassificationCallback;)V
com.android.server.textclassifier.TextClassificationManagerService.onGenerateLinks(Landroid/view/textclassifier/TextClassificationSessionId;Landroid/view/textclassifier/TextLinks$Request;Landroid/service/textclassifier/ITextLinksCallback;)V
com.android.server.textclassifier.TextClassificationManagerService.onSuggestSelection(Landroid/view/textclassifier/TextClassificationSessionId;Landroid/view/textclassifier/TextSelection$Request;Landroid/service/textclassifier/ITextSelectionCallback;)V
com.amazon.android.server.AmazonStorageManagerService$BinderService.getDiskSpeedClass(Ljava/lang/String;)I
com.amazon.android.server.AmazonStorageManagerService$BinderService.isDiskAdoptable(Ljava/lang/String;)Z
com.android.server.slice.SliceManagerService.checkSlicePermission(Landroid/net/Uri;Ljava/lang/String;II[Ljava/lang/String;)I
com.amazon.android.service.smartsuspend.SmartSuspendManagerService$BinderService.getAllPeriods()[Lcom/amazon/android/service/smartsuspend/UsagePeriod;
com.amazon.android.service.smartsuspend.SmartSuspendManagerService$BinderService.getEnabled()Z
com.amazon.android.service.smartsuspend.SmartSuspendManagerService$BinderService.getScheduleType()I
com.amazon.android.service.smartsuspend.SmartSuspendManagerService$BinderService.onAllWakeLocksReleased()V
com.amazon.android.service.smartsuspend.SmartSuspendManagerService$BinderService.onDeepDoze(J)V
com.amazon.android.service.smartsuspend.SmartSuspendManagerService$BinderService.onDeepDozeMaintenance(J)V
com.amazon.android.service.smartsuspend.SmartSuspendManagerService$BinderService.onGoToSleep()V
com.amazon.android.service.smartsuspend.SmartSuspendManagerService$BinderService.onScreenOff()V
com.amazon.android.service.smartsuspend.SmartSuspendManagerService$BinderService.onScreenOn()V
com.amazon.android.service.smartsuspend.SmartSuspendManagerService$BinderService.onUserActivity()V
com.amazon.android.service.smartsuspend.SmartSuspendManagerService$BinderService.onWakeLockAcquired()V
com.amazon.android.service.smartsuspend.SmartSuspendManagerService$BinderService.onWakeUp()V
com.amazon.android.service.smartsuspend.SmartSuspendManagerService$BinderService.registerSmartModule(Lcom/amazon/android/service/smartsuspend/IRemoteSmartModule;)V
com.amazon.android.service.smartsuspend.SmartSuspendManagerService$BinderService.setEnabled(Z)V
com.amazon.android.service.smartsuspend.SmartSuspendManagerService$BinderService.setPeriod(Lcom/amazon/android/service/smartsuspend/UsagePeriod;)Z
com.amazon.android.service.smartsuspend.SmartSuspendManagerService$BinderService.setScheduleType(I)Z
com.amazon.android.service.smartsuspend.SmartSuspendManagerService$BinderService.unregisterSmartModule(Lcom/amazon/android/service/smartsuspend/IRemoteSmartModule;)V
com.android.server.media.MediaSessionService$SessionManagerImpl.addSessionTokensListener(Landroid/media/ISessionTokensListener;ILjava/lang/String;)V
com.android.server.media.MediaSessionService$SessionManagerImpl.createSession(Ljava/lang/String;Landroid/media/session/ISessionCallback;Ljava/lang/String;I)Landroid/media/session/ISession;
com.android.server.media.MediaSessionService$SessionManagerImpl.createSession2(Landroid/os/Bundle;)Z
com.android.server.media.MediaSessionService$SessionManagerImpl.destroySession2(Landroid/os/Bundle;)V
com.android.server.media.MediaSessionService$SessionManagerImpl.dispatchAdjustVolume(Ljava/lang/String;III)V
com.android.server.media.MediaSessionService$SessionManagerImpl.dispatchVolumeKeyEvent(Ljava/lang/String;ZLandroid/view/KeyEvent;IZ)V
com.android.server.media.MediaSessionService$SessionManagerImpl.getSessionTokens(ZZLjava/lang/String;)Ljava/util/List;
com.android.server.media.MediaSessionService$SessionManagerImpl.removeSessionTokensListener(Landroid/media/ISessionTokensListener;Ljava/lang/String;)V
com.android.server.media.MediaSessionService$SessionManagerImpl.setRemoteVolumeController(Landroid/media/IRemoteVolumeController;)V
com.amazon.android.server.arcusservice.ArcusService$BinderService.addAttributeBoolean(Ljava/lang/String;Ljava/lang/String;Z)V
com.amazon.android.server.arcusservice.ArcusService$BinderService.addAttributeDouble(Ljava/lang/String;Ljava/lang/String;D)V
com.amazon.android.server.arcusservice.ArcusService$BinderService.addAttributeInt(Ljava/lang/String;Ljava/lang/String;I)V
com.amazon.android.server.arcusservice.ArcusService$BinderService.addAttributeLong(Ljava/lang/String;Ljava/lang/String;J)V
com.amazon.android.server.arcusservice.ArcusService$BinderService.addAttributeString(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.amazon.android.server.arcusservice.ArcusService$BinderService.clientsSyncFinished()V
com.amazon.android.server.arcusservice.ArcusService$BinderService.notifyMemoryFactorChanged(I)V
com.amazon.android.server.arcusservice.ArcusService$BinderService.openConfiguration(Ljava/lang/String;)Ljava/lang/String;
com.amazon.android.server.arcusservice.ArcusService$BinderService.overwriteConfiguration(Ljava/lang/String;Ljava/lang/String;)V
com.amazon.android.server.arcusservice.ArcusService$BinderService.register(Ljava/lang/String;)V
com.amazon.android.server.arcusservice.ArcusService$BinderService.sync(Ljava/util/List;Z)V
com.amazon.android.server.arcusservice.ArcusService$BinderService.syncId(Ljava/lang/String;Z)V
com.amazon.android.server.arcusservice.ArcusService$BinderService.updateBackupConfigurations(Ljava/lang/String;Ljava/lang/String;)V
com.amazon.android.crl.CRLSetManagerService$BinderService.checkTrusted([Lcom/amazon/android/crl/ParcelableX509Cert;)Z

