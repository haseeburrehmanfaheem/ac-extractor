com.android.server.display.DisplayManagerService$BinderService.getDisplayIds(Z)[I
com.android.server.display.DisplayManagerService$BinderService.isInSmartCastSmallWindow()Z
com.android.server.display.DisplayManagerService$BinderService.setMirrorDisplay(IIZ)V
com.android.server.AutoLaunchManagerService.addWidgetPackageIntoAutoLaunchTempWhiteList(Ljava/lang/String;)V
com.android.server.AutoLaunchManagerService.deletePkgListFromWakeupTable(Ljava/lang/String;ILjava/util/List;J)V
com.android.server.AutoLaunchManagerService.getAllItemFromWakeupTable(Ljava/lang/String;JJ)Ljava/util/List;
com.android.server.AutoLaunchManagerService.isInFlagTable(Ljava/lang/String;)Z
com.android.server.AutoLaunchManagerService.isPackageAutoLaunchEnabled(Ljava/lang/String;)Z
com.android.server.AutoLaunchManagerService.setAutoLaunchPackageEnabled(Ljava/lang/String;ZZZ)V
com.android.server.wm.ActivityTaskManagerService.getSmartCastSmallWindowPkgName()Ljava/lang/String;
com.android.server.wm.ActivityTaskManagerService.getSmartCastSmallWindowPkgUserId()I
com.android.server.wm.ActivityTaskManagerService.getTaskSnapshot(IZ)Landroid/window/TaskSnapshot;
com.android.server.wm.ActivityTaskManagerService.getTasks(IZZ)Ljava/util/List;
com.android.server.wm.ActivityTaskManagerService.getTopPackageNameInWindowReply()Ljava/lang/String;
com.android.server.wm.ActivityTaskManagerService.isFreeFormModeOpen()Z
com.android.server.wm.ActivityTaskManagerService.isTopRootTaskFreeformWR()Z
com.android.server.wm.ActivityTaskManagerService.isTopRootTaskHangFreeformWR()Z
com.android.server.wm.ActivityTaskManagerService.isTopRootTaskNormalFreeformWR()Z
com.android.server.wm.ActivityTaskManagerService.isfreeformTaskWrFocused()Z
com.android.server.wm.ActivityTaskManagerService.nextRootTaskIsSplitScreenForWR()Z
com.android.server.wm.ActivityTaskManagerService.startActivityFromRecentsForWR(IILandroid/os/Bundle;)I
com.android.server.wm.ActivityTaskManagerService.startBackNavigation(Z)Landroid/window/BackNavigationInfo;
com.android.server.wm.ActivityTaskManagerService.toggleExitHangForWr(Landroid/os/IBinder;)V
com.android.server.wm.ActivityTaskManagerService.topRootTaskIdFreeformWR()I
com.android.server.am.AIManagerService.getAppUsageSlotList(ZLjava/lang/String;)Ljava/util/List;
com.android.server.am.AIManagerService.getCacheParam(Ljava/lang/String;)I
com.android.server.am.AIManagerService.getIgnoreAppList()Ljava/util/List;
com.android.server.am.AIManagerService.getScreenStateList(ZLjava/lang/String;)Ljava/util/List;
com.android.server.am.AIManagerService.getStatus(Ljava/lang/String;Ljava/util/List;Ljava/lang/String;)Ljava/util/List;
com.android.server.am.AIManagerService.getVersion()I
com.android.server.am.AIManagerService.readCommonBundleList(Ljava/lang/String;Ljava/util/List;Ljava/lang/String;)Ljava/util/List;
com.android.server.am.AIManagerService.setAIPredictResult(Ljava/lang/String;Ljava/util/List;JIILjava/lang/String;)Z
com.android.server.am.AIManagerService.setCacheParam(Ljava/lang/String;I)Z
com.android.server.am.AIManagerService.setIgnoreAppList(Ljava/util/List;)Z
com.android.server.am.AIManagerService.setStatus(Ljava/lang/String;Ljava/util/List;Ljava/lang/String;)Z
com.android.server.am.AIManagerService.writeCommonBundleList(Ljava/lang/String;Ljava/util/List;Ljava/util/List;Ljava/lang/String;)Z
com.android.server.inputmethod.InputMethodManagerService.getRemoteEdit()Z
com.android.server.inputmethod.InputMethodManagerService.notifyCursorPos(IIII)V
com.android.server.inputmethod.InputMethodManagerService.notifyRemoteEdit(Z)V
com.android.server.inputmethod.InputMethodManagerService.setRemotePc(Z)V
com.android.server.inputmethod.InputMethodManagerService.updateImeNaviButtons(Z)V
com.android.server.clipboard.ClipboardService$ClipboardImpl.addPrimaryClipChangedListener(Landroid/content/IOnPrimaryClipChangedListener;Ljava/lang/String;I)V
com.android.server.clipboard.ClipboardService$ClipboardImpl.clearPrimaryClip(Ljava/lang/String;I)V
com.android.server.clipboard.ClipboardService$ClipboardImpl.getPrimaryClip(Ljava/lang/String;I)Landroid/content/ClipData;
com.android.server.clipboard.ClipboardService$ClipboardImpl.getPrimaryClipDescription(Ljava/lang/String;I)Landroid/content/ClipDescription;
com.android.server.clipboard.ClipboardService$ClipboardImpl.getPrimaryClipSource(Ljava/lang/String;I)Ljava/lang/String;
com.android.server.clipboard.ClipboardService$ClipboardImpl.hasClipboardText(Ljava/lang/String;I)Z
com.android.server.clipboard.ClipboardService$ClipboardImpl.hasPrimaryClip(Ljava/lang/String;I)Z
com.android.server.clipboard.ClipboardService$ClipboardImpl.removePrimaryClipChangedListener(Landroid/content/IOnPrimaryClipChangedListener;Ljava/lang/String;I)V
com.android.server.clipboard.ClipboardService$ClipboardImpl.setPrimaryClip(Landroid/content/ClipData;Ljava/lang/String;I)V
com.android.server.clipboard.ClipboardService$ClipboardImpl.setPrimaryClipAsPackage(Landroid/content/ClipData;Ljava/lang/String;ILjava/lang/String;)V
com.zte.audio.AudioABModeManagerService.canDispatchAudioFocusChange(Ljava/lang/String;)Z
com.zte.audio.AudioABModeManagerService.canSwitchABAudio()Z
com.zte.audio.AudioABModeManagerService.enterABMode()V
com.zte.audio.AudioABModeManagerService.getAudioFocusIndex()I
com.zte.audio.AudioABModeManagerService.onAbandonAudioFocus(Ljava/lang/String;)V
com.zte.audio.AudioABModeManagerService.onActivityMoved(Lcom/zte/audio/ActivityInfoLite;)V
com.zte.audio.AudioABModeManagerService.onActivitySwapped([Lcom/zte/audio/ActivityInfoLite;)V
com.zte.audio.AudioABModeManagerService.onRequestAudioFocus(ILjava/lang/String;Ljava/lang/String;Landroid/media/IAudioFocusDispatcher;)V
com.zte.audio.AudioABModeManagerService.postTrackStatusChanged(III)V
com.zte.audio.AudioABModeManagerService.quitABMode()V
com.zte.audio.AudioABModeManagerService.setAudioFocusCallback(Lcom/zte/audio/IAudioFocusCallback;)V
com.zte.audio.AudioABModeManagerService.switchABAudio()V
com.zte.audio.AudioABModeManagerService.updateProcessInfo(IILjava/lang/String;)V
com.zte.audio.AudioABModeManagerService.updateProcessInfoPack(I[I[Ljava/lang/String;)V
com.android.server.net.NetworkPolicyManagerService.getUidPolicy_ZTE(I)I
com.android.server.net.NetworkPolicyManagerService.setUidPolicy_ZTE(II)V
com.android.server.am.CpuFreezerManagerServiceV2$14.addCpuFreezerForPkgName(Ljava/lang/String;)Z
com.android.server.am.CpuFreezerManagerServiceV2$14.addFlags(II)Z
com.android.server.am.CpuFreezerManagerServiceV2$14.getCpuFreezerUids()[I
com.android.server.am.CpuFreezerManagerServiceV2$14.getFreezeStartTime(I)J
com.android.server.am.CpuFreezerManagerServiceV2$14.getUidFreezer(I)I
com.android.server.am.CpuFreezerManagerServiceV2$14.isAppFreezed(I)Z
com.android.server.am.CpuFreezerManagerServiceV2$14.isForceFreezedApp(I)Z
com.android.server.am.CpuFreezerManagerServiceV2$14.isInFrozenWhiteList(Ljava/lang/String;)Z
com.android.server.am.CpuFreezerManagerServiceV2$14.removeCpuFreezerForPkgName(Ljava/lang/String;)Z
com.android.server.am.CpuFreezerManagerServiceV2$14.removeFlags(II)Z
com.android.server.am.CpuFreezerManagerServiceV2$14.setCpuFreezerForPkgName(Ljava/lang/String;ILjava/lang/String;)Z
com.android.server.am.CpuFreezerManagerServiceV2$14.setCpuFreezerForPkgUid(IILjava/lang/String;)Z
com.android.server.am.CpuFreezerManagerServiceV2$14.setForceFreeze(I)Z
com.android.server.am.CpuFreezerManagerServiceV2$14.setFrozenWhiteList(Ljava/lang/String;Z)Z
com.android.server.am.CpuFreezerManagerServiceV2$14.setUidFreezer(II)V
com.android.server.vibrator.VibratorManagerService.vibrate(ILjava/lang/String;Landroid/os/CombinedVibration;Landroid/os/VibrationAttributes;Ljava/lang/String;Landroid/os/IBinder;)V
com.android.server.am.ScreenRefreshRateService$1.beginFixFps()V
com.android.server.am.ScreenRefreshRateService$1.endFixFps()V
com.android.server.am.ScreenRefreshRateService$1.setFrameRateByApp(FII)V
com.android.server.am.ScreenRefreshRateService$1.setFrameRateForSceneChange(I)V
com.android.server.locksettings.LockSettingsService.getPassword()Ljava/lang/String;
com.android.server.locksettings.LockSettingsService.isBiometricFallbackAlphaVersion()Z
com.android.server.locksettings.LockSettingsService.isBiometricFallbacked(II)Z
com.android.server.locksettings.LockSettingsService.registerBiometricFallback(Landroid/app/trust/IBiometricFallback;)V
com.android.server.locksettings.LockSettingsService.removeBiometricFallback(III)V
com.android.server.locksettings.LockSettingsService.reportFingerprintAuthed(I)V
com.android.server.locksettings.LockSettingsService.requireBiometricFallback(III)V
com.android.server.locksettings.LockSettingsService.sanitizePassword()V
com.android.server.locksettings.LockSettingsService.unregisterBiometricFallback(Landroid/app/trust/IBiometricFallback;)V
com.android.server.am.ZteLogManagerService$BinderService.dumpSpecialLog(Ljava/lang/String;Ljava/lang/String;I)V
com.android.server.biometrics.sensors.fingerprint.FingerprintService$FingerprintServiceWrapper.setFpTestCmd(II)I
com.android.server.power.PowerManagerService$1.getCurrentAudioRunningUids()Ljava/util/Map;
com.android.server.am.ZtePowerTrackerService$BinderService.getAlarmAlignType(Ljava/lang/String;)I
com.android.server.am.ZtePowerTrackerService$BinderService.getLockscreenCleanType(Ljava/lang/String;)I
com.android.server.am.ZtePowerTrackerService$BinderService.getLongArrayWithType(I)[J
com.android.server.am.ZtePowerTrackerService$BinderService.getNrPowerType(Ljava/lang/String;)I
com.android.server.am.ZtePowerTrackerService$BinderService.performIdleMaintenance(Z)V
com.android.server.am.ZtePowerTrackerService$BinderService.predictAppAnomaly([DII)I
com.android.server.am.ZtePowerTrackerService$BinderService.predictInoutDoor([DII)I
com.android.server.am.ZtePowerTrackerService$BinderService.reportEvent(IILjava/lang/String;)V
com.android.server.am.ZtePowerTrackerService$BinderService.setAlarmAlignType(Ljava/lang/String;I)V
com.android.server.am.ZtePowerTrackerService$BinderService.setLockscreenCleanType(Ljava/lang/String;I)V
com.android.server.am.ZtePowerTrackerService$BinderService.setLongArrayWithType([JI)Z
com.android.server.am.ZtePowerTrackerService$BinderService.setNrPowerType(Ljava/lang/String;I)V
com.android.server.am.ZtePowerTrackerService$BinderService.setPredictAppAnomalyLRParameters([DI)I
com.android.server.am.ZtePowerTrackerService$BinderService.setPredictInoutDoorLRParameters([DI)I
com.android.server.zte.MediaColorEffectManagerService.setHDREnabled(II)V
com.android.server.am.ZPerfService$1.setOriginGameFPS()V
com.android.server.am.ZPerfService$1.setSuperGameMode(Z)V
com.android.server.am.ZPerfService$1.triggerZPerfDrawScene(IZI)V
com.android.server.am.ZPerfService$1.triggerZPerfMode(I)V
com.android.server.am.ZPerfService$1.triggerZPerfScene(I)V
com.android.server.am.ZPerfService$1.triggerZPerfTGPAState(IILjava/lang/String;)V
com.android.server.am.ZPerfService$1.triggerZPerfTgpaUpdateGameInfo(II)V
com.android.server.am.ZPerfService$1.triggerZPerfTgpaUpdatePkgList(Ljava/util/List;)V
com.android.server.scene.ZteSceneDecisionService$2.addUseSurfaceViewPkg(Ljava/lang/String;)V
com.android.server.scene.ZteSceneDecisionService$2.getAllPkgNames()Landroid/content/ContentValues;
com.android.server.scene.ZteSceneDecisionService$2.getAppStrategyInfo(Ljava/lang/String;I)I
com.android.server.scene.ZteSceneDecisionService$2.getLaunchableApps()Ljava/util/List;
com.android.server.scene.ZteSceneDecisionService$2.getLockedPkgs()Ljava/util/List;
com.android.server.scene.ZteSceneDecisionService$2.getSmartOptimizeState()I
com.android.server.scene.ZteSceneDecisionService$2.getTempSensorValue()I
com.android.server.scene.ZteSceneDecisionService$2.getZteDeviceId()Ljava/lang/String;
com.android.server.scene.ZteSceneDecisionService$2.isPkgLocked(Ljava/lang/String;)Z
com.android.server.scene.ZteSceneDecisionService$2.monitorFrameSkipped(JI)V
com.android.server.scene.ZteSceneDecisionService$2.noteBluetoothConnectState(ZIILjava/lang/String;)V
com.android.server.scene.ZteSceneDecisionService$2.noteComponentStrategyChanged()V
com.android.server.scene.ZteSceneDecisionService$2.noteDataCollector(IIJ)V
com.android.server.scene.ZteSceneDecisionService$2.noteEndMusic(IIJ)V
com.android.server.scene.ZteSceneDecisionService$2.notePkgStrategyChanged(Ljava/lang/String;)V
com.android.server.scene.ZteSceneDecisionService$2.noteRemoveTask(IZ)Z
com.android.server.scene.ZteSceneDecisionService$2.noteStartMusic(IIJ)V
com.android.server.scene.ZteSceneDecisionService$2.noteValueAnimatorEnd(I)V
com.android.server.scene.ZteSceneDecisionService$2.noteValueAnimatorStart(I)V
com.android.server.scene.ZteSceneDecisionService$2.noteWiFiP2PActiveUid(ZI)V
com.android.server.scene.ZteSceneDecisionService$2.notifyKeepScreenOnState(Ljava/lang/String;Z)V
com.android.server.scene.ZteSceneDecisionService$2.onPolicyModuleReady()V
com.android.server.scene.ZteSceneDecisionService$2.onPolicyUpdatedFromCloud()V
com.android.server.scene.ZteSceneDecisionService$2.removeUseSurfaceViewPkg(Ljava/lang/String;)V
com.android.server.scene.ZteSceneDecisionService$2.restoreUserSettingsForPowerSave()V
com.android.server.scene.ZteSceneDecisionService$2.setAppLockState(Ljava/lang/String;I)Z
com.android.server.scene.ZteSceneDecisionService$2.setBgAppCleanupState(Z)Z
com.android.server.scene.ZteSceneDecisionService$2.setBgAppRuningState(Ljava/lang/String;I)Z
com.android.server.scene.ZteSceneDecisionService$2.setCleanupStartTime(I)Z
com.android.server.scene.ZteSceneDecisionService$2.setPkgRelatedStartState(Ljava/lang/String;I)Z
com.android.server.scene.ZteSceneDecisionService$2.setPkgSelfStartState(Ljava/lang/String;I)Z
com.android.server.scene.ZteSceneDecisionService$2.setSmartOptimizeState(Z)V
com.android.server.scene.ZteSceneDecisionService$2.startBgAppCleanupFromRecent(Ljava/lang/String;)Z
com.android.server.scene.ZteSceneDecisionService$2.startSingleAppCleanupFromRecent(Ljava/lang/String;)Z
com.android.server.scene.ZteSceneDecisionService$2.topAppIsType(I)Z
com.android.server.scene.ZteSceneDecisionService$2.updateAppProtectedState(Ljava/lang/String;Z)V
com.android.server.scene.ZteSceneDecisionService$2.updateNightModeTime([I)Z
com.android.server.zte.ZswGeneralService.getDeviceOMA_DM_Key()Ljava/lang/String;
com.android.server.zte.ZswGeneralService.getSpeechTransOnOff()I
com.android.server.zte.ZswGeneralService.isKidsZoneBlackApp(Ljava/lang/String;)Z
com.android.server.zte.ZswGeneralService.setAppEnableSetting(Ljava/lang/String;Z)Z
com.android.server.zte.ZswGeneralService.setComponentEnableSetting(Landroid/content/ComponentName;Z)Z
com.android.server.zte.ZswGeneralService.setKidsZoneBlackApp([Ljava/lang/String;)Z
com.android.server.zte.ZswGeneralService.setSpeechTransOnOff(I)V
com.android.server.zte.ZswGeneralService.updatePackageState(Ljava/lang/String;I)I
com.android.server.zte.ZtePermissionCheckService.CheckPermissionForZte(Ljava/lang/String;Ljava/lang/String;)Z
com.android.server.zte.ZtePermissionCheckService.checkAccesAppOpsForZte(Ljava/lang/String;I)Z
com.android.server.zte.ZtePermissionCheckService.checkPkgSig256Legal(Ljava/lang/String;Ljava/lang/String;)Z
com.android.server.zte.ZtePermissionCheckService.grantPermissionForZte(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z
com.android.server.AppLockManagerService.addPkgListToTable(Ljava/util/List;Ljava/lang/String;)V
com.android.server.am.MindSyncService$1.acquirePerformanceLock(Landroid/os/IBinder;Ljava/lang/String;IJ)V
com.android.server.am.MindSyncService$1.boostForTgpa(IILjava/lang/String;)I
com.android.server.am.MindSyncService$1.getAppsKilledList()Landroid/content/ContentValues;
com.android.server.am.MindSyncService$1.getKeyAppList()Ljava/util/List;
com.android.server.am.MindSyncService$1.getSmartOptimizeState()I
com.android.server.am.MindSyncService$1.installEvent(Landroid/os/Bundle;)V
com.android.server.am.MindSyncService$1.isAllowRgstHighPrecisionSensor(Ljava/lang/String;)Z
com.android.server.am.MindSyncService$1.noteAppAnrCrash(Ljava/lang/String;ILjava/lang/String;J)V
com.android.server.am.MindSyncService$1.noteAppBackground(ILjava/lang/String;ILjava/lang/String;JI)V
com.android.server.am.MindSyncService$1.noteAppForeground(ILjava/lang/String;Ljava/lang/String;ILjava/lang/String;ILjava/lang/String;JZLandroid/content/Intent;Ljava/lang/String;Ljava/lang/String;Z)V
com.android.server.am.MindSyncService$1.noteAppUsingCamera(ILjava/lang/String;ILjava/lang/String;JZ)V
com.android.server.am.MindSyncService$1.noteAppUsingSensor(Ljava/lang/String;ILjava/lang/String;J)V
com.android.server.am.MindSyncService$1.noteCommonEvent(Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;)V
com.android.server.am.MindSyncService$1.noteDefendEvent(Ljava/lang/String;I)V
com.android.server.am.MindSyncService$1.noteEndGps(IILjava/lang/String;Ljava/lang/String;JJ)V
com.android.server.am.MindSyncService$1.noteEndMusic(IIJ)V
com.android.server.am.MindSyncService$1.noteEndNetworkPosition(IILjava/lang/String;Ljava/lang/String;JJ)V
com.android.server.am.MindSyncService$1.noteFocusChangedLw(Ljava/lang/String;)V
com.android.server.am.MindSyncService$1.noteIdleState(I)V
com.android.server.am.MindSyncService$1.noteLightIdleState(I)V
com.android.server.am.MindSyncService$1.notePausingActivity(IILjava/lang/String;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;I)V
com.android.server.am.MindSyncService$1.noteRemovingProcess(IILjava/lang/String;Ljava/lang/String;)V
com.android.server.am.MindSyncService$1.noteResumedActivity(IILjava/lang/String;Ljava/lang/String;II)V
com.android.server.am.MindSyncService$1.noteResumedAppDie(IILjava/lang/String;Ljava/lang/String;)V
com.android.server.am.MindSyncService$1.noteResumingActivity(IILjava/lang/String;Ljava/lang/String;ZILjava/lang/String;I)V
com.android.server.am.MindSyncService$1.noteRevokePermission(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.server.am.MindSyncService$1.noteScreenState(I)V
com.android.server.am.MindSyncService$1.noteStartGps(IILjava/lang/String;Ljava/lang/String;JJ)V
com.android.server.am.MindSyncService$1.noteStartMusic(IIJ)V
com.android.server.am.MindSyncService$1.noteStartNetworkPosition(IILjava/lang/String;Ljava/lang/String;JJ)V
com.android.server.am.MindSyncService$1.noteStoppingActivity(IILjava/lang/String;Ljava/lang/String;I)V
com.android.server.am.MindSyncService$1.noteThreadLag(Ljava/lang/String;Ljava/lang/String;JJLjava/lang/String;)V
com.android.server.am.MindSyncService$1.noteWakeUp(Ljava/lang/String;ILjava/lang/String;)V
com.android.server.am.MindSyncService$1.onPolicyModuleReady(ILjava/lang/String;)V
com.android.server.am.MindSyncService$1.releasePerformanceLock(Landroid/os/IBinder;)V
com.android.server.am.MindSyncService$1.setAppLockState(Ljava/lang/String;I)Z
com.android.server.am.MindSyncService$1.setBgAppCleanupState(Z)Z
com.android.server.am.MindSyncService$1.setBgAppRuningState(Ljava/lang/String;I)Z
com.android.server.am.MindSyncService$1.setCleanupStartTime(I)Z
com.android.server.am.MindSyncService$1.setPackagePolicy(Ljava/lang/String;IIIII)V
com.android.server.am.MindSyncService$1.setPkgRelatedStartState(Ljava/lang/String;I)Z
com.android.server.am.MindSyncService$1.setPkgSelfStartState(Ljava/lang/String;I)Z
com.android.server.am.MindSyncService$1.setSmartOptimizeState(Z)V
com.android.server.am.MindSyncService$1.setThreadCpusetForTgpa(IZ)I
com.android.server.am.MindSyncService$1.startBgAppCleanup(ZLjava/util/List;)Landroid/content/ContentValues;
com.android.server.am.MindSyncService$1.startBgAppCleanupFromGameMode(Ljava/util/List;)Landroid/content/ContentValues;
com.android.server.am.MindSyncService$1.uninstallEvent(Landroid/os/Bundle;)V
com.android.server.am.MindSyncService$1.updateAppProtectedState(Ljava/lang/String;Z)V
com.android.server.ContainerService.appDied(Ljava/lang/String;Ljava/lang/String;II)V
com.android.server.ContainerService.getCanSwitchSystem()Ljava/lang/String;
com.android.server.ContainerService.getContainerName()Ljava/lang/String;
com.android.server.ContainerService.getHostProp(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
com.android.server.ContainerService.getPreviousTorchMode()Z
com.android.server.ContainerService.isActive()Z
com.android.server.ContainerService.registerDataRecvBySyncListener(Ljava/lang/String;Landroid/os/IContainerDataRecvBySyncListener;)Z
com.android.server.ContainerService.registerDataRecvListener(Ljava/lang/String;Landroid/os/IContainerDataRecvListener;)Z
com.android.server.ContainerService.registerSwitchListener(Ljava/lang/String;Landroid/os/IContainerSwitchListener;)Z
com.android.server.ContainerService.sendBroadcastToOtherSystem(Landroid/content/Intent;Ljava/lang/String;)V
com.android.server.ContainerService.sendBytesToOtherSystem([BLjava/lang/String;)V
com.android.server.ContainerService.sendBytesToOtherSystemBySync([BLjava/lang/String;)[B
com.android.server.ContainerService.sendMessageToOtherSystem(Ljava/lang/String;Ljava/lang/String;)V
com.android.server.ContainerService.sendMessageToOtherSystemBySync(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
com.android.server.ContainerService.sendSystemReadyToCelld()V
com.android.server.ContainerService.setHomeProp(Ljava/lang/String;Ljava/lang/String;)V
com.android.server.ContainerService.setHostProp(Ljava/lang/String;Ljava/lang/String;)V
com.android.server.ContainerService.setPreviousTorchMode(Z)V
com.android.server.ContainerService.setWorkProp(Ljava/lang/String;Ljava/lang/String;)V
com.android.server.ContainerService.switchLock(Ljava/lang/String;)V
com.android.server.ContainerService.switchLockForPersist(Ljava/lang/String;)Z
com.android.server.ContainerService.switchSystem()V
com.android.server.ContainerService.switchunLock(Ljava/lang/String;)V
com.android.server.ContainerService.switchunLockForPersist(Ljava/lang/String;)Z
com.android.server.ContainerService.unregisterDataRecvBySyncListener(Ljava/lang/String;)Z
com.android.server.ContainerService.unregisterDataRecvListener(Ljava/lang/String;)Z
com.android.server.ContainerService.unregisterSwitchListener(Ljava/lang/String;)Z
com.android.server.wm.DefendManagerService$BinderService.isAnyNonToastWindowVisibleForUid(I)Z
com.android.server.wm.DefendManagerService$BinderService.reportViewCountchange(Ljava/lang/String;I)V
com.android.server.zte.PCModeManagerService.backUpScreenBrightness(I)V
com.android.server.zte.PCModeManagerService.checkAppStartedInOtherDisplay(ILjava/lang/String;I)I
com.android.server.zte.PCModeManagerService.getBackUpScreenBrightness()I
com.android.server.zte.PCModeManagerService.getBackupDisplayID()I
com.android.server.zte.PCModeManagerService.getConfiguration(I)Landroid/content/res/Configuration;
com.android.server.zte.PCModeManagerService.getDefaultImePackage()Ljava/lang/String;
com.android.server.zte.PCModeManagerService.getFocusDisplayId()I
com.android.server.zte.PCModeManagerService.getInputMethodToken()Landroid/os/IBinder;
com.android.server.zte.PCModeManagerService.getMode()I
com.android.server.zte.PCModeManagerService.getPCDisplayID()I
com.android.server.zte.PCModeManagerService.goToFakeSleep()V
com.android.server.zte.PCModeManagerService.isFakeSleep()Z
com.android.server.zte.PCModeManagerService.isHardKeyboardAvailable()Z
com.android.server.zte.PCModeManagerService.isPCDisplayID(I)Z
com.android.server.zte.PCModeManagerService.isPCDisplayType(I)Z
com.android.server.zte.PCModeManagerService.moveWindowToken(Landroid/os/IBinder;III)V
com.android.server.zte.PCModeManagerService.notifyAppStart(ILjava/lang/String;I)V
com.android.server.zte.PCModeManagerService.onDisplayContentAdded(I)V
com.android.server.zte.PCModeManagerService.registerCallback(Lcom/zte/pcmode/IPCModeManagerCallback;)V
com.android.server.zte.PCModeManagerService.removeWindowToken(Landroid/os/IBinder;I)V
com.android.server.zte.PCModeManagerService.setBackupDisplayID(I)V
com.android.server.zte.PCModeManagerService.setFocusedDisplayId(I)V
com.android.server.zte.PCModeManagerService.setInputMethodToken(Landroid/os/IBinder;)V
com.android.server.zte.PCModeManagerService.setMode(I)V
com.android.server.zte.PCModeManagerService.showAppOpenedInOtherDisplayHint(I)V
com.android.server.zte.PCModeManagerService.showThirdAppNotOptimizedHint()V
com.android.server.zte.PCModeManagerService.wakeUpFromFakeSleep()V
com.zte.versionUpdate.VersionUpdateManagerService.versionUpdate(Ljava/lang/String;Ljava/lang/String;)I
com.android.server.am.ZtePerformanceService$BinderService.needImmediateSpeedProfile(Ljava/lang/String;)Z
com.android.server.am.ZtePerformanceService$BinderService.registerListener(Lcom/zte/performance/IZtePerformanceListener;)V
com.android.server.am.ZtePerformanceService$BinderService.reportEvent(ILjava/lang/String;)V
com.android.server.audio.AudioServiceDualHook$AudioMessageService.updateStatus(Ljava/lang/String;[I)V
com.android.server.zte.ZteDeviceIdentifyService.getAAID(Ljava/lang/String;)Ljava/lang/String;
com.android.server.zte.ZteDeviceIdentifyService.getOAID()Ljava/lang/String;
com.android.server.zte.ZteDeviceIdentifyService.getUDID()Ljava/lang/String;
com.android.server.zte.ZteDeviceIdentifyService.getVAID(Ljava/lang/String;)Ljava/lang/String;
com.android.server.zte.ZteDeviceIdentifyService.isSupported()Z
com.android.server.wm.LongScreenShotServiceZTE.addLongScreenShotWindowZTE(Landroid/view/IWindow;Landroid/os/IBinder;)V
com.android.server.wm.LongScreenShotServiceZTE.cleanLongScreenShotZTE()V
com.android.server.wm.LongScreenShotServiceZTE.getWindowIsSecure()Z
com.android.server.wm.LongScreenShotServiceZTE.longScreenshotApplicationsZTE(IIIF)Landroid/graphics/Bitmap;
com.android.server.wm.LongScreenShotServiceZTE.screenshotApplicationsZTE(ILjava/lang/String;)Landroid/graphics/Bitmap;
com.android.server.ThemeService.checkNeedbeautify(ILjava/lang/String;)Z
com.android.server.ThemeService.getCurrThemeIconConfigMaskPath(I)Ljava/lang/String;
com.android.server.ThemeService.getCurrThemeIconEffectTopAlign(I)I
com.android.server.ThemeService.getCurrThemeIconOverlap(I)I
com.android.server.ThemeService.getCurrThemeIconOverlapTop(I)I
com.android.server.ThemeService.getCurrentThemeNameForIcon(I)Ljava/lang/String;
com.android.server.ThemeService.isSupportIconChange(I)Z
com.android.server.ThemeService.requestDynamicSelfDefine(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.server.ThemeService.requestDynamicSelfDefineAndTheme(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
com.android.server.ThemeService.requestFontChange(Ljava/lang/String;Ljava/lang/String;FZ)V
com.android.server.ThemeService.requestThemeChange(Ljava/lang/String;)V
com.android.server.zsdk.PolicyManagerService.ClearAppUserdata(Ljava/lang/String;)Z
com.android.server.zsdk.PolicyManagerService.addEmergencyNumber(Ljava/util/List;)Z
com.android.server.zsdk.PolicyManagerService.addHideLauncherIconList(Ljava/util/List;)Z
com.android.server.zsdk.PolicyManagerService.addTrustedAppStore(Ljava/util/List;)Z
com.android.server.zsdk.PolicyManagerService.canInstallOrDeleApp()Z
com.android.server.zsdk.PolicyManagerService.deleteTrustedAppStore(Ljava/util/List;)Z
com.android.server.zsdk.PolicyManagerService.enableTrustedAppStore(Z)Z
com.android.server.zsdk.PolicyManagerService.getCurrentZone()I
com.android.server.zsdk.PolicyManagerService.getDefaultLauncherPackage()Ljava/lang/String;
com.android.server.zsdk.PolicyManagerService.getDeviceState()Ljava/util/List;
com.android.server.zsdk.PolicyManagerService.getEmergencyNumber()Ljava/util/List;
com.android.server.zsdk.PolicyManagerService.getHideLauncherIconList()Ljava/util/List;
com.android.server.zsdk.PolicyManagerService.getTrustedAppStore()Ljava/util/List;
com.android.server.zsdk.PolicyManagerService.grantPermission()Z
com.android.server.zsdk.PolicyManagerService.isEmergencyNumber(Ljava/lang/String;)Z
com.android.server.zsdk.PolicyManagerService.isWorkZone()Z
com.android.server.zsdk.PolicyManagerService.removeHideLauncherIconList(Ljava/util/List;)Z
com.android.server.zsdk.PolicyManagerService.setDefaultLauncherPackage(Ljava/lang/String;)Z
com.android.server.zsdk.PolicyManagerService.zdevpAddKeepaliveApp(Ljava/lang/String;)Z
com.android.server.zsdk.PolicyManagerService.zdevpAddWhiteListTypeNumber(Ljava/util/List;I)Z
com.android.server.zsdk.PolicyManagerService.zdevpAppendWhiteListTypeNumber(Ljava/util/List;I)Z
com.android.server.zsdk.PolicyManagerService.zdevpCloseWaterMark()V
com.android.server.zsdk.PolicyManagerService.zdevpCreateApn(Ljava/lang/String;)I
com.android.server.zsdk.PolicyManagerService.zdevpDeletePackage(Ljava/lang/String;Landroid/content/pm/IPackageDeleteObserver;I)Z
com.android.server.zsdk.PolicyManagerService.zdevpDisestablishVpnConnection()I
com.android.server.zsdk.PolicyManagerService.zdevpEraseExternalSDCard()Z
com.android.server.zsdk.PolicyManagerService.zdevpEstablishVpnConnection()I
com.android.server.zsdk.PolicyManagerService.zdevpForbiddenHomeAndRecent(I)V
com.android.server.zsdk.PolicyManagerService.zdevpForbiddenSpecifiedNavKey(II)V
com.android.server.zsdk.PolicyManagerService.zdevpGetAdbInstallUninstallPolicies()I
com.android.server.zsdk.PolicyManagerService.zdevpGetAddWhiteListTypeNumberStatus(I)Z
com.android.server.zsdk.PolicyManagerService.zdevpGetAllApnList()Ljava/util/List;
com.android.server.zsdk.PolicyManagerService.zdevpGetAllowRecordStatus()I
com.android.server.zsdk.PolicyManagerService.zdevpGetAllowedDataLinkSlot()I
com.android.server.zsdk.PolicyManagerService.zdevpGetApn(I)Landroid/content/ContentValues;
com.android.server.zsdk.PolicyManagerService.zdevpGetApnList()Ljava/util/List;
com.android.server.zsdk.PolicyManagerService.zdevpGetAppInstallPolicies()[Ljava/lang/String;
com.android.server.zsdk.PolicyManagerService.zdevpGetAppKeepaliveStatus()I
com.android.server.zsdk.PolicyManagerService.zdevpGetAppPermission(Ljava/lang/String;)Ljava/lang/String;
com.android.server.zsdk.PolicyManagerService.zdevpGetAppPowerUsage()Ljava/util/List;
com.android.server.zsdk.PolicyManagerService.zdevpGetAppRunInfo()Ljava/util/List;
com.android.server.zsdk.PolicyManagerService.zdevpGetAppRuntimeExceptionInfo()Ljava/util/List;
com.android.server.zsdk.PolicyManagerService.zdevpGetAppUninstallPolicies()[Ljava/lang/String;
com.android.server.zsdk.PolicyManagerService.zdevpGetAppsList(I)Ljava/util/List;
com.android.server.zsdk.PolicyManagerService.zdevpGetBiometricRecognitionPolicies()I
com.android.server.zsdk.PolicyManagerService.zdevpGetBluetoothStatus()I
com.android.server.zsdk.PolicyManagerService.zdevpGetBluetoothWhitelist()Ljava/util/List;
com.android.server.zsdk.PolicyManagerService.zdevpGetBtTetheringStatus()I
com.android.server.zsdk.PolicyManagerService.zdevpGetCameraPolicies()I
com.android.server.zsdk.PolicyManagerService.zdevpGetCaptureScreenPolicies()I
com.android.server.zsdk.PolicyManagerService.zdevpGetContainerPolicies()I
com.android.server.zsdk.PolicyManagerService.zdevpGetCurDevicePosition()Ljava/lang/String;
com.android.server.zsdk.PolicyManagerService.zdevpGetCurrentApn()Landroid/content/ContentValues;
com.android.server.zsdk.PolicyManagerService.zdevpGetCurrentSystem()I
com.android.server.zsdk.PolicyManagerService.zdevpGetDataLinkStatus()I
com.android.server.zsdk.PolicyManagerService.zdevpGetDevelopmentModePolicies()I
com.android.server.zsdk.PolicyManagerService.zdevpGetDeviceInfo()Ljava/util/List;
com.android.server.zsdk.PolicyManagerService.zdevpGetFactoryResetPolicies()I
com.android.server.zsdk.PolicyManagerService.zdevpGetFlashPolicies()I
com.android.server.zsdk.PolicyManagerService.zdevpGetIccid()[Ljava/lang/String;
com.android.server.zsdk.PolicyManagerService.zdevpGetImei()[Ljava/lang/String;
com.android.server.zsdk.PolicyManagerService.zdevpGetInstallUninstallPolicies()[Ljava/lang/String;
com.android.server.zsdk.PolicyManagerService.zdevpGetKeepaliveAppList()Ljava/util/List;
com.android.server.zsdk.PolicyManagerService.zdevpGetLocationServiceStatus()I
com.android.server.zsdk.PolicyManagerService.zdevpGetLockScreenPolicy()I
com.android.server.zsdk.PolicyManagerService.zdevpGetMessageFromAnotherSystem()Ljava/lang/String;
com.android.server.zsdk.PolicyManagerService.zdevpGetMessagePolicies()[I
com.android.server.zsdk.PolicyManagerService.zdevpGetMicrophonePolicies()I
com.android.server.zsdk.PolicyManagerService.zdevpGetNFCStatus()I
com.android.server.zsdk.PolicyManagerService.zdevpGetNavigationBarStatus()I
com.android.server.zsdk.PolicyManagerService.zdevpGetPasswordPolicy()I
com.android.server.zsdk.PolicyManagerService.zdevpGetPeripheralPolicies()I
com.android.server.zsdk.PolicyManagerService.zdevpGetPrivateIpList()Ljava/lang/String;
com.android.server.zsdk.PolicyManagerService.zdevpGetPrivateIpListStatus()I
com.android.server.zsdk.PolicyManagerService.zdevpGetRootState()Z
com.android.server.zsdk.PolicyManagerService.zdevpGetRunAppPolicies()[Ljava/lang/String;
com.android.server.zsdk.PolicyManagerService.zdevpGetSDCardStatus()I
com.android.server.zsdk.PolicyManagerService.zdevpGetScreenLockStatus()I
com.android.server.zsdk.PolicyManagerService.zdevpGetSilentInstallUninstallPolicies()[Ljava/lang/String;
com.android.server.zsdk.PolicyManagerService.zdevpGetSmsPolicies()I
com.android.server.zsdk.PolicyManagerService.zdevpGetSmsStatus()I
com.android.server.zsdk.PolicyManagerService.zdevpGetSoftwareInfo()Ljava/util/List;
com.android.server.zsdk.PolicyManagerService.zdevpGetSpeakerPolicies()I
com.android.server.zsdk.PolicyManagerService.zdevpGetStatusBarStatus()I
com.android.server.zsdk.PolicyManagerService.zdevpGetSystemUpdatePolicies()I
com.android.server.zsdk.PolicyManagerService.zdevpGetTelephonyStatus()I
com.android.server.zsdk.PolicyManagerService.zdevpGetTelephonyWhiteListTypeStatus()I
com.android.server.zsdk.PolicyManagerService.zdevpGetTrafficByPkg(Ljava/lang/String;)[Ljava/lang/String;
com.android.server.zsdk.PolicyManagerService.zdevpGetTrafficByUid(I)[Ljava/lang/String;
com.android.server.zsdk.PolicyManagerService.zdevpGetUSBUtilStatus()I
com.android.server.zsdk.PolicyManagerService.zdevpGetUserApnMgrPolicies()I
com.android.server.zsdk.PolicyManagerService.zdevpGetUserPasswordPolicies()I
com.android.server.zsdk.PolicyManagerService.zdevpGetUserTimeMgrStatus()I
com.android.server.zsdk.PolicyManagerService.zdevpGetVoicePolicies()I
com.android.server.zsdk.PolicyManagerService.zdevpGetVpnServiceState()I
com.android.server.zsdk.PolicyManagerService.zdevpGetWhiteListTypeNumber(I)Ljava/util/List;
com.android.server.zsdk.PolicyManagerService.zdevpGetWifiApAllowList()[Ljava/lang/String;
com.android.server.zsdk.PolicyManagerService.zdevpGetWifiApStatus()I
com.android.server.zsdk.PolicyManagerService.zdevpGetWifiConfiguration()Ljava/lang/String;
com.android.server.zsdk.PolicyManagerService.zdevpGetWifiStatus()I
com.android.server.zsdk.PolicyManagerService.zdevpIsActived()Z
com.android.server.zsdk.PolicyManagerService.zdevpIsBtFileShareEnabled()Z
com.android.server.zsdk.PolicyManagerService.zdevpLockScreen(Ljava/lang/String;)Z
com.android.server.zsdk.PolicyManagerService.zdevpOpenWaterMark(Ljava/lang/String;)Z
com.android.server.zsdk.PolicyManagerService.zdevpOperateWifiApWhiteList(ILjava/lang/String;)Z
com.android.server.zsdk.PolicyManagerService.zdevpReboot()V
com.android.server.zsdk.PolicyManagerService.zdevpRemoveApn(I)Z
com.android.server.zsdk.PolicyManagerService.zdevpRemoveKeepaliveApp(Ljava/lang/String;)Z
com.android.server.zsdk.PolicyManagerService.zdevpRemoveWhiteListTypeNumber(Ljava/util/List;I)Z
com.android.server.zsdk.PolicyManagerService.zdevpResetFactoryData(II)V
com.android.server.zsdk.PolicyManagerService.zdevpResetPassword(Ljava/lang/String;)Z
com.android.server.zsdk.PolicyManagerService.zdevpSetAdbInstallUninstallPolicies(I)Z
com.android.server.zsdk.PolicyManagerService.zdevpSetAllowRecord(I)Z
com.android.server.zsdk.PolicyManagerService.zdevpSetAllowedDataLinkSlot(I)Z
com.android.server.zsdk.PolicyManagerService.zdevpSetAppInstallStatus(I)Z
com.android.server.zsdk.PolicyManagerService.zdevpSetAppKeepaliveStatus(I)Z
com.android.server.zsdk.PolicyManagerService.zdevpSetAppPermission(Ljava/lang/String;Ljava/lang/String;)Z
com.android.server.zsdk.PolicyManagerService.zdevpSetAppUninstallPolicies(I)Z
com.android.server.zsdk.PolicyManagerService.zdevpSetBiometricRecognitionPolicies(I)Z
com.android.server.zsdk.PolicyManagerService.zdevpSetBluetoothStatus(I[Ljava/lang/String;)Z
com.android.server.zsdk.PolicyManagerService.zdevpSetBtFileShareEnabled(Z)V
com.android.server.zsdk.PolicyManagerService.zdevpSetBtTetheringStatus(I[Ljava/lang/String;)Z
com.android.server.zsdk.PolicyManagerService.zdevpSetCameraPolicies(I)Z
com.android.server.zsdk.PolicyManagerService.zdevpSetContainerNumber(I)Z
com.android.server.zsdk.PolicyManagerService.zdevpSetContainerPolicies(I)Z
com.android.server.zsdk.PolicyManagerService.zdevpSetCurrentApn(I)Z
com.android.server.zsdk.PolicyManagerService.zdevpSetDataLinkStatus(I)Z
com.android.server.zsdk.PolicyManagerService.zdevpSetDevelopmentModePolicies(I)Z
com.android.server.zsdk.PolicyManagerService.zdevpSetFactoryResetPolicies(I)Z
com.android.server.zsdk.PolicyManagerService.zdevpSetFlashPolicies(I)Z
com.android.server.zsdk.PolicyManagerService.zdevpSetInstallUninstallPolicies(I[Ljava/lang/String;)Z
com.android.server.zsdk.PolicyManagerService.zdevpSetIptables(ILjava/lang/String;)Ljava/lang/String;
com.android.server.zsdk.PolicyManagerService.zdevpSetLocationServiceStatus(I)Z
com.android.server.zsdk.PolicyManagerService.zdevpSetLockScreenPolicy(ILjava/lang/String;)Z
com.android.server.zsdk.PolicyManagerService.zdevpSetMessagePolicies(II)Z
com.android.server.zsdk.PolicyManagerService.zdevpSetMessagetoAnotherSystem(Ljava/lang/String;)V
com.android.server.zsdk.PolicyManagerService.zdevpSetMicrophonePolicies(I)Z
com.android.server.zsdk.PolicyManagerService.zdevpSetNFCStatus(I)Z
com.android.server.zsdk.PolicyManagerService.zdevpSetNavigationBarStatus(I)Z
com.android.server.zsdk.PolicyManagerService.zdevpSetPasswordPolicy(I)Z
com.android.server.zsdk.PolicyManagerService.zdevpSetPeripheralPolicies(I)Z
com.android.server.zsdk.PolicyManagerService.zdevpSetPrivateIpList(ILjava/lang/String;)Z
com.android.server.zsdk.PolicyManagerService.zdevpSetRunAppPolicies(I[Ljava/lang/String;)Z
com.android.server.zsdk.PolicyManagerService.zdevpSetSDCardStatus(I)Z
com.android.server.zsdk.PolicyManagerService.zdevpSetScreenLockStatus(ILjava/lang/String;)Z
com.android.server.zsdk.PolicyManagerService.zdevpSetScreenShotStatus(I)Z
com.android.server.zsdk.PolicyManagerService.zdevpSetSilentInstallUninstallPolicies(I[Ljava/lang/String;)Z
com.android.server.zsdk.PolicyManagerService.zdevpSetSmsPolicies(ILjava/lang/String;)Z
com.android.server.zsdk.PolicyManagerService.zdevpSetSmsStatus(I)Z
com.android.server.zsdk.PolicyManagerService.zdevpSetSpeakerPolicies(I)Z
com.android.server.zsdk.PolicyManagerService.zdevpSetStatusBarStatus(I)Z
com.android.server.zsdk.PolicyManagerService.zdevpSetSysTime(J)Z
com.android.server.zsdk.PolicyManagerService.zdevpSetSystemUpdatePolicies(I)Z
com.android.server.zsdk.PolicyManagerService.zdevpSetTelephonyStatus(I)Z
com.android.server.zsdk.PolicyManagerService.zdevpSetTelephonyWhiteListTypeStatus(I)Z
com.android.server.zsdk.PolicyManagerService.zdevpSetUSBUtilStatus(I)Z
com.android.server.zsdk.PolicyManagerService.zdevpSetUserApnMgrPolicies(I)Z
com.android.server.zsdk.PolicyManagerService.zdevpSetUserPasswordPolicies(I)Z
com.android.server.zsdk.PolicyManagerService.zdevpSetUserTimeMgrStatus(I)Z
com.android.server.zsdk.PolicyManagerService.zdevpSetVoicePolicies(I)Z
com.android.server.zsdk.PolicyManagerService.zdevpSetWifiApStatus(I[Ljava/lang/String;)Z
com.android.server.zsdk.PolicyManagerService.zdevpSetWifiConfiguration(Ljava/lang/String;)Z
com.android.server.zsdk.PolicyManagerService.zdevpSetWifiStatus(I[Ljava/lang/String;)Z
com.android.server.zsdk.PolicyManagerService.zdevpShutDown()V
com.android.server.zsdk.PolicyManagerService.zdevpStopSpecialApp(Ljava/lang/String;)V
com.android.server.zsdk.PolicyManagerService.zdevpSwitchZoneFrom(II)V
com.android.server.zsdk.PolicyManagerService.zdevpUpdateAppsList(IILjava/lang/String;[Ljava/lang/String;)Z
com.android.server.zsdk.PolicyManagerService.zdevpVerifySignature()Z
com.android.server.zsdk.PolicyManagerService.zdevpisInWhiteListTypeNumber(Ljava/lang/String;I)Z
com.android.server.zsdk.PolicyManagerService.zsdkGetAppInstallationPolicy()Ljava/lang/String;
com.android.server.zsdk.PolicyManagerService.zsdkGetMessageWhiteListTypeStatus()I
com.android.server.zsdk.PolicyManagerService.zsdkResetSilenceInstallStatus()V
com.android.server.zsdk.PolicyManagerService.zsdkSetMessageWhiteListTypeStatus(I)Z
com.android.server.zsdk.PolicyManagerService.zsdkSetSilenceInstallStatus()V
com.android.server.zsdk.PolicyManagerService.zsdksetAppInstallationPolicy(Ljava/lang/String;Ljava/lang/String;)Z
com.android.server.VendorLocationManagerService.getGpsEnabledState()Z
com.android.server.VendorLocationManagerService.setGpsEnabledState(Z)V
com.zte.defragment.DefragmentManagerService.shouldDefragment(Z)V
com.android.server.StorageManagerService.RunZteIdleMaintenance(III)V
com.android.server.ContainerMsgReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
