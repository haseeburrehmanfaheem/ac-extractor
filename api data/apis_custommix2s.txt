com.android.server.BluetoothManagerService.factoryReset()Z
com.android.server.AppOpsService.checkOperationInternal(IILjava/lang/String;)I
com.android.server.AppOpsService.registerCallback(Lcom/android/internal/app/IOpsCallback;)I
com.android.server.am.BatteryStatsService.noteBleScanStopped(Landroid/os/WorkSource;)V
com.android.server.am.BatteryStatsService.noteJobFinish(Ljava/lang/String;I)V
com.android.server.os.RegionalizationService.checkFileExists(Ljava/lang/String;)Z
com.android.server.os.RegionalizationService.deleteFilesUnderDir(Ljava/lang/String;Ljava/lang/String;Z)V
com.android.server.os.RegionalizationService.readFile(Ljava/lang/String;Ljava/lang/String;)Ljava/util/List;
com.android.server.os.RegionalizationService.writeFile(Ljava/lang/String;Ljava/lang/String;Z)Z
com.android.server.wifi.RttService$RttServiceImpl.getMessenger()Landroid/os/Messenger;
com.android.server.wallpaper.WallpaperManagerService.getWallpaper(Landroid/app/IWallpaperManagerCallback;ILandroid/os/Bundle;I)Landroid/os/ParcelFileDescriptor;
com.android.server.AlarmManagerService$2.updateBlockedUids(IZ)V
com.android.server.accessibility.AccessibilityManagerService.addAccessibilityInteractionConnection(Landroid/view/IWindow;Landroid/view/accessibility/IAccessibilityInteractionConnection;I)I
com.android.server.StorageManagerService.allocateBytes(Ljava/lang/String;JI)V
com.android.server.StorageManagerService.getAllocatableBytes(Ljava/lang/String;I)J
com.android.server.TextServicesManagerService.setCurrentSpellChecker(Ljava/lang/String;Ljava/lang/String;)V
com.android.server.TextServicesManagerService.setCurrentSpellCheckerSubtype(Ljava/lang/String;I)V
com.android.server.TextServicesManagerService.setSpellCheckerEnabled(Z)V
com.android.server.input.InputManagerService.switchTouchCoverMode(Z)V
com.android.server.input.InputManagerService.switchTouchSensitiveMode(Z)V
com.android.server.input.InputManagerService.switchTouchStylusMode(Z)V
com.android.server.input.InputManagerService.switchTouchWakeupMode(Z)V
com.android.server.audio.AudioService.createAudioRecordForLoopback(Landroid/os/ParcelFileDescriptor;J)Landroid/os/IBinder;
com.android.server.TelephonyRegistry.getMiuiTelephony()Lmiui/telephony/IMiuiTelephony;
com.android.server.TelephonyRegistry.setMiuiTelephony(Lmiui/telephony/IMiuiTelephony;)V
com.android.server.securespaces.SpaceEncryptionService.ecryptfsMount(IILjava/lang/String;)I
com.android.server.securespaces.SpaceEncryptionService.ecryptfsMountRemovable(I)V
com.android.server.securespaces.SpaceEncryptionService.ecryptfsOverwrite(I)I
com.android.server.securespaces.SpaceEncryptionService.ecryptfsUnmount(I)I
com.android.server.securespaces.SpaceEncryptionService.ecryptfsUnmountRemovable(I)V
com.android.server.securespaces.SpaceEncryptionService.ecryptfsUpdate(IILjava/lang/String;)I
com.android.server.securespaces.SpaceEncryptionService.isAuthProtected(I)Z
com.android.server.securespaces.SpaceEncryptionService.isDataDirectoryTmpfs()Z
com.android.server.securespaces.SpaceEncryptionService.needAirlockUser(I)Z
com.android.server.securespaces.SpaceEncryptionService.needsEcryptfsMount(I)Z
com.android.server.securespaces.SpaceEncryptionService.onWipeUserDataCompleted(I)V
com.android.server.securespaces.SpaceEncryptionService.processEncryption(Landroid/content/pm/UserInfo;)Z
com.android.server.securespaces.SpaceEncryptionService.setAirlockWallpaperToUser(I)V
com.android.server.securespaces.SpaceEncryptionService.setOpAddExcludeFromWipe(Ljava/lang/String;ILjava/lang/String;)Z
com.android.server.securespaces.SpaceEncryptionService.setOpClearUserData(Ljava/lang/String;ILjava/lang/String;)Z
com.android.server.securespaces.SpaceEncryptionService.setOpCreateUserConfig(I)Z
com.android.server.securespaces.SpaceEncryptionService.setOpCreateUserData(Ljava/lang/String;ILjava/lang/String;ILjava/lang/String;)Z
com.android.server.securespaces.SpaceEncryptionService.setOpDeleteCacheFiles(Ljava/lang/String;ILjava/lang/String;)Z
com.android.server.securespaces.SpaceEncryptionService.setOpDeleteCodeCacheFiles(Ljava/lang/String;ILjava/lang/String;)Z
com.android.server.securespaces.SpaceEncryptionService.setOpDestroyAppData(Ljava/lang/String;Ljava/lang/String;IIJ)Z
com.android.server.securespaces.SpaceEncryptionService.setOpLinkNativeLibraryDir(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;)Z
com.android.server.securespaces.SpaceEncryptionService.setOpRemove(Ljava/lang/String;ILjava/lang/String;)Z
com.android.server.securespaces.SpaceEncryptionService.switchUser(I)Z
com.android.server.securespaces.SpaceEncryptionService.wipeRemovableUserDir(I)V
com.android.server.usage.UsageStatsService$BinderService.queryUsageStatsAsUser(IJJLjava/lang/String;I)Landroid/content/pm/ParceledListSlice;
com.android.server.net.NetworkPolicyManagerService.isNetworkMetered(Landroid/net/NetworkState;)Z
android.service.securespaces.SecureSpacesService.getDeviceOwnerUserRestrictions()Ljava/util/List;
android.service.securespaces.SecureSpacesService.getExtensionMajorVersion(Ljava/lang/String;)I
android.service.securespaces.SecureSpacesService.getExtensionMinorVersion(Ljava/lang/String;)I
android.service.securespaces.SecureSpacesService.getExtensionServiceName(Ljava/lang/String;)Ljava/lang/String;
android.service.securespaces.SecureSpacesService.getExtensions()Ljava/util/List;
android.service.securespaces.SecureSpacesService.getMajorVersionNumber()I
android.service.securespaces.SecureSpacesService.getMinorVersionNumber()I
android.service.securespaces.SecureSpacesService.getSubsForSpace(I)[I
android.service.securespaces.SecureSpacesService.getUserIdForSub(I)I
android.service.securespaces.SecureSpacesService.getUserRestrictions()Ljava/util/List;
android.service.securespaces.SecureSpacesService.hasExtension(Ljava/lang/String;)Z
android.service.securespaces.SecureSpacesService.setSubForUserId(II)V
com.android.server.DeviceIdleController$BinderService.getIdleStateDetailed()I
com.android.server.DeviceIdleController$BinderService.getLightIdleStateDetailed()I
com.miui.server.SecurityManagerService.activityResume(Landroid/content/Intent;)I
com.miui.server.SecurityManagerService.addAccessControlPass(Ljava/lang/String;)V
com.miui.server.SecurityManagerService.addAccessControlPassForUser(Ljava/lang/String;I)V
com.miui.server.SecurityManagerService.areNotificationsEnabledForPackage(Ljava/lang/String;I)Z
com.miui.server.SecurityManagerService.checkAccessControlPass(Ljava/lang/String;Landroid/content/Intent;)Z
com.miui.server.SecurityManagerService.checkAccessControlPassAsUser(Ljava/lang/String;Landroid/content/Intent;I)Z
com.miui.server.SecurityManagerService.checkAccessControlPassword(Ljava/lang/String;Ljava/lang/String;I)Z
com.miui.server.SecurityManagerService.checkAllowStartActivity(Ljava/lang/String;Ljava/lang/String;Landroid/content/Intent;I)Z
com.miui.server.SecurityManagerService.checkGameBoosterAntimsgPassAsUser(Ljava/lang/String;Landroid/content/Intent;I)Z
com.miui.server.SecurityManagerService.checkSmsBlocked(Landroid/content/Intent;)Z
com.miui.server.SecurityManagerService.finishAccessControl(Ljava/lang/String;I)V
com.miui.server.SecurityManagerService.getAccessControlPasswordType(I)Ljava/lang/String;
com.miui.server.SecurityManagerService.getAppPermissionControlOpen(I)I
com.miui.server.SecurityManagerService.getApplicationAccessControlEnabled(Ljava/lang/String;)Z
com.miui.server.SecurityManagerService.getApplicationAccessControlEnabledAsUser(Ljava/lang/String;I)Z
com.miui.server.SecurityManagerService.getApplicationChildrenControlEnabled(Ljava/lang/String;)Z
com.miui.server.SecurityManagerService.getApplicationMaskNotificationEnabledAsUser(Ljava/lang/String;I)Z
com.miui.server.SecurityManagerService.getCurrentUserId()I
com.miui.server.SecurityManagerService.getGameMode(I)Z
com.miui.server.SecurityManagerService.getIncompatibleAppList()Ljava/util/List;
com.miui.server.SecurityManagerService.getPackageNameByPid(I)Ljava/lang/String;
com.miui.server.SecurityManagerService.getSecondSpaceId()I
com.miui.server.SecurityManagerService.getSysAppCracked()I
com.miui.server.SecurityManagerService.getWakePathCallListLog()Landroid/content/pm/ParceledListSlice;
com.miui.server.SecurityManagerService.getWakePathComponents(Ljava/lang/String;)Landroid/content/pm/ParceledListSlice;
com.miui.server.SecurityManagerService.getWakeUpTime(Ljava/lang/String;)J
com.miui.server.SecurityManagerService.grantInstallPermission(Ljava/lang/String;Ljava/lang/String;)V
com.miui.server.SecurityManagerService.grantRuntimePermission(Ljava/lang/String;)V
com.miui.server.SecurityManagerService.haveAccessControlPassword(I)Z
com.miui.server.SecurityManagerService.isAppHide()Z
com.miui.server.SecurityManagerService.isAppPrivacyEnabled(Ljava/lang/String;)Z
com.miui.server.SecurityManagerService.isFunctionOpen()Z
com.miui.server.SecurityManagerService.isRestrictedAppNet(Ljava/lang/String;)Z
com.miui.server.SecurityManagerService.isValidDevice()Z
com.miui.server.SecurityManagerService.killNativePackageProcesses(ILjava/lang/String;)V
com.miui.server.SecurityManagerService.needFinishAccessControl(Landroid/os/IBinder;)Z
com.miui.server.SecurityManagerService.notifyAppsPreInstalled()V
com.miui.server.SecurityManagerService.offerGoogleBaseCallBack(Lmiui/security/ISecurityCallback;)V
com.miui.server.SecurityManagerService.pushWakePathConfirmDialogWhiteList(ILjava/util/List;)V
com.miui.server.SecurityManagerService.pushWakePathData(ILandroid/content/pm/ParceledListSlice;I)V
com.miui.server.SecurityManagerService.pushWakePathWhiteList(Ljava/util/List;I)V
com.miui.server.SecurityManagerService.putSystemDataStringFile(Ljava/lang/String;Ljava/lang/String;)Z
com.miui.server.SecurityManagerService.readSystemDataStringFile(Ljava/lang/String;)Ljava/lang/String;
com.miui.server.SecurityManagerService.registerWakePathCallback(Lcom/android/internal/app/IWakePathCallback;)V
com.miui.server.SecurityManagerService.removeAccessControlPass(Ljava/lang/String;)V
com.miui.server.SecurityManagerService.removeAccessControlPassAsUser(Ljava/lang/String;I)V
com.miui.server.SecurityManagerService.removeWakePathData(I)V
com.miui.server.SecurityManagerService.saveIcon(Ljava/lang/String;Landroid/graphics/Bitmap;)V
com.miui.server.SecurityManagerService.setAccessControlPassword(Ljava/lang/String;Ljava/lang/String;I)V
com.miui.server.SecurityManagerService.setAppHide(Z)Z
com.miui.server.SecurityManagerService.setAppPermissionControlOpen(I)V
com.miui.server.SecurityManagerService.setAppPrivacyStatus(Ljava/lang/String;Z)V
com.miui.server.SecurityManagerService.setApplicationAccessControlEnabled(Ljava/lang/String;Z)V
com.miui.server.SecurityManagerService.setApplicationAccessControlEnabledForUser(Ljava/lang/String;ZI)V
com.miui.server.SecurityManagerService.setApplicationChildrenControlEnabled(Ljava/lang/String;Z)V
com.miui.server.SecurityManagerService.setApplicationMaskNotificationEnabledForUser(Ljava/lang/String;ZI)V
com.miui.server.SecurityManagerService.setCoreRuntimePermissionEnabled(ZI)V
com.miui.server.SecurityManagerService.setCurrentNetworkState(I)Z
com.miui.server.SecurityManagerService.setGameBoosterIBinder(Landroid/os/IBinder;IZ)V
com.miui.server.SecurityManagerService.setIncompatibleAppList(Ljava/util/List;)V
com.miui.server.SecurityManagerService.setMiuiFirewallRule(Ljava/lang/String;II)Z
com.miui.server.SecurityManagerService.setNotificationsEnabledForPackage(Ljava/lang/String;IZ)V
com.miui.server.SecurityManagerService.setTrackWakePathCallListLogEnabled(Z)V
com.miui.server.SecurityManagerService.setWakeUpTime(Ljava/lang/String;J)V
com.miui.server.SecurityManagerService.startInterceptSmsBySender(Ljava/lang/String;Ljava/lang/String;I)Z
com.miui.server.SecurityManagerService.stopInterceptSmsBySender()Z
com.miui.server.SecurityManagerService.writeAppHideConfig(Z)Z
com.android.server.wm.WindowManagerService.cancelMiuiThumbnailAnimation()V
com.android.server.wm.WindowManagerService.getGestureStubListener()Landroid/view/IGestureStubListener;
com.android.server.wm.WindowManagerService.overrideMiuiAnimSupportWinInset(Landroid/graphics/Rect;)V
com.android.server.wm.WindowManagerService.overridePendingAppTransitionLaunchFromHome(IIII)V
com.android.server.NetworkManagementService.getMiuiNetworkManager()Landroid/os/IBinder;
com.android.server.NetworkManagementService.setFirewallEgressDestRule(Ljava/lang/String;IZ)V
com.android.server.NetworkManagementService.setFirewallEgressSourceRule(Ljava/lang/String;Z)V
com.android.server.LocationPolicyManagerService.checkUidLocationOp(II)Z
com.android.server.LocationPolicyManagerService.checkUidNavigationScreenLock(I)Z
com.android.server.LocationPolicyManagerService.getLocationPolicies()[Landroid/location/LocationPolicy;
com.android.server.LocationPolicyManagerService.getRestrictBackground()Z
com.android.server.LocationPolicyManagerService.getUidPolicy(I)I
com.android.server.LocationPolicyManagerService.getUidsWithPolicy(I)[I
com.android.server.LocationPolicyManagerService.isUidForeground(I)Z
com.android.server.LocationPolicyManagerService.registerListener(Landroid/location/ILocationPolicyListener;)V
com.android.server.LocationPolicyManagerService.setFakeGpsFeatureOnState(Z)V
com.android.server.LocationPolicyManagerService.setLocationPolicies([Landroid/location/LocationPolicy;)V
com.android.server.LocationPolicyManagerService.setPhoneStationary(ZLandroid/location/Location;)V
com.android.server.LocationPolicyManagerService.setRestrictBackground(Z)V
com.android.server.LocationPolicyManagerService.setUidNavigationStart(I)V
com.android.server.LocationPolicyManagerService.setUidNavigationStop(I)V
com.android.server.LocationPolicyManagerService.setUidPolicy(II)V
com.android.server.LocationPolicyManagerService.unregisterListener(Landroid/location/ILocationPolicyListener;)V
com.android.server.wifi.p2p.WifiP2pServiceImpl.getMessenger()Landroid/os/Messenger;
com.android.server.pm.PackageManagerService.notifyDexLoad(Ljava/lang/String;Ljava/util/List;Ljava/lang/String;)V
com.android.server.pm.PackageManagerService.performDexOpt(Ljava/lang/String;ZIZ)Z
com.android.server.pm.PackageManagerService.performDexOptMode(Ljava/lang/String;ZLjava/lang/String;Z)Z
com.android.server.pm.PackageManagerService.revokeRuntimePermissionNotKill(Ljava/lang/String;Ljava/lang/String;I)V
com.android.server.am.ActivityManagerService.backgroundResourcesReleased(Landroid/os/IBinder;)V
com.android.server.am.ActivityManagerService.createStackOnDisplay(I)Landroid/app/IActivityContainer;
com.android.server.am.ActivityManagerService.createVirtualActivityContainer(Landroid/os/IBinder;Landroid/app/IActivityContainerCallback;)Landroid/app/IActivityContainer;
com.android.server.am.ActivityManagerService.dumpHeap(Ljava/lang/String;IZLjava/lang/String;Landroid/os/ParcelFileDescriptor;)Z
com.android.server.am.ActivityManagerService.isBackgroundVisibleBehind(Landroid/os/IBinder;)Z
com.android.server.am.ActivityManagerService.registerMiuiAppTransitionAnimationHelper(Lcom/miui/internal/transition/IMiuiAppTransitionAnimationHelper;)V
com.android.server.am.ActivityManagerService.reportActivityFullyDrawn(Landroid/os/IBinder;)V
com.android.server.am.ActivityManagerService.requestVisibleBehind(Landroid/os/IBinder;Z)Z
com.android.server.am.ActivityManagerService.setDummyTranslucent(Landroid/os/IBinder;Z)V
com.android.server.am.ActivityManagerService.setLockScreenShown(Z)V
com.android.server.am.ActivityManagerService.setResizeWhiteList(Ljava/util/List;)V
com.android.server.am.ActivityManagerService.unregisterMiuiAppTransitionAnimationHelper()V
com.miui.server.MiuiInitServer.doFactoryReset(Z)V
com.miui.server.MiuiInitServer.getAspectRatio(Ljava/lang/String;)F
com.miui.server.MiuiInitServer.getCustVariants()[Ljava/lang/String;
com.miui.server.MiuiInitServer.getDefaultAspectType(Ljava/lang/String;)I
com.miui.server.MiuiInitServer.getMiuiChannelPath(Ljava/lang/String;)Ljava/lang/String;
com.miui.server.MiuiInitServer.getMiuiPreinstallAppPath(Ljava/lang/String;)Ljava/lang/String;
com.miui.server.MiuiInitServer.initCustEnvironment(Ljava/lang/String;Lmiui/os/IMiuiInitObserver;)Z
com.miui.server.MiuiInitServer.installPreinstallApp()V
com.miui.server.MiuiInitServer.isPreinstalledPackage(Ljava/lang/String;)Z
com.miui.server.MiuiInitServer.isRestrictAspect(Ljava/lang/String;)Z
com.miui.server.MiuiInitServer.removeFromPreinstallList(Ljava/lang/String;)V
com.miui.server.MiuiInitServer.setRestrictAspect(Ljava/lang/String;Z)V
com.android.server.statusbar.StatusBarManagerService.handleSystemNavigationKey(I)V
com.android.server.statusbar.StatusBarManagerService.setStatus(ILandroid/os/IBinder;Ljava/lang/String;Landroid/os/Bundle;)V
com.android.server.net.NetworkStatsService.openSessionForUsageStats(Ljava/lang/String;)Landroid/net/INetworkStatsSession;
com.android.server.ConnectivityService.isTetheringSupported()Z
com.android.server.ConnectivityService.setUsbTethering(Z)I
com.android.server.ConnectivityService.startTethering(ILandroid/os/ResultReceiver;Z)V
com.android.server.ConnectivityService.stopTethering(I)V
com.android.server.ConnectivityService.tether(Ljava/lang/String;)I
com.android.server.ConnectivityService.untether(Ljava/lang/String;)I
com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub.startSession(Landroid/os/IBinder;Landroid/os/IBinder;Landroid/view/autofill/AutofillId;Landroid/graphics/Rect;Landroid/view/autofill/AutofillValue;IZILjava/lang/String;)I
com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub.updateOrRestartSession(Landroid/os/IBinder;Landroid/os/IBinder;Landroid/view/autofill/AutofillId;Landroid/graphics/Rect;Landroid/view/autofill/AutofillValue;IZILjava/lang/String;II)I
com.miui.server.PerfShielderService.addActivityLaunchTime(Ljava/lang/String;Ljava/lang/String;JJZZ)V
com.miui.server.PerfShielderService.addTimeConsumingIntent([Ljava/lang/String;)V
com.miui.server.PerfShielderService.clearTimeConsumingIntent()V
com.miui.server.PerfShielderService.closeCheckPriority()V
com.miui.server.PerfShielderService.deletePackageInfo(Ljava/lang/String;)Z
com.miui.server.PerfShielderService.deleteRedirectRule(Ljava/lang/String;Ljava/lang/String;)Z
com.miui.server.PerfShielderService.getAllRunningProcessMemInfos()Ljava/util/List;
com.miui.server.PerfShielderService.getFreeMemory()J
com.miui.server.PerfShielderService.getMemoryTrimLevel()I
com.miui.server.PerfShielderService.getPackageNameByPid(I)Ljava/lang/String;
com.miui.server.PerfShielderService.insertPackageInfo(Landroid/content/pm/PackageInfo;)Z
com.miui.server.PerfShielderService.insertRedirectRule(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;)Z
com.miui.server.PerfShielderService.killUnusedApp(II)V
com.miui.server.PerfShielderService.removeServicePriority(Lcom/android/internal/app/MiuiServicePriority;Z)V
com.miui.server.PerfShielderService.removeTimeConsumingIntent([Ljava/lang/String;)V
com.miui.server.PerfShielderService.reportAnr(ILjava/lang/String;JJLjava/lang/String;)V
com.miui.server.PerfShielderService.reportPerceptibleJank(IILjava/lang/String;JJJI)V
com.miui.server.PerfShielderService.setForkedProcessGroup(IIILjava/lang/String;)V
com.miui.server.PerfShielderService.setMiuiBroadcastDispatchEnable(Z)V
com.miui.server.PerfShielderService.setMiuiContentProviderControl(Z)V
com.miui.server.PerfShielderService.setSchedFgPid(I)V
com.miui.server.PerfShielderService.setServicePriority(Ljava/util/List;)V
com.miui.server.PerfShielderService.setServicePriorityWithNoProc(Ljava/util/List;J)V
com.miui.server.PerfShielderService.updateProcessFullMemInfoByPids([I)Ljava/util/List;
com.miui.server.PerfShielderService.updateProcessPartialMemInfoByPids([I)Ljava/util/List;
com.android.server.notification.NotificationManagerService$5.addAutomaticZenRule(Landroid/app/AutomaticZenRule;)Ljava/lang/String;
com.android.server.notification.NotificationManagerService$5.applyAdjustmentFromAssistant(Landroid/service/notification/INotificationListener;Landroid/service/notification/Adjustment;)V
com.android.server.notification.NotificationManagerService$5.applyAdjustmentsFromAssistant(Landroid/service/notification/INotificationListener;Ljava/util/List;)V
com.android.server.notification.NotificationManagerService$5.applyEnqueuedAdjustmentFromAssistant(Landroid/service/notification/INotificationListener;Landroid/service/notification/Adjustment;)V
com.android.server.notification.NotificationManagerService$5.applyRestore([BI)V
com.android.server.notification.NotificationManagerService$5.areNotificationsEnabled(Ljava/lang/String;)Z
com.android.server.notification.NotificationManagerService$5.areNotificationsEnabledForPackage(Ljava/lang/String;I)Z
com.android.server.notification.NotificationManagerService$5.buzzBeepBlinkForNotification(Ljava/lang/String;)V
com.android.server.notification.NotificationManagerService$5.canShowBadge(Ljava/lang/String;I)Z
com.android.server.notification.NotificationManagerService$5.cancelAllNotifications(Ljava/lang/String;I)V
com.android.server.notification.NotificationManagerService$5.cancelNotificationFromListener(Landroid/service/notification/INotificationListener;Ljava/lang/String;Ljava/lang/String;I)V
com.android.server.notification.NotificationManagerService$5.cancelNotificationWithTag(Ljava/lang/String;Ljava/lang/String;II)V
com.android.server.notification.NotificationManagerService$5.cancelNotificationsFromListener(Landroid/service/notification/INotificationListener;[Ljava/lang/String;)V
com.android.server.notification.NotificationManagerService$5.cancelToast(Ljava/lang/String;Landroid/app/ITransientNotification;)V
com.android.server.notification.NotificationManagerService$5.clearData(Ljava/lang/String;IZ)V
com.android.server.notification.NotificationManagerService$5.createNotificationChannelGroups(Ljava/lang/String;Landroid/content/pm/ParceledListSlice;)V
com.android.server.notification.NotificationManagerService$5.createNotificationChannels(Ljava/lang/String;Landroid/content/pm/ParceledListSlice;)V
com.android.server.notification.NotificationManagerService$5.createNotificationChannelsForPackage(Ljava/lang/String;ILandroid/content/pm/ParceledListSlice;)V
com.android.server.notification.NotificationManagerService$5.deleteNotificationChannel(Ljava/lang/String;Ljava/lang/String;)V
com.android.server.notification.NotificationManagerService$5.deleteNotificationChannelGroup(Ljava/lang/String;Ljava/lang/String;)V
com.android.server.notification.NotificationManagerService$5.enqueueNotificationWithTag(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILandroid/app/Notification;I)V
com.android.server.notification.NotificationManagerService$5.enqueueToast(Ljava/lang/String;Landroid/app/ITransientNotification;I)V
com.android.server.notification.NotificationManagerService$5.getActiveNotifications(Ljava/lang/String;)[Landroid/service/notification/StatusBarNotification;
com.android.server.notification.NotificationManagerService$5.getActiveNotificationsFromListener(Landroid/service/notification/INotificationListener;[Ljava/lang/String;I)Landroid/content/pm/ParceledListSlice;
com.android.server.notification.NotificationManagerService$5.getAppActiveNotifications(Ljava/lang/String;I)Landroid/content/pm/ParceledListSlice;
com.android.server.notification.NotificationManagerService$5.getAutomaticZenRule(Ljava/lang/String;)Landroid/app/AutomaticZenRule;
com.android.server.notification.NotificationManagerService$5.getBackupPayload(I)[B
com.android.server.notification.NotificationManagerService$5.getDeletedChannelCount(Ljava/lang/String;I)I
com.android.server.notification.NotificationManagerService$5.getEffectsSuppressor()Landroid/content/ComponentName;
com.android.server.notification.NotificationManagerService$5.getHintsFromListener(Landroid/service/notification/INotificationListener;)I
com.android.server.notification.NotificationManagerService$5.getHistoricalNotifications(Ljava/lang/String;I)[Landroid/service/notification/StatusBarNotification;
com.android.server.notification.NotificationManagerService$5.getInterruptionFilterFromListener(Landroid/service/notification/INotificationListener;)I
com.android.server.notification.NotificationManagerService$5.getNotificationChannel(Ljava/lang/String;Ljava/lang/String;)Landroid/app/NotificationChannel;
com.android.server.notification.NotificationManagerService$5.getNotificationChannelForPackage(Ljava/lang/String;ILjava/lang/String;Z)Landroid/app/NotificationChannel;
com.android.server.notification.NotificationManagerService$5.getNotificationChannelGroupForPackage(Ljava/lang/String;Ljava/lang/String;I)Landroid/app/NotificationChannelGroup;
com.android.server.notification.NotificationManagerService$5.getNotificationChannelGroups(Ljava/lang/String;)Landroid/content/pm/ParceledListSlice;
com.android.server.notification.NotificationManagerService$5.getNotificationChannelGroupsForPackage(Ljava/lang/String;IZ)Landroid/content/pm/ParceledListSlice;
com.android.server.notification.NotificationManagerService$5.getNotificationChannelGroupsFromPrivilegedListener(Landroid/service/notification/INotificationListener;Ljava/lang/String;Landroid/os/UserHandle;)Landroid/content/pm/ParceledListSlice;
com.android.server.notification.NotificationManagerService$5.getNotificationChannels(Ljava/lang/String;)Landroid/content/pm/ParceledListSlice;
com.android.server.notification.NotificationManagerService$5.getNotificationChannelsForPackage(Ljava/lang/String;IZ)Landroid/content/pm/ParceledListSlice;
com.android.server.notification.NotificationManagerService$5.getNotificationChannelsFromPrivilegedListener(Landroid/service/notification/INotificationListener;Ljava/lang/String;Landroid/os/UserHandle;)Landroid/content/pm/ParceledListSlice;
com.android.server.notification.NotificationManagerService$5.getNotificationPolicy(Ljava/lang/String;)Landroid/app/NotificationManager$Policy;
com.android.server.notification.NotificationManagerService$5.getNumNotificationChannelsForPackage(Ljava/lang/String;IZ)I
com.android.server.notification.NotificationManagerService$5.getPackageImportance(Ljava/lang/String;)I
com.android.server.notification.NotificationManagerService$5.getPackagesRequestingNotificationPolicyAccess()[Ljava/lang/String;
com.android.server.notification.NotificationManagerService$5.getRuleInstanceCount(Landroid/content/ComponentName;)I
com.android.server.notification.NotificationManagerService$5.getSnoozedNotificationsFromListener(Landroid/service/notification/INotificationListener;I)Landroid/content/pm/ParceledListSlice;
com.android.server.notification.NotificationManagerService$5.getZenMode()I
com.android.server.notification.NotificationManagerService$5.getZenModeConfig()Landroid/service/notification/ZenModeConfig;
com.android.server.notification.NotificationManagerService$5.getZenRules()Ljava/util/List;
com.android.server.notification.NotificationManagerService$5.isNotificationPolicyAccessGranted(Ljava/lang/String;)Z
com.android.server.notification.NotificationManagerService$5.isNotificationPolicyAccessGrantedForPackage(Ljava/lang/String;)Z
com.android.server.notification.NotificationManagerService$5.isSystemConditionProviderEnabled(Ljava/lang/String;)Z
com.android.server.notification.NotificationManagerService$5.matchesCallFilter(Landroid/os/Bundle;)Z
com.android.server.notification.NotificationManagerService$5.notifyConditions(Ljava/lang/String;Landroid/service/notification/IConditionProvider;[Landroid/service/notification/Condition;)V
com.android.server.notification.NotificationManagerService$5.onlyHasDefaultChannel(Ljava/lang/String;I)Z
com.android.server.notification.NotificationManagerService$5.registerListener(Landroid/service/notification/INotificationListener;Landroid/content/ComponentName;I)V
com.android.server.notification.NotificationManagerService$5.removeAutomaticZenRule(Ljava/lang/String;)Z
com.android.server.notification.NotificationManagerService$5.removeAutomaticZenRules(Ljava/lang/String;)Z
com.android.server.notification.NotificationManagerService$5.requestBindListener(Landroid/content/ComponentName;)V
com.android.server.notification.NotificationManagerService$5.requestBindProvider(Landroid/content/ComponentName;)V
com.android.server.notification.NotificationManagerService$5.requestHintsFromListener(Landroid/service/notification/INotificationListener;I)V
com.android.server.notification.NotificationManagerService$5.requestInterruptionFilterFromListener(Landroid/service/notification/INotificationListener;I)V
com.android.server.notification.NotificationManagerService$5.requestUnbindListener(Landroid/service/notification/INotificationListener;)V
com.android.server.notification.NotificationManagerService$5.requestUnbindProvider(Landroid/service/notification/IConditionProvider;)V
com.android.server.notification.NotificationManagerService$5.setInterruptionFilter(Ljava/lang/String;I)V
com.android.server.notification.NotificationManagerService$5.setNotificationPolicy(Ljava/lang/String;Landroid/app/NotificationManager$Policy;)V
com.android.server.notification.NotificationManagerService$5.setNotificationPolicyAccessGranted(Ljava/lang/String;Z)V
com.android.server.notification.NotificationManagerService$5.setNotificationsEnabledForPackage(Ljava/lang/String;IZ)V
com.android.server.notification.NotificationManagerService$5.setNotificationsShownFromListener(Landroid/service/notification/INotificationListener;[Ljava/lang/String;)V
com.android.server.notification.NotificationManagerService$5.setOnNotificationPostedTrimFromListener(Landroid/service/notification/INotificationListener;I)V
com.android.server.notification.NotificationManagerService$5.setShowBadge(Ljava/lang/String;IZ)V
com.android.server.notification.NotificationManagerService$5.setZenMode(ILandroid/net/Uri;Ljava/lang/String;)V
com.android.server.notification.NotificationManagerService$5.snoozeNotificationUntilContextFromListener(Landroid/service/notification/INotificationListener;Ljava/lang/String;Ljava/lang/String;)V
com.android.server.notification.NotificationManagerService$5.snoozeNotificationUntilFromListener(Landroid/service/notification/INotificationListener;Ljava/lang/String;J)V
com.android.server.notification.NotificationManagerService$5.unregisterListener(Landroid/service/notification/INotificationListener;I)V
com.android.server.notification.NotificationManagerService$5.unsnoozeNotificationFromAssistant(Landroid/service/notification/INotificationListener;Ljava/lang/String;)V
com.android.server.notification.NotificationManagerService$5.updateAutomaticZenRule(Ljava/lang/String;Landroid/app/AutomaticZenRule;)Z
com.android.server.notification.NotificationManagerService$5.updateNotificationChannelForPackage(Ljava/lang/String;ILandroid/app/NotificationChannel;)V
com.android.server.notification.NotificationManagerService$5.updateNotificationChannelFromPrivilegedListener(Landroid/service/notification/INotificationListener;Ljava/lang/String;Landroid/os/UserHandle;Landroid/app/NotificationChannel;)V
com.miui.server.BackupManagerService.acquire(Lmiui/app/backup/IBackupServiceStateObserver;Landroid/os/IBinder;)Z
com.miui.server.BackupManagerService.addCompletedSize(J)V
com.miui.server.BackupManagerService.backupPackage(Landroid/os/ParcelFileDescriptor;Landroid/os/ParcelFileDescriptor;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;ZZZLmiui/app/backup/IPackageBackupRestoreObserver;)V
com.miui.server.BackupManagerService.errorOccur(I)V
com.miui.server.BackupManagerService.getBackupTimeoutScale()I
com.miui.server.BackupManagerService.getCurrentRunningPackage()Ljava/lang/String;
com.miui.server.BackupManagerService.getCurrentWorkingFeature()I
com.miui.server.BackupManagerService.getState()I
com.miui.server.BackupManagerService.isNeedBeKilled(Ljava/lang/String;)Z
com.miui.server.BackupManagerService.isRunningFromMiui(I)Z
com.miui.server.BackupManagerService.isServiceIdle()Z
com.miui.server.BackupManagerService.onApkInstalled()V
com.miui.server.BackupManagerService.readMiuiBackupHeader(Landroid/os/ParcelFileDescriptor;)V
com.miui.server.BackupManagerService.release(Lmiui/app/backup/IBackupServiceStateObserver;)V
com.miui.server.BackupManagerService.restoreFile(Landroid/os/ParcelFileDescriptor;Ljava/lang/String;ZLmiui/app/backup/IPackageBackupRestoreObserver;)V
com.miui.server.BackupManagerService.setCustomProgress(III)V
com.miui.server.BackupManagerService.setIsNeedBeKilled(Ljava/lang/String;Z)V
com.miui.server.BackupManagerService.shouldSkipData()Z
com.miui.server.BackupManagerService.startConfirmationUi(ILjava/lang/String;)V
com.miui.server.BackupManagerService.writeMiuiBackupHeader(Landroid/os/ParcelFileDescriptor;)V
com.android.server.power.PowerManagerService$BinderService.getScreenBrightnessReal()I
com.android.server.power.PowerManagerService$BinderService.updateBlockedUids(IZ)V
com.android.server.LockSettingsService.addEscrowToken([BI)J
com.android.server.LockSettingsService.checkCredential(Ljava/lang/String;IILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse;
com.android.server.LockSettingsService.checkPrivacyPasswordPattern(Ljava/lang/String;Ljava/lang/String;I)Z
com.android.server.LockSettingsService.checkVoldPassword(I)Z
com.android.server.LockSettingsService.getBoolean(Ljava/lang/String;ZI)Z
com.android.server.LockSettingsService.getLong(Ljava/lang/String;JI)J
com.android.server.LockSettingsService.getPassword()Ljava/lang/String;
com.android.server.LockSettingsService.getSeparateProfileChallengeEnabled(I)Z
com.android.server.LockSettingsService.getString(Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String;
com.android.server.LockSettingsService.getStrongAuthForUser(I)I
com.android.server.LockSettingsService.havePassword(I)Z
com.android.server.LockSettingsService.havePattern(I)Z
com.android.server.LockSettingsService.isEscrowTokenActive(JI)Z
com.android.server.LockSettingsService.registerStrongAuthTracker(Landroid/app/trust/IStrongAuthTracker;)V
com.android.server.LockSettingsService.removeEscrowToken(JI)Z
com.android.server.LockSettingsService.requireStrongAuth(II)V
com.android.server.LockSettingsService.resetKeyStore(I)V
com.android.server.LockSettingsService.sanitizePassword()V
com.android.server.LockSettingsService.savePrivacyPasswordPattern(Ljava/lang/String;Ljava/lang/String;I)V
com.android.server.LockSettingsService.setBoolean(Ljava/lang/String;ZI)V
com.android.server.LockSettingsService.setLockCredential(Ljava/lang/String;ILjava/lang/String;I)V
com.android.server.LockSettingsService.setLockCredentialWithToken(Ljava/lang/String;IJ[BI)Z
com.android.server.LockSettingsService.setLong(Ljava/lang/String;JI)V
com.android.server.LockSettingsService.setRawLockPassword([BI)V
com.android.server.LockSettingsService.setSeparateProfileChallengeEnabled(IZLjava/lang/String;)V
com.android.server.LockSettingsService.setString(Ljava/lang/String;Ljava/lang/String;I)V
com.android.server.LockSettingsService.systemReady()V
com.android.server.LockSettingsService.unlockUserWithToken(J[BI)V
com.android.server.LockSettingsService.unregisterStrongAuthTracker(Landroid/app/trust/IStrongAuthTracker;)V
com.android.server.LockSettingsService.userPresent(I)V
com.android.server.LockSettingsService.verifyCredential(Ljava/lang/String;IJI)Lcom/android/internal/widget/VerifyCredentialResponse;
com.android.server.LockSettingsService.verifyTiedProfileChallenge(Ljava/lang/String;IJI)Lcom/android/internal/widget/VerifyCredentialResponse;
com.android.server.OemLockService$1.isOemUnlockAllowedByCarrier()Z
com.android.server.OemLockService$1.isOemUnlockAllowedByUser()Z
com.android.server.OemLockService$1.setOemUnlockAllowedByCarrier(Z[B)V
com.android.server.OemLockService$1.setOemUnlockAllowedByUser(Z)V
com.android.server.wifi.WifiServiceImpl.getConnectedStations()Ljava/util/List;
com.android.server.wifi.WifiServiceImpl.getConnectionInfo()Landroid/net/wifi/WifiInfo;
com.android.server.wifi.WifiServiceImpl.getWifiStaSapConcurrency()Z
